var dataJsonStr='{"html":[{"addArticleTtitle":"HTML简介","classify":"html","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;keywords&quot;&nbsp;content=&quot;音乐。。。&quot;&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;description&quot;&nbsp;content=&quot;网易。。。&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;网易云音乐&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;div&gt;222&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>&lt;!DOCTYPE&nbsp;html&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----------文档声明<br>&lt;head&gt;.....&lt;head&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----------文档头部<br>&lt;body&gt;......&lt;/body&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-----------文档主体<br><br>注意事项：<br>&lt;!DOCTYPE&nbsp;html&gt;&nbsp;必须首行定格<br>&lt;title&gt;&nbsp;为文档标题<br>&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;&nbsp;文档编码格式<br>&lt;meta&nbsp;name=&quot;keywords&quot;&nbsp;content=&quot;...&quot;&gt;&nbsp;和&nbsp;&lt;meta&nbsp;name=&quot;description&quot;&nbsp;content=&quot;...&quot;&gt;&nbsp;提供给搜索引擎使用<br>&lt;meta&nbsp;name=&quot;viewport&quot;&nbsp;content=&quot;width=device-width,&nbsp;initial-scale=1.0&quot;&gt;&nbsp;移动端浏览器的宽高与缩放<br>&lt;link&gt;&nbsp;标签可以引入&nbsp;favicon&nbsp;和样式表&nbsp;CSS&nbsp;文件","addLink":"","date":"2016-01-06 19:43","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"HTML标签","classify":"html","addarticleContent":"1、文档章节<br><br>&lt;body&gt;&nbsp;页面内容&nbsp;&lt;header&gt;&nbsp;文档头部&nbsp;&lt;nav&gt;&nbsp;导航&nbsp;&lt;aside&gt;&nbsp;侧边栏&nbsp;&lt;article&gt;&nbsp;定义外部内容（如外部引用的文章）&nbsp;&lt;section&gt;&nbsp;一个独立的块&nbsp;&lt;footer&gt;&nbsp;尾部<br><br><br><br>2、文本标签<br><br>&lt;!--&nbsp;默认超链接&nbsp;&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;当前窗口显示&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;_self&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;新窗口显示&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;_blacnk&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;iframe&nbsp;中打开链接&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;iframe-name&quot;&gt;Sample&lt;/a&gt;<br>&lt;iframe&nbsp;name=&quot;iframe-name&quot;&nbsp;frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;<br><br>&lt;!--&nbsp;页面中的锚点&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;#achor&quot;&gt;Achor&nbsp;Point&lt;/a&gt;<br>&lt;section&nbsp;id=&quot;achor&quot;&gt;Achor&nbsp;Content&lt;/section&gt;<br><br>&lt;!--&nbsp;邮箱及电话需系统支持&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br>&lt;!--&nbsp;多个邮箱地址&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com,&nbsp;sample-address0@me.com&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br>&lt;!--&nbsp;添加抄送，主题和内容&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com?cc=admin@me.com&subject=Help&body=sample-body-text&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br><br>&lt;!--&nbsp;电话示例&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;tel:99999999&quot;&nbsp;title=&quot;Phone&quot;&gt;Ring&nbsp;Us&lt;/a&gt;<br><br><br><br>3、组合内容标签<br><br>&lt;div&gt;<br>&lt;p&gt;<br>&lt;ol&gt;<br>&lt;ul&gt;<br>&lt;dl&gt;<br>&lt;pre&gt;<br>&lt;blockquote&gt;<br><br><br><br>4、引用<br><br>&lt;cite&gt;&nbsp;引用作品的名字、作者的名字等<br>&lt;q&gt;&nbsp;引用一小段文字（大段文字引用用&lt;blockquote&gt;）<br>&lt;blockquote&gt;&nbsp;引用大块文字<br>&lt;pre&gt;&nbsp;保存格式化的内容（其空格、换行等格式不会丢失）<br>&lt;pre&gt;<br>&nbsp;&nbsp;<br>&lt;/pre&gt;<br><br><br><br>5、代码<br>&lt;code&gt;&nbsp;引用代码<br><br><br><br>6、格式化<br><br>&lt;b&gt;&nbsp;加粗&nbsp;&lt;i&gt;&nbsp;斜体<br><br><br><br>7、强调<br><br>&lt;em&gt;&nbsp;斜体。着重于强调内容，会改变语义的强调&nbsp;&lt;strong&gt;&nbsp;粗体。着重于强调内容的重要性<br><br><br><br>8、换行<br><br>&lt;br&gt;&nbsp;换行<br><br><br><br>9、列表<br><br>无序列表<br>&lt;ul&gt;<br>&nbsp;&nbsp;&lt;li&gt;标题&lt;/li&gt;<br>&nbsp;&nbsp;&lt;li&gt;结论&lt;/li&gt;<br>&lt;/ul&gt;<br><br>有序列表<br>&lt;ol&gt;<br>&nbsp;&nbsp;&lt;li&gt;第一&lt;/li&gt;<br>&nbsp;&nbsp;&lt;li&gt;第二&lt;/li&gt;<br>&lt;/ol&gt;<br><br>自定义列表<br>&lt;dl&gt;<br>&nbsp;&nbsp;&lt;dt&gt;作者&lt;/dt&gt;<br>&nbsp;&nbsp;&lt;dd&gt;爱因斯坦&lt;/dd&gt;<br>&nbsp;&nbsp;&lt;dt&gt;作品&lt;/dt&gt;<br>&nbsp;&nbsp;&lt;dd&gt;《相对论》&lt;/dd&gt;<br>&nbsp;&nbsp;&lt;dd&gt;《时间与空间》&lt;/dd&gt;<br>&lt;/dl&gt;<br><br>一个&lt;dt&gt;可以对应多个&lt;dd&gt;<br>NOTE:&nbsp;&lt;dl&gt;&nbsp;为自定义列表，其中包含一个或多个&nbsp;&lt;dt&gt;&nbsp;及&nbsp;一个或多个&nbsp;&lt;dd&gt;，并且dt&nbsp;与&nbsp;dl列表会有缩进的效果。&lt;pre&gt;&nbsp;会保留换行和空格，通常与&nbsp;&lt;code&gt;&nbsp;一同使用。<br><br>&lt;pre&gt;<br>&nbsp;&nbsp;&lt;code&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;main(void)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&lt;/code&gt;<br>&lt;/pre&gt;<br><br>&lt;blockquote&gt;&nbsp;拥有&nbsp;cite&nbsp;属性，它包含引用文本的出处，示例如下所示：<br>&lt;blockquote&nbsp;cite=&quot;http://example.com/facts&quot;&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Quote...&lt;/p&gt;<br>&lt;/blockquote&gt;<br><br><br><br>10、嵌入<br><br>&lt;iframe&nbsp;src=&quot;&quot;&gt;&lt;/iframe&gt;&nbsp;页面操作可以不影响到iframe的内容<br><br>&lt;!--object&nbsp;embed通常用来嵌入外部资源&nbsp;--&gt;<br>&lt;object&nbsp;type=&quot;application/x-shockwave-player&quot;&gt;<br>&nbsp;&nbsp;&lt;param&nbsp;name=&quot;movie&quot;&nbsp;value=&quot;book.pdf&quot;&gt;<br>&lt;/object&gt;<br><br>&lt;!--视频&nbsp;track可以引入字幕&nbsp;autoplay可以使视频加载后自动播放，loop可以使其循环播放&nbsp;--&gt;<br>&lt;video&nbsp;autoplay&nbsp;loop&nbsp;controls=&quot;controls&quot;&nbsp;poster=&quot;poster.jpg&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.mp4&quot;&nbsp;type=&quot;video/mp4&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.webm&quot;&nbsp;type=&quot;video/webm&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.ogg&quot;&nbsp;type=&quot;video/ogg&quot;&gt;<br>&nbsp;&nbsp;&lt;track&nbsp;kind=&quot;subtitles&quot;&nbsp;src=&quot;video.vtt&quot;&nbsp;srclang=&quot;cn&quot;&nbsp;label=&quot;cn&quot;&gt;<br>&lt;/video&gt;<br><br><br><br>11、资源标签<br><br>图标签<br><br>canvas&nbsp;基于像素，性能要求比较高，可用于实时数据展示。svg&nbsp;为矢量图形图像。<br>热点区域标签<br><br>img中套用map以及area可以实现点击某部分图片触发一个链接，点击另一部分触发另一个链接<br>&lt;img&nbsp;src=&quot;mama.jpg&quot;&nbsp;width=100&nbsp;height=100&nbsp;usemap=&quot;#map&quot;&nbsp;/&gt;<br>&lt;map&nbsp;name=&quot;map&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;area&nbsp;shap=&quot;rect&quot;&nbsp;coords=&quot;0,0,50,50&quot;&nbsp;href=&quot;&quot;&nbsp;alt=&quot;&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;area&nbsp;shap=&quot;circle&quot;&nbsp;coords=&quot;75,75,25&quot;&nbsp;href=&quot;&quot;&nbsp;alt=&quot;&quot;&gt;<br>&lt;/map&gt;<br><br><br><br>12、表格<br><br>表格代码示例<br>&lt;table&gt;<br>&nbsp;&nbsp;&lt;caption&gt;table&nbsp;title&nbsp;and/or&nbsp;explanatory&nbsp;text&lt;/caption&gt;<br>&nbsp;&nbsp;&lt;thead&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;header&lt;/th&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&lt;/thead&gt;<br>&nbsp;&nbsp;&lt;tbody&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;data&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&lt;/tbody&gt;<br>&lt;/table&gt;<br>使用&nbsp;colspan=val&nbsp;进行跨列，使用&nbsp;rowspan=val&nbsp;进行跨行。<br><br><br><br>13、表单<br><br>&lt;form&nbsp;action=&quot;WebCreation_submit&quot;&nbsp;method=&quot;get&quot;&nbsp;accept-charset=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&lt;fieldset&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;legend&gt;title&nbsp;or&nbsp;explanatory&nbsp;caption&lt;/legend&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;第一种添加标签的方法&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;&lt;input&nbsp;type=&quot;text/submit/hidden/button/etc&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;第二种添加标签的方法&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for=&quot;input-id&quot;&gt;Sample&nbsp;Label&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;id=&quot;input-id&quot;&gt;<br>&nbsp;&nbsp;&lt;/fieldset&gt;<br>&nbsp;&nbsp;&lt;fieldset&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;legend&gt;title&nbsp;or&nbsp;explanatory&nbsp;caption&lt;/legend&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;只读文本框&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;readonly&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;隐藏文本框，可提交影藏数据&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;hidden-info&quot;&nbsp;value=&quot;hiden-info-value&quot;&nbsp;hidden&gt;<br>&nbsp;&nbsp;&lt;/fieldset&gt;<br>&nbsp;&nbsp;&lt;button&nbsp;type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>&nbsp;&nbsp;&lt;button&nbsp;type=&quot;reset&quot;&gt;Reset&lt;/button&gt;<br>&lt;/form&gt;<br>使用fieldset可用于对表单进行分区<br>表单中的其他控件类型：<br>textarea&nbsp;（文本框）<br>select&nbsp;与&nbsp;option&nbsp;（下拉菜单可多选）<br><br><br><br><br>14、语义化<br><br>语义化（Semantic&nbsp;Tag）是指用合适的标签标识适当的内容，它可以起到搜索引擎优化（Search&nbsp;Engine&nbsp;Optimization），提高可访问性（例如盲人使用的屏幕阅读器），与此同时还可以提高代码的可读性。简而言之也就是在正确的地方使用正确的标签<br><br>","addLink":"","date":"2016-01-06 20:07","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1}],"css":[{"addArticleTtitle":"CSS语法","classify":"css","addarticleContent":"1、语法<br><br>/*&nbsp;选择器&nbsp;*/<br>.m-userlist&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;属性声明&nbsp;*/<br>&nbsp;&nbsp;margin:&nbsp;0&nbsp;0&nbsp;30px;<br>&nbsp;&nbsp;/*&nbsp;属性名:属性值;&nbsp;*/<br>}<br>.m-userlist&nbsp;.list&nbsp;{<br>&nbsp;&nbsp;position:&nbsp;relative;<br>&nbsp;&nbsp;height:&nbsp;100px;<br>&nbsp;&nbsp;overflow:&nbsp;hidden;<br>}<br><br><br>2、浏览器私有属性<br><br>Google&nbsp;Chrome,&nbsp;Safari&nbsp;(-webkit)<br>Firefox&nbsp;(-moz-)<br>IE&nbsp;(-ms-)<br>Opera&nbsp;(-o-)<br>.pic&nbsp;{<br>&nbsp;&nbsp;-webkit-transform:&nbsp;rotate(-3deg);<br>&nbsp;&nbsp;-ms-transform:&nbsp;rotate(-3deg);<br>&nbsp;&nbsp;transform:&nbsp;rotate(-3deg);<br>}<br><br>NOTE:&nbsp;使用&nbsp;http://pleeease.io/play/&nbsp;，CSS&nbsp;预处理器（Sass，Less，Stylus）或编辑器插件可自动添加浏览器厂商的私有属性前缀。<br><br><br>3、属性值语法<br><br>margin:&nbsp;[&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;auto&nbsp;]{1,4}<br>/*&nbsp;基本元素：&lt;length&gt;,&nbsp;&lt;percentage&gt;,&nbsp;auto*/<br>/*&nbsp;组合符号：[],&nbsp;|&nbsp;*/<br>/*&nbsp;数量符号：{1,4}&nbsp;*/<br><br>基本元素<br><br>关键字<br><br>auto<br>solid<br>bold<br>...<br>类型<br><br>基本类型<br>&lt;length&gt;<br>&lt;percentage&gt;<br>&lt;color&gt;<br>...<br><br>其他类型<br>&lt;padding-width&gt;<br>&lt;color-stop&gt;<br><br>符号<br>/<br>,<br>inherit,&nbsp;initial<br><br>组合符号<br><br>&lt;font-size&gt;&nbsp;&lt;font-family&gt;&nbsp;（&nbsp;&nbsp;两项必存，顺序毕遵）<br>合法：12px&nbsp;arial<br>不合法：2em<br>不合法：arial&nbsp;14px<br>&lt;length&gt;&&&lt;color&gt;&nbsp;(&&&nbsp;两项必存，顺序无碍)<br>合法：green&nbsp;2px<br>合法：1em&nbsp;orange<br>不合法：blue<br>underline&nbsp;||&nbsp;overline&nbsp;||&nbsp;line-through&nbsp;||&nbsp;blink&nbsp;(||&nbsp;至少选一，顺序无碍)<br>合法：underline<br>合法：overline&nbsp;underline<br>&lt;color&gt;&nbsp;|&nbsp;transparent（|&nbsp;只可选一，不可共存）<br>合法：orange<br>合法：transparent<br>不合法：orange&nbsp;transparent<br>bold&nbsp;[thin&nbsp;||&nbsp;&lt;length&gt;]（[]&nbsp;分组之用，视为整体）<br>合法：bold&nbsp;thin<br>合法：bold&nbsp;2em<br><br>数量符号<br><br>&lt;length&gt;（无则表示仅可出现一次）<br>合法：1px<br>合法：10em<br>不合法：1px&nbsp;2px<br>&lt;color-stop&gt;[,&nbsp;&lt;color-stop&gt;]+&nbsp;(+&nbsp;可出现一次或多次)<br>合法：#fff,&nbsp;red<br>合法：blue,&nbsp;green&nbsp;50%,&nbsp;gray<br>不合法：red<br>inset?&&&lt;color&gt;&nbsp;(?&nbsp;表示可选)<br>合法：inset&nbsp;orange<br>合法：red<br>&lt;length&gt;{2,4}&nbsp;({2,4}&nbsp;可出现次数和最少最多出现次数)<br>合法：1px&nbsp;2px<br>合法：1px&nbsp;2px&nbsp;3px<br>不合法:&nbsp;1px<br>不合法：1px&nbsp;2px&nbsp;3px&nbsp;4px&nbsp;5px<br>&lt;time&gt;[,&nbsp;&lt;time&gt;]*（*&nbsp;出现&nbsp;0&nbsp;次或多次）<br>合法：1s<br>合法：1s,4ms<br>&lt;time&gt;#（#&nbsp;出现一次或者多次，用,分隔）<br>合法：2s,&nbsp;4s<br>不合法：1s&nbsp;2s<br><br><br><br>4、@规则语法<br><br>@import&nbsp;&quot;subs.css&quot;;<br>@charset&nbsp;&quot;utf-8&quot;;<br>@media&nbsp;print&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;property:&nbsp;value&nbsp;*/<br>}<br>@keyframes&nbsp;fadein&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;property:&nbsp;value&nbsp;*/<br>}<br>@标示符&nbsp;内容;<br>@标示符&nbsp;内容{}<br>@规则<br><br>常用的规则<br>@media&nbsp;（用于响应式布局）<br>@keyframes&nbsp;（CSS&nbsp;动画的中间步骤）<br>@font-face&nbsp;（引入外部字体）<br><br>其他规则（不常用）<br>@import<br>@charset<br>@namespace<br>@page<br>@supports<br>@document","addLink":"","date":"2016-01-06 21:03","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"CSS选择器","classify":"css","addarticleContent":"选择器可被看做表达式，通过它可以选择相应的元素并应用不同的样式。<br>简单选择器<br>元素选择器<br>组合选择器<br>简单选择器<br><br>简单选择器可组合使用。<br><br><br>1、标签选择器<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;p&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>2、类选择器<br><br>.className&nbsp;以&nbsp;.&nbsp;开头，名称可包含字母，数字，-，_，但必须以字母开头。它区分大小写并可出现多次。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&nbsp;class=&quot;special&nbsp;bold&quot;&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;p&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;.special&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;orange;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;.bold&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;font-weight:&nbsp;bold;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>3、id&nbsp;选择器<br><br>#idName&nbsp;以&nbsp;#&nbsp;开头且只可出现一次，其命名要求于&nbsp;.className&nbsp;相同。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&nbsp;id=&quot;special&quot;&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;#special&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;red;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>4、通配符选择器<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;*&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>5、属性选择器<br><br>[attr]&nbsp;或&nbsp;[attr=val]&nbsp;来选择相应的元素。#nav{...}&nbsp;既等同于&nbsp;[id=nav]{...}。IE7+<br>[attr~=val]&nbsp;可选用与选择包含&nbsp;val&nbsp;属性值的元素，像class=&quot;title&nbsp;sports&quot;&nbsp;与&nbsp;class=&quot;sports&quot;。.sports{...}&nbsp;既等同于&nbsp;[class~=sports]{...}&nbsp;IE7+<br>[attr|=val]&nbsp;可以选择val开头及开头紧接-的属性值。IE7+<br>[attr^=val]&nbsp;可选择以val开头的属性值对应的元素，如果值为符号或空格则需要使用引号&nbsp;&quot;&quot;。IE7+<br>[attr$=val]&nbsp;可选择以val结尾的属性值对应的元素。IE7+<br>[attr*=val]&nbsp;可选择以包含val属性值对应的元素。IE7+<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;form&nbsp;action=&quot;&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;value=&quot;Xinyang&quot;&nbsp;disabled&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;password&quot;&nbsp;placeholder=&quot;Password&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;button&quot;&nbsp;value=&quot;Button&quot;&gt;<br>&nbsp;&nbsp;&lt;/form&gt;<br>&lt;/div&gt;<br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;[disabled]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color:&nbsp;orange;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;[type=button]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>6、伪类选择器<br><br>常用伪类选择器：<br>:link&nbsp;IE6+<br>:visited&nbsp;IE7+<br>:hover&nbsp;IE6中仅可用于链接<br>:active&nbsp;IE6/7中仅可用于链接<br>:enabled&nbsp;IE9+<br>:disabled&nbsp;IE9+<br>:checked&nbsp;IE9+<br>:first-child&nbsp;IE8+<br>:last-child&nbsp;IE9+<br>:nth-child(even)&nbsp;可为&nbsp;odd&nbsp;even&nbsp;或数字&nbsp;IE9+<br>:nth-last-child(n)&nbsp;n从&nbsp;0&nbsp;开始计算&nbsp;IE9+<br>:only-child&nbsp;仅选择唯一的元素&nbsp;IE9+<br>:only-of-type&nbsp;IE9+<br>:first-of-type&nbsp;IE9+<br>:last-of-type&nbsp;IE9+<br>:nth-of-type(even)&nbsp;IE9+<br>:nth-last-of-type(2n)&nbsp;IE9+<br><br>不常用伪类选择器：<br>:empty&nbsp;选中页面中无子元素的标签&nbsp;IE9+<br>:root&nbsp;选择&nbsp;HTML&nbsp;根标签&nbsp;IE9+<br>:not()&nbsp;参数为一般选择器&nbsp;IE9+<br>:target&nbsp;被锚点选中的目标元素&nbsp;IE9+<br>:lang()&nbsp;选中语言值为某类特殊值的元素&nbsp;IE7+<br><br>NOTE：element:nth-of-type(n)&nbsp;指父元素下第&nbsp;n&nbsp;个&nbsp;element&nbsp;元素，element:nth-child(n)&nbsp;指父元素下第&nbsp;n&nbsp;个元素且元素为&nbsp;element，若不是，选择失败。具体细节请在使用时查找文档。<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;a&nbsp;href=&quot;http://sample-site.com&quot;&nbsp;title=&quot;Sample&nbsp;Site&quot;&gt;Sample&nbsp;Site&lt;/a&gt;<br>&lt;/div&gt;<br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;/*&nbsp;伪类属性定义有顺序要求！&nbsp;*/<br>&nbsp;&nbsp;a:link&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;gray;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:visited&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:red;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:hover&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;green;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;鼠标悬停&nbsp;*/<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:active&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;orange;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;鼠标点击&nbsp;*/<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>7、其他选择器<br><br>伪元素选择器<br><br>注意与伪类学则器的区分。<br>::first-letter&nbsp;IE6+<br>::first-line&nbsp;IE6+<br>::before{content:&nbsp;&quot;before&quot;}&nbsp;需与&nbsp;content&nbsp;一同使用&nbsp;IE8+<br>::after{content:&nbsp;&quot;after&quot;}&nbsp;需与&nbsp;content&nbsp;一同使用&nbsp;IE8+<br>::selection&nbsp;被用户选中的内容（鼠标选择高亮属性）IE9+&nbsp;Firefox需用&nbsp;-moz&nbsp;前缀<br><br>组合选择器<br><br>后代选择器&nbsp;.main&nbsp;h2&nbsp;{...}，使用&nbsp;表示&nbsp;IE6+<br>子选择器&nbsp;.main&gt;h2&nbsp;{...}，使用&gt;表示&nbsp;IE7+<br>兄弟选择器&nbsp;h2+p&nbsp;{...}，使用+表示&nbsp;IE7+<br>h2~p&nbsp;{...}，使用~表示（此标签无需紧邻）IE7+<br><br>选择器分组<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>/*&nbsp;下面两组样式声明效果一致&nbsp;*/<br>h1&nbsp;{color:&nbsp;red;}<br>h2&nbsp;{color:&nbsp;red;}<br>h3&nbsp;{color:&nbsp;red;}<br><br>h1,&nbsp;h2,&nbsp;h3&nbsp;{color:&nbsp;red;}<br>&lt;/style&gt;<br><br><br>8、继承、优先、层级<br><br>9、继承<br><br>子元素继承父元素的样式，但并不是所有属性都是默认继承的。通过文档中的&nbsp;inherited:&nbsp;yes&nbsp;来判断属性是否可以自动继承。<br><br><br>自动继承属性：<br>color<br>font<br>text-align<br>list-style<br>...<br>非继承属性：<br>background<br>border<br>position<br>...<br><br><br>10、优先<br><br>CSS&nbsp;Specificity&nbsp;Calculator&nbsp;可以在这里找到。更多关于&nbsp;CSS&nbsp;优先级别的信息可以在这里找到（英文）。<br>计算方法：<br>a&nbsp;=&nbsp;行内样式<br>b&nbsp;=&nbsp;id&nbsp;选择器的数量<br>c&nbsp;=&nbsp;类、伪类的属性选择器的数量<br>d&nbsp;=&nbsp;标签选择器和伪元素选择器的数量<br><br>NOTE：从上到下优先级一次降低，且优先级高的样式会将优先级低的样式覆盖。大致公式（并不准确）如下。<br>value&nbsp;=&nbsp;a&nbsp;*&nbsp;1000&nbsp;+&nbsp;b&nbsp;*&nbsp;100&nbsp;+&nbsp;c&nbsp;*&nbsp;10&nbsp;+&nbsp;d<br><br>改变优先级<br><br>改变样式声明先后顺序<br>提升选择器优先级<br>!important（慎用）<br><br><br>11、层叠<br><br>层叠为相同属性根据优先级覆盖，如优先级相同则后面会覆盖前面的属性，而不同属性则会合并<br><br>","addLink":"","date":"2016-01-06 21:22","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"CSS样式---文本相关","classify":"css","addarticleContent":"1、字体<br><br>改变字号<br><br>font-size:&nbsp;&lt;absolute-size&gt;&nbsp;|&nbsp;&lt;relative-size&gt;&nbsp;|&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;inherit<br>&lt;absolute-size&gt;&nbsp;有&nbsp;small&nbsp;large&nbsp;medium<br>&lt;relative-size&gt;&nbsp;有&nbsp;smaller&nbsp;larger<br>div<br>&nbsp;&nbsp;font-size&nbsp;12px<br>&nbsp;&nbsp;p#sample0<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;16px<br>&nbsp;&nbsp;p#sample1<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;2em<br>&nbsp;&nbsp;p#sample2<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;200%<br><br>NOTE：以上两值在开发中并不常用。2em&nbsp;与&nbsp;200%&nbsp;都为父元素默认大小的两倍（参照物为父元素的字体大小&nbsp;12px）。<br><br>改变字体<br><br>font-family:&nbsp;[&nbsp;&lt;family-name&gt;&nbsp;|&nbsp;&lt;generic-family&gt;&nbsp;]#<br>&lt;generic-family&gt;&nbsp;可选选项，但具体使用字体由浏览器决定<br>serif<br>sans-serif<br>cursive<br>fantasy<br>monospace<br>font-family:&nbsp;arial,&nbsp;Verdana,&nbsp;sans-serif;<br><br>NOTE：优先使用靠前的字体<br><br>加粗字体<br><br>font-weight:&nbsp;normal&nbsp;|&nbsp;bold&nbsp;|&nbsp;bolder&nbsp;|&nbsp;lighter&nbsp;|&nbsp;100&nbsp;|&nbsp;200&nbsp;|&nbsp;300&nbsp;|&nbsp;400&nbsp;|&nbsp;500&nbsp;|&nbsp;600&nbsp;|&nbsp;700&nbsp;|&nbsp;800&nbsp;|&nbsp;900<br>font-weight:&nbsp;normal;<br>font-weight:&nbsp;bold;<br><br>倾斜字体<br><br>font-style:&nbsp;normal&nbsp;|&nbsp;italic&nbsp;|&nbsp;oblique&nbsp;|&nbsp;inherit<br>italic&nbsp;使用字体中的斜体，而&nbsp;oblique&nbsp;在没有斜体字体时强制倾斜字体。<br><br>更改行距<br><br>line-height:&nbsp;normal&nbsp;|&nbsp;&lt;number&gt;&nbsp;|&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;<br>normal&nbsp;值为浏览器决定，在1.1至1.2之间（通常设置值为1.14左右）<br>/*&nbsp;length&nbsp;类型&nbsp;*/<br>line-height:&nbsp;40px;<br>line-height:&nbsp;3em;<br>/*&nbsp;percentage&nbsp;类型&nbsp;*/<br>line-height:&nbsp;300%;<br>/*&nbsp;number&nbsp;类型&nbsp;*/<br>line-height:&nbsp;3;<br><br>NOTE：当line-height为&nbsp;number&nbsp;类型时，子类直接继承其数值（不计算直接继承）。&nbsp;而当为&nbsp;percentage&nbsp;类型时，子类则会先计算再显示（先计算后继承）。<br><br>字间距（字母间距）<br><br>letter-spacing:&nbsp;normal&nbsp;|&nbsp;&lt;length&gt;<br>其用于设置字间距或者字母间距，此属性适用于中文或西文中的字母。&nbsp;如果需要设置西文中词与词的间距或标签直接的距离则需要使用&nbsp;word-spacing。<br>word-spacing:&nbsp;normal&nbsp;|&nbsp;&lt;length&gt;<br>font&nbsp;shorthand<br><br>font:&nbsp;[&nbsp;[&nbsp;&lt;‘font-style’&gt;&nbsp;||&nbsp;&lt;font-variant-css21&gt;&nbsp;||&nbsp;&lt;‘font-weight’&gt;&nbsp;||&nbsp;&lt;‘font-stretch’&gt;&nbsp;]?&nbsp;&lt;‘font-size’&gt;&nbsp;[&nbsp;/&nbsp;&lt;‘line-height’&gt;&nbsp;]?&nbsp;&lt;‘font-family’&gt;&nbsp;]&nbsp;|&nbsp;caption&nbsp;|&nbsp;icon&nbsp;|&nbsp;menu&nbsp;|&nbsp;message-box&nbsp;|&nbsp;small-caption&nbsp;|&nbsp;status-bar<br>font:&nbsp;30px/2&nbsp;&quot;Consolas&quot;,&nbsp;monospace;<br>font:&nbsp;italic&nbsp;bold&nbsp;20px/1.5&nbsp;arial,&nbsp;serif;<br>font:&nbsp;20px&nbsp;arial,&nbsp;serif;<br><br>NOTE：当其他值为空时，均被设置为默认值。<br><br>改变文字颜色<br><br>color:&nbsp;&lt;color&gt;<br>element&nbsp;{&nbsp;color:&nbsp;red;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;#f00;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;#ff0000;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgb(255,0,0);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgb(100%,&nbsp;0%,&nbsp;0%);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;hsl(0,&nbsp;100%,&nbsp;50%);&nbsp;}<br><br>/*&nbsp;50%&nbsp;translucent&nbsp;*/<br>element&nbsp;{&nbsp;color:&nbsp;rgba(255,&nbsp;0,&nbsp;0,&nbsp;0.5);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;hsla(0,&nbsp;100%,&nbsp;50%,&nbsp;0.5);&nbsp;}<br><br>/*&nbsp;全透明&nbsp;*/<br>element&nbsp;{&nbsp;color:&nbsp;transparent&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgba(0,&nbsp;0,&nbsp;0,&nbsp;0);&nbsp;}<br><br><br><br>2、对齐方式<br><br>文字居中<br><br>text-align:&nbsp;start&nbsp;|&nbsp;end&nbsp;|&nbsp;left&nbsp;|&nbsp;right&nbsp;|&nbsp;center&nbsp;|&nbsp;justify&nbsp;|&nbsp;match-parent&nbsp;|&nbsp;start&nbsp;end<br><br>NOTE：默认为文本左对齐。<br><br>文本垂直对齐<br><br>vertical-align:&nbsp;baseline&nbsp;|&nbsp;sub&nbsp;|&nbsp;super&nbsp;|&nbsp;text-top&nbsp;|&nbsp;text-bottom&nbsp;|&nbsp;middle&nbsp;|&nbsp;top&nbsp;|&nbsp;bottom&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;&lt;length&gt;<br>NOTE：&lt;percentage&gt;的参照物为line-height<br><br>文本缩进<br><br>text-indent:&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;&&&nbsp;[&nbsp;hanging&nbsp;||&nbsp;each-line&nbsp;]<br>NOTE：缩进两个字可使用&nbsp;text-indent:&nbsp;2em;<br><br><br><br>3、格式处理<br><br>保留空格格式<br><br>white-space:&nbsp;normal&nbsp;|&nbsp;pre&nbsp;|&nbsp;nowrap&nbsp;|&nbsp;pre-wrap&nbsp;|&nbsp;pre-line<br>pre&nbsp;行为同&nbsp;&lt;pre&gt;&nbsp;一致。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;New&nbsp;lines&nbsp;&nbsp;Spaces&nbsp;and&nbsp;tabs&nbsp;&nbsp;Text&nbsp;wrapping<br>normal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>nowrap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No&nbsp;wrap<br>pre&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No&nbsp;wrap<br>pre-wrap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>pre-line&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>文字换行<br><br>word-wrap:&nbsp;normal&nbsp;|&nbsp;break-word<br><br>NOTE：允许长单词自动换行。<br><br>word-break:&nbsp;normal&nbsp;|&nbsp;break-all&nbsp;|&nbsp;keep-all<br><br>NOTE：break-all&nbsp;单词中的任意字母间都可以换行。<br><br><br><br>4、文本装饰<br><br>文字阴影<br><br>text-shadow:none&nbsp;|&nbsp;&lt;shadow-t&gt;#&nbsp;或&nbsp;text-shadow:none&nbsp;|&nbsp;[&lt;length&gt;{2,3}&&&lt;color&gt;?]#<br>p&nbsp;{<br>&nbsp;&nbsp;text-shadow:&nbsp;1px&nbsp;1px&nbsp;1px&nbsp;#000,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3px&nbsp;3px&nbsp;5px&nbsp;blue;<br>}<br>value&nbsp;=&nbsp;The&nbsp;X-coordinate&nbsp;X&nbsp;轴偏移像素<br>value&nbsp;=&nbsp;The&nbsp;Y-coordinate&nbsp;Y&nbsp;轴偏移像素<br>value&nbsp;=&nbsp;The&nbsp;blur&nbsp;radius&nbsp;阴影模糊半径<br>value&nbsp;=&nbsp;The&nbsp;color&nbsp;of&nbsp;the&nbsp;shadow&nbsp;阴影颜色（默认为文字颜色）<br><br>文本装饰（下划线等）<br><br>text-decoration:&nbsp;&lt;text-decoration-line&gt;&nbsp;||&nbsp;&lt;text-decoration-style&gt;&nbsp;||&nbsp;&lt;text-decoration-color&gt;<br>h1.under&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;underline;<br>}<br>h1.over&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;overline;<br>}<br>p.line&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;line-through;<br>}<br>p.blink&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;blink;<br>}<br>a.none&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;none;<br>}<br>p.underover&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;underline&nbsp;overline;<br>}<br><br><br><br>5、高级设置<br><br>省略字符<br><br>text-overflow:&nbsp;[&nbsp;clip&nbsp;|&nbsp;ellipsis&nbsp;|&nbsp;&lt;string&gt;&nbsp;]{1,2}<br>/*&nbsp;常用配合&nbsp;*/<br>text-overflow:&nbsp;ellipsis;<br>overflow:&nbsp;hidden;&nbsp;/*&nbsp;溢出截取&nbsp;*/<br>white-space:&nbsp;nowrap;&nbsp;/*&nbsp;禁止换行&nbsp;*/<br><br>更换鼠标形状<br><br>cursor:&nbsp;[[&lt;funciri&gt;,]*&nbsp;[&nbsp;auto&nbsp;|&nbsp;crosshair&nbsp;|&nbsp;default&nbsp;|&nbsp;pointer&nbsp;|&nbsp;move&nbsp;|&nbsp;e-resize&nbsp;|&nbsp;ne-resize&nbsp;|&nbsp;nw-resize&nbsp;|&nbsp;n-resize&nbsp;|&nbsp;se-resize&nbsp;|&nbsp;sw-resize&nbsp;|&nbsp;s-resize&nbsp;|&nbsp;w-resize|&nbsp;text&nbsp;|&nbsp;wait&nbsp;|&nbsp;help&nbsp;]]&nbsp;|&nbsp;inherit<br><br>常用属性<br><br>cursor:&nbsp;[&lt;uri&gt;,]*[auto&nbsp;|&nbsp;default&nbsp;|&nbsp;none&nbsp;|&nbsp;help&nbsp;|&nbsp;pointer&nbsp;|&nbsp;zoom-in&nbsp;|&nbsp;zoom-out&nbsp;|&nbsp;move]<br>&lt;uri&gt;&nbsp;图片资源地址代替鼠标默认形状<br>&lt;default&gt;&nbsp;默认光标<br>&lt;none&gt;&nbsp;隐藏光标<br>&lt;pointer&gt;&nbsp;手型光标<br>&lt;zoom-in&gt;<br>&lt;zoom-out&gt;<br>&lt;move&gt;<br>cursor:&nbsp;pointer;<br>cursor:&nbsp;url(image-name.cur),&nbsp;pointer;<br>/*&nbsp;当&nbsp;uri&nbsp;失效时或者则会起作用&nbsp;*/<br><br>强制继承<br><br>inherit&nbsp;会强制继承父元素的属性值。<br>font-size:&nbsp;inherit;<br>font-family:&nbsp;inherit;<br>font-weight:&nbsp;inherit;<br>...<br>word-wrap:&nbsp;inherit;<br>work-break:&nbsp;inherit<br>text-showdow:&nbsp;inherit<br><br>NOTE：具体在使用时可查询文档","addLink":"","date":"2016-01-07 10:30","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2}],"javascript":[{"addArticleTtitle":"JavaScript 介绍","classify":"javascript","addarticleContent":"前端开发三要素，HTML（描述网页内容），CSS（描述样式），JavaScript（控制网页行为）。JavaScript&nbsp;为解释型编程语（程序不需要编译，程序在运行时才翻译成机器语言，每执&nbsp;行一次都要翻译一次)，运行环境也很广泛（浏览器或操作系统中&nbsp;NodeJS）。<br>JavaScript&nbsp;又分为两部分，ECMAScript&nbsp;和&nbsp;DOM。其中&nbsp;JavaScript&nbsp;的基本的语言属性（例如，变量，作用域等）都在&nbsp;ECMAScript&nbsp;中有详细的定义好比汉子在字典中的定义。DOM&nbsp;中则定义如何修改文档结构（HTML&nbsp;或&nbsp;XML&nbsp;等）。<br>JavaScript的引入方法如下：<br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;title&gt;Demo&nbsp;Page&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;以上代码忽略&nbsp;--&gt;<br><br>&nbsp;&nbsp;&lt;!--&nbsp;为性能优化需将&nbsp;javascript&nbsp;代码放置在&nbsp;body&nbsp;标签的最末端&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;外联文件&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;src=&quot;/javascripts/application.js&quot;&nbsp;type=&quot;text/javascript&quot;&nbsp;charset=&quot;utf-8&quot;&nbsp;async&nbsp;defer&gt;&lt;/script&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;内嵌代码&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;document.write(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"","date":"2016-01-06 22:54","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"基础语法","classify":"javascript","addarticleContent":"1、变量标示符<br><br>变量的命名<br><br>var&nbsp;_name&nbsp;=&nbsp;null;<br>var&nbsp;$name&nbsp;=&nbsp;null;<br>var&nbsp;name0&nbsp;=&nbsp;null;<br><br><br><br>2、关键字与保留字<br><br>JavaScript&nbsp;在语言定义中保留的字段，这些字段在语言使用中存在特殊意义或功能，在程序编写的过程中不可以当做变量或函数名称使用。无需记忆，报错修改即可。<br>关键字与保留字可以在&nbsp;Mozilla&nbsp;开发者站点找到。<br><br><br><br>3、字符敏感<br><br>字符串的大小写是有所区分的，不同字符指代不同的变量。<br><br><br><br>4、严格模式<br><br>增益<br><br>消除语法中不合理与不安全的问题，保证代码正常运行<br>提高编译效率，增加运行速度<br><br>使用方法<br><br>&lt;!--&nbsp;全局使用&nbsp;严格&nbsp;模式&nbsp;--&gt;<br>&quot;use&nbsp;strict&quot;;<br>(function(){<br>&nbsp;&nbsp;console.log(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>})()<br><br>&lt;!--&nbsp;或者在函数内部声明使用&nbsp;严格&nbsp;模式&nbsp;--&gt;<br>(function(){<br>&nbsp;&nbsp;&quot;use&nbsp;strict&quot;;<br>&nbsp;&nbsp;console.log(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>})()<br><br>严格模式与标准模式的区别：<br><br>严格模式下隐式声明或定义变量被静止<br>严格模式下对象重名的属性在严格模式下被静止<br>严格模式下&nbsp;arguments.callee()&nbsp;被禁用<br>严格模式下&nbsp;with()&nbsp;语句<br>更多限制<br><br><br><br>5、注释<br><br>/*<br>&nbsp;&nbsp;多行注释，不可嵌套<br>&nbsp;*/<br><br>//&nbsp;单行注释","addLink":"","date":"2016-01-07 11:23","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"类型","classify":"javascript","addarticleContent":"1、javascript&nbsp;类型系统可以分为标准类型和对象类型，进一步标准类型又可以分为原始类型和引用类型，而对象类型又可以分为内置对象类型、普通对象类型、自定义对象类型。<br><br><br><br>2、标准类型<br><br>标准类型共包括了6个分别是：<br>原始类型（值类型）：<br>Undefined&nbsp;undefined<br>Null&nbsp;null<br>Boolean&nbsp;true<br>String&nbsp;&quot;hello&quot;<br>Number&nbsp;123<br><br><br><br>3、引用类型（对象类型）：<br><br>Object<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>&lt;!--&nbsp;原始类型变量的包装类型如下&nbsp;--&gt;<br>var&nbsp;bool&nbsp;=&nbsp;new&nbsp;Boolean(true);<br>var&nbsp;str&nbsp;=&nbsp;new&nbsp;String(&quot;hello&quot;);<br>var&nbsp;num&nbsp;=&nbsp;new&nbsp;Number(1);<br>var&nbsp;obj0&nbsp;=&nbsp;new&nbsp;Object();<br><br><br><br>4、原始类型和引用类型的区别：<br><br>原始类型储存在栈（Stack）中储存变量的值，而引用类型在栈中保存的是所引用内容储存在堆（Heap）中的值。类似于指针的概念，引用类型并非储存变量真实数值而是地址，所以对已引用类型的复制其实只是复制了相同的地址而非实际的变量值。<br><br>Undefined&nbsp;值：undefined&nbsp;出现场景：<br><br>以声明为赋值的变量&nbsp;var&nbsp;obj;<br>获取对象不存在的属性&nbsp;var&nbsp;obj&nbsp;=&nbsp;{x:&nbsp;0};&nbsp;obj.y;<br>无返回值函数的执行结果&nbsp;function&nbsp;f(){};&nbsp;var&nbsp;obj&nbsp;=&nbsp;f();<br>函数参数没有传入&nbsp;function&nbsp;f(i){console.log(i)};&nbsp;f();<br>void(expression)<br><br>Null&nbsp;值：null&nbsp;出现场景：<br><br>获取不存在的对象&nbsp;document.getElementById(&quot;not-exist-element&quot;)<br><br>Boolean&nbsp;值：true,&nbsp;false&nbsp;出现场景：<br><br>条件语句导致的系统执行的隐式类型转换&nbsp;if(隐式转换){}<br>字面量或变量定义&nbsp;var&nbsp;bool&nbsp;=&nbsp;true;<br><br>String&nbsp;值：字符串&nbsp;出现场景：<br><br>var&nbsp;str&nbsp;=&nbsp;&quot;Hello,&nbsp;world!&quot;;<br><br>Number&nbsp;值：整型直接量，八进制直接量（0-），十六进制直接量（0x-)，浮点型直接量&nbsp;出现场景：<br><br>1026<br>3.14<br>1.2e5<br>0x10<br><br>Object&nbsp;值：属性集合&nbsp;出现场景：<br><br>var&nbsp;obj&nbsp;=&nbsp;{name:&nbsp;&quot;Xinyang&quot;};<br><br><br><br>5、变量转换表<br><br>Value&nbsp;&nbsp;Boolean&nbsp;&nbsp;Number&nbsp;&nbsp;String<br>undefined&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;undefined&quot;<br>null&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;null&quot;<br>true&nbsp;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;1&nbsp;&nbsp;&quot;true&quot;<br>false&nbsp;&nbsp;f&nbsp;alse&nbsp;&nbsp;0&nbsp;&nbsp;&quot;false&quot;<br>&quot;&quot;&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;&quot;<br>&quot;123&quot;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;123&nbsp;&nbsp;&quot;123&quot;<br>&quot;1a&quot;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;1a&quot;<br>0&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;0&quot;<br>1&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;1&nbsp;&nbsp;&quot;1&quot;<br>Infinity&nbsp;&nbsp;true&nbsp;&nbsp;Infinity&nbsp;&nbsp;&quot;Infinity&quot;<br>NaN&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;NaN&quot;<br>{}&nbsp;&nbsp;true&nbsp;&nbsp;NaN&nbsp;&nbsp;&nbsp;&nbsp;&quot;[object&nbsp;Object]&quot;<br><br><br><br>6、类型识别<br><br>typeof<br>Object.prototype.toString<br>constructor<br>instanceof<br><br>typeof：<br>可以是标准类型（Null&nbsp;除外）<br>不可识别具体的对象类型（Function&nbsp;除外）<br>Object.prototype.toString：<br>可是识别标准类型及内置对象类型（例如，Object,&nbsp;Date,&nbsp;Array）<br>不能识别自定义对象类型<br><br>constructor：<br>可以识别标准类型（Undefined/Null&nbsp;除外）<br>可识别内置对象类型<br>可识别自定义对象类型<br>function&nbsp;getConstructiorName(obj)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;obj&nbsp;&&&nbsp;obj.constructor&nbsp;&&&nbsp;obj.constructor.toString().match(/function&#92;s*([^(]*)/)[1];<br>}<br>getConstructiorName([])&nbsp;===&nbsp;&quot;Array&quot;;&nbsp;//&nbsp;true<br><br>instanceof：<br>不可判别原始类型<br>可判别内置对象类型<br>可判别自定义对象类型<br>","addLink":"","date":"2016-01-07 11:34","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"类型识别","classify":"javascript","addarticleContent":"1、类型识别<br><br>typeof<br>Object.prototype.toString<br>constructor<br>instanceof<br><br>2、typeof：<br>可以是标准类型（Null&nbsp;除外）<br>不可识别具体的对象类型（Function&nbsp;除外）<br>Object.prototype.toString：<br>可是识别标准类型及内置对象类型（例如，Object,&nbsp;Date,&nbsp;Array）<br>不能识别自定义对象类型<br><br>3、constructor：<br>可以识别标准类型（Undefined/Null&nbsp;除外）<br>可识别内置对象类型<br>可识别自定义对象类型<br><br>4、function&nbsp;getConstructiorName(obj)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;obj&nbsp;&&&nbsp;obj.constructor&nbsp;&&&nbsp;obj.constructor.toString().match(/function&#92;s*([^(]*)/)[1];<br>}<br>getConstructiorName([])&nbsp;===&nbsp;&quot;Array&quot;;&nbsp;//&nbsp;true<br><br>5、instanceof：<br>不可判别原始类型<br>可判别内置对象类型<br>可判别自定义对象类型<br>JavaScript的数据类型可以分为：标准类型和对象类型。<br>标准类型有：undefined&nbsp;Null&nbsp;Boolean&nbsp;Date&nbsp;Number&nbsp;Object<br>对象类型（构造器类型）：Boolean&nbsp;Date&nbsp;Number&nbsp;Object&nbsp;Array&nbsp;Date&nbsp;Error&nbsp;Function&nbsp;RegExp<br><br>6、用来判断数据类型的一般有四种方式，分别是：<br>typeof<br>Prototype.toString()<br>constructor<br>instanceof<br><br>7、下面我们写一个HTML来检验一下：<br><br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;JavaScript类型判断&lt;/title&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.red{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color:red;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Standard&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;a;&nbsp;&nbsp;&nbsp;&nbsp;//undefined<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;b&nbsp;=&nbsp;document.getElementById(&quot;no_exist_element&quot;);&nbsp;//null<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;c&nbsp;=&nbsp;true;&nbsp;&nbsp;&nbsp;&nbsp;//Boolean<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;d&nbsp;=&nbsp;1;&nbsp;&nbsp;&nbsp;&nbsp;//Number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;&quot;str&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//String<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;f&nbsp;=&nbsp;{name&nbsp;:&nbsp;&quot;Tom&quot;};&nbsp;&nbsp;&nbsp;&nbsp;//Object<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Object&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;g&nbsp;=&nbsp;new&nbsp;Boolean(true);&nbsp;&nbsp;&nbsp;&nbsp;//Boolean&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;h&nbsp;=&nbsp;new&nbsp;Number(1);&nbsp;&nbsp;&nbsp;&nbsp;//Number&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;i&nbsp;=&nbsp;new&nbsp;String(&quot;str&quot;);&nbsp;&nbsp;&nbsp;&nbsp;//String&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;j&nbsp;=&nbsp;new&nbsp;Object({name&nbsp;:&nbsp;&quot;Tom&quot;});&nbsp;//Object&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;k&nbsp;=&nbsp;new&nbsp;Array([1,&nbsp;2,&nbsp;3,&nbsp;4]);&nbsp;&nbsp;&nbsp;&nbsp;//Array&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;l&nbsp;=&nbsp;new&nbsp;Date();&nbsp;&nbsp;&nbsp;&nbsp;//Date&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;m&nbsp;=&nbsp;new&nbsp;Error();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;n&nbsp;=&nbsp;new&nbsp;Function();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;o&nbsp;=&nbsp;new&nbsp;RegExp(&quot;&#92;&#92;d&quot;);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Self-Defined&nbsp;Object&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Use&nbsp;the&nbsp;Prototype.toString()&nbsp;to&nbsp;judge&nbsp;the&nbsp;type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;type(obj){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Object.prototype.toString.call(obj).slice(8,&nbsp;-1).toLowerCase();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&nbsp;border=&quot;1&quot;&nbsp;cellspacing=&quot;0&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;typeof&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;toString&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;constructor&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;instanceof&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;undefined&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;a)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(a))&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(a.constructor)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(a&nbsp;instanceof&nbsp;&quot;undefined&quot;)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Null&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;b);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(b));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(b.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(b&nbsp;instanceof&nbsp;&quot;null&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Boolean&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;c);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(c));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(c.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(c&nbsp;instanceof&nbsp;&quot;boolean&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Number&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;d);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(d));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(d.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(d&nbsp;instanceof&nbsp;&quot;number&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;String&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;e);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(e));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(e.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(e&nbsp;instanceof&nbsp;&quot;string&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;f);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(f));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(f.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(f&nbsp;instanceof&nbsp;&quot;object&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&lt;td&nbsp;colspan=&quot;5&quot;&gt;-----------------------&lt;/td&gt;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Boolean&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;g);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(g));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(g.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(g&nbsp;instanceof&nbsp;Boolean);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Number&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;h);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(h));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(h.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(h&nbsp;instanceof&nbsp;Number);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;String&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;i);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(i));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(i.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(i&nbsp;instanceof&nbsp;String);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Object&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;j);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(j));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(j.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(j&nbsp;instanceof&nbsp;Object);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Array&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;k);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(k));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(k.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(k&nbsp;instanceof&nbsp;Array);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Date&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;l);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(l));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(l.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(l&nbsp;instanceof&nbsp;Date);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Error&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;m);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(m));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(m.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(m&nbsp;instanceof&nbsp;Error);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Function&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;n);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(n));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(n.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(n&nbsp;instanceof&nbsp;Function);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;RegExp&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;o);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(o));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(o.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(o&nbsp;instanceof&nbsp;RegExp);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&lt;td&nbsp;colspan=&quot;5&quot;&gt;-----------------------&lt;/td&gt;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Point&nbsp;Objct&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;p);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(p));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(p.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(p&nbsp;instanceof&nbsp;Point);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>","addLink":"","date":"2016-01-07 12:32","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"内置对象","classify":"javascript","addarticleContent":"通常情况下只有对象才存在方法，但&nbsp;JavaScript&nbsp;不同它具有12种内置对象。内置对象又分为两类，普通对象（属性和方法）与构造器对象（可用于实例化普通对象，它还包含原型对象属性和方法，及实例对象属性和方法）。<br><br>1、JavaScript&nbsp;对象原型链的简要说明<br><br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>p.move(2,2);<br><br>__proto__&nbsp;称之为原型链，有如下特点：<br>__proto__&nbsp;为对象内部的隐藏属性<br>__proto__&nbsp;为实例化该对象的构造器的&nbsp;prototype&nbsp;对象的引用，因此可以直接方法&nbsp;prototype&nbsp;的所有属性和方法<br>除了&nbsp;Object&nbsp;每个对象都有一个&nbsp;__proto__&nbsp;属性且逐级增长形成一个链，原型链顶端是一个&nbsp;Object&nbsp;对象。<br>在调用属性或方法时，引擎会查找自身的属性如果没有则会继续沿着原型链逐级向上查找，直到找到该方法并调用。<br>__proto__&nbsp;跟浏览器引擎实现相关，不同的引擎中名字和实现不尽相同(chrome、firefox中名称是&nbsp;__proto__&nbsp;，并且可以被访问到，IE中无法访问)。基于代码兼容性、可读性等方面的考虑，不建议开发者显式访问&nbsp;__proto__&nbsp;属性或通过&nbsp;__proto__更改原型链上的属性和方法，可以通过更改构造器prototype&nbsp;对象来更改对象的&nbsp;__proto__&nbsp;属性。<br><br><br><br>2、构造器对象与普通对象的区别<br><br>1、构造器对象原型链中的&nbsp;__proto__&nbsp;是一个&nbsp;Function.prototype&nbsp;对象的引用，因此可以调用&nbsp;Function.prototype的属性及方法<br>2、构造器对象本身有一个&nbsp;prototype&nbsp;属性，用该构造器实例化对象时该&nbsp;prototype&nbsp;会被实例对象的&nbsp;__proto__&nbsp;所引用<br>3、构造器对象本身是一个&nbsp;function&nbsp;对象，因此也会有自身属性<br><br><br><br>3、标准内置对象<br><br>构造器对象<br>Object<br>Boolean<br>String<br>Number<br>Function<br>Array<br>RegExp<br>Date<br>Error<br><br>其他对象<br><br>Math<br>JSON<br><br>全局对象<br><br>内置对象，其实也叫内置构造器，它们可以通过&nbsp;new&nbsp;的方式创建一个新的实例对象。内置对象所属的类型就叫内置对象类型。其声明方式如下：<br>var&nbsp;i&nbsp;=&nbsp;new&nbsp;String(&quot;str&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;String&nbsp;Object<br>var&nbsp;h&nbsp;=&nbsp;new&nbsp;Number(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Number&nbsp;Object<br>var&nbsp;g&nbsp;=&nbsp;new&nbsp;Boolean(true);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Boolean&nbsp;Object<br>var&nbsp;j&nbsp;=&nbsp;new&nbsp;Object({name&nbsp;:&nbsp;&quot;Tom&quot;});&nbsp;//&nbsp;Object&nbsp;Object<br>var&nbsp;k&nbsp;=&nbsp;new&nbsp;Array([1,&nbsp;2,&nbsp;3,&nbsp;4]);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Array&nbsp;Object<br>var&nbsp;l&nbsp;=&nbsp;new&nbsp;Date();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Date&nbsp;Object<br>var&nbsp;m&nbsp;=&nbsp;new&nbsp;Error();<br>var&nbsp;n&nbsp;=&nbsp;new&nbsp;Function();<br>var&nbsp;o&nbsp;=&nbsp;new&nbsp;RegExp(&quot;&#92;&#92;d&quot;);<br><br>注意：虽然标准类型中有Boolean&nbsp;String&nbsp;Number&nbsp;Object，内置对象类型中也有Boolean&nbsp;String&nbsp;Number&nbsp;Object，但它们其实是通过不同的声明方式来进行区别的。标准类型通过直接赋值，而对象类型则是通过构造器实现初始化。<br><br><br><br>4、Object<br><br>构造器的原型对象在对象实例化时将会被添加到实例对象的原型链当中。&nbsp;__proto__&nbsp;为原型链属性，编码时不可被显像调用。但是实例化对象可以调用原型链上的方法。<br>用&nbsp;String/Number&nbsp;等构造器创建的对象原型链顶端对象始终是一个Object对象，因此这些对象可以调用Object的原型对象属性和方法。所以&nbsp;String/Number&nbsp;等构造器是&nbsp;Object&nbsp;的子类。<br>更多关于&nbsp;Object&nbsp;的内容可以在这里找到。<br><br>构造器说明：<br>Object&nbsp;是属性和方法的集合<br>String/Number/Boolean/Array/Date/Error&nbsp;构造器均为&nbsp;Object&nbsp;的子类并集成&nbsp;Object&nbsp;原型对象的属性及方法。<br>实例化方法<br>var&nbsp;obj0&nbsp;=&nbsp;new&nbsp;Object({name:&nbsp;&quot;X&quot;,&nbsp;age:&nbsp;13});<br>//&nbsp;常用方法<br>var&nbsp;obj1&nbsp;=&nbsp;{name:&nbsp;&quot;Q&quot;,&nbsp;age:&nbsp;14};<br>属性及方法<br>prototype<br>create<br>keys<br>...<br>**原型对象属性及其方法<br>constructor<br>toString<br>valueOf<br>hasOwnProperty<br>...<br>实例对象属性及方法<br>无<br><br>Object.create<br><br>功能：基于原型对象创造新对象<br>//&nbsp;Object.create(prototype[,&nbsp;propertiesObject])<br>var&nbsp;prototype&nbsp;=&nbsp;{name:&nbsp;&quot;X&quot;,&nbsp;age:&nbsp;13};<br>var&nbsp;obj&nbsp;=&nbsp;Object.create(proto);<br>Object.prototype.toString<br><br>功能：获取方法调用者的标准类型<br>//&nbsp;objectInstance.toString()<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>obj.toString();&nbsp;//&nbsp;Object<br>Object.prototype.hasOwnProperty<br><br>功能：判断一个属性是否是一个对象的自身属性<br>//&nbsp;objectInstance.hasOwnProperty(&quot;propertyName&quot;)<br>var&nbsp;obj&nbsp;=&nbsp;Object.create({a:&nbsp;1,&nbsp;b:&nbsp;2});<br>obj.c&nbsp;=&nbsp;3;<br>obj.hasOwnProperty(&quot;a&quot;);&nbsp;//&nbsp;false<br>obj.hasOwnProperty(&quot;c&quot;);&nbsp;//&nbsp;true<br>Boolean<br><br>构造器说明：值为&nbsp;true&nbsp;与&nbsp;false<br>属性及方法<br>prototype<br>**原型对象属性及其方法<br>constructor,&nbsp;toString,&nbsp;valueOf<br>String<br><br>构造器说明：单双引号内的字符串<br>实例化方法<br>&quot;Hello,&nbsp;world!&quot;<br>var&nbsp;str0&nbsp;=&nbsp;&quot;Xinyang&quot;;<br>var&nbsp;str1&nbsp;=&nbsp;new&nbsp;String(&quot;Xinyang&quot;);<br>属性及方法<br>prototype<br>fromCharCode（转换&nbsp;ASCII&nbsp;代码为字符）<br>原型对象属性及其方法<br>constructor<br>indexOf<br>replace<br>slice<br>split<br>charCodeAt<br>toLowerCase<br>...<br>String.prototype.indexOf<br><br>功能：获取子字符串在字符串中的索引<br>//&nbsp;stringObject.indexOf(searchValue,&nbsp;fromIndex)<br>var&nbsp;str&nbsp;=&nbsp;&quot;I&nbsp;am&nbsp;X.&nbsp;From&nbsp;China!&quot;;<br>var&nbsp;index&nbsp;=&nbsp;str.indexOf(&quot;a&quot;);&nbsp;//&nbsp;2<br>str.indexOf(&quot;a&quot;,&nbsp;index&nbsp;+&nbsp;1);&nbsp;//&nbsp;16<br>str.indexOf(&quot;Stupid&quot;);&nbsp;//&nbsp;-1&nbsp;字符串不存在<br>String.prototype.replace<br><br>功能：查找字符串替换成目标文字<br>//&nbsp;stringObject.replace(regexp/substr,&nbsp;replacement)<br>var&nbsp;str&nbsp;=&nbsp;&quot;apple&nbsp;is&nbsp;bad&quot;;<br>str&nbsp;=&nbsp;str.replace(&quot;bad&quot;,&nbsp;&quot;awesome&quot;);<br>String.prototype.split<br><br>功能：按分隔符将分隔符分成字符串数组<br>//&nbsp;stringObject.split(separator,&nbsp;arrayLength)<br>var&nbsp;str&nbsp;=&nbsp;&quot;1&nbsp;2&nbsp;3&nbsp;4&quot;;<br>str.split(&quot;&nbsp;&quot;);&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;];<br>str.split(&quot;&nbsp;&quot;,&nbsp;3);&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;];<br>str.split(/&#92;d+/);&nbsp;//&nbsp;[&quot;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&quot;]<br>Number<br><br>构造器说明：整型直接量，八进制直接量（0-），十六进制直接量（0x-)，浮点型直接量<br>实例化方法<br>10<br>1.2e5<br>var&nbsp;count&nbsp;=&nbsp;0x10;<br>var&nbsp;pi&nbsp;=&nbsp;new&nbsp;Number(3.1415);<br>属性及方法<br>prototype<br>MAX_VALUE<br>MIN_VALUE<br>NaN<br>NEGATIVE_INFINITY<br>POSITIVE_INFINITY<br>原型对象属性及其方法<br>constructor<br>toFixed<br>toExponential<br>...<br>Number.prototype.toFixed<br><br>功能：四舍五入至指定小数位<br>//&nbsp;numberObject.toFixed(num)<br>var&nbsp;num0&nbsp;=&nbsp;3.14;<br>num0.toFixed(1);&nbsp;//&nbsp;3.1<br>var&nbsp;num1&nbsp;=&nbsp;3.35;<br>num1.toFixed(1);&nbsp;//&nbsp;3.4<br>Array<br><br>构造器说明：定义数组对象<br>实例化方法<br>var&nbsp;a0&nbsp;=&nbsp;[1,&nbsp;&quot;abc&quot;,&nbsp;true,&nbsp;function(){}];<br>var&nbsp;a1&nbsp;=&nbsp;new&nbsp;Array();<br>var&nbsp;a2&nbsp;=&nbsp;new&nbsp;Array(1,&nbsp;&quot;abc&quot;,&nbsp;true);<br>属性及方法<br>prototype<br>isArray<br>原型对象属性及其方法<br>constructor<br>splice<br>forEach<br>find<br>concat<br>pop<br>push<br>reverse<br>shift<br>slice<br>...<br>Array.prototype.splice<br><br>功能：从数组中删除或添加元素，返回被删除的元素列表（作用域原有数组）<br>//&nbsp;arrayObject.splice(start,&nbsp;deleteCount[,&nbsp;item1[,&nbsp;item2[,&nbsp;...]]])<br>var&nbsp;arr&nbsp;=&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;a&quot;,&nbsp;&quot;b&quot;,&nbsp;&quot;6&quot;];<br>var&nbsp;ret&nbsp;=&nbsp;arr.splice(2,&nbsp;2,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;,&nbsp;&quot;5&quot;);&nbsp;//&nbsp;[&quot;a&quot;,&nbsp;&quot;b&quot;]<br>arr;&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;,&nbsp;5&quot;,&nbsp;&quot;6&quot;]<br>Array.prototype.forEach<br><br>功能：遍历元素组并调用回调函数<br>//&nbsp;arrayObject.forEach(callback[,&nbsp;thisArg])<br>//&nbsp;回调函数<br>//&nbsp;function&nbsp;callback(value,&nbsp;index,&nbsp;arrayObject)&nbsp;{...}<br>//&nbsp;value&nbsp;-&nbsp;当前值&nbsp;index&nbsp;-&nbsp;当前索引&nbsp;arrayObject&nbsp;-&nbsp;数组本身<br>function&nbsp;logArray(value,&nbsp;index,&nbsp;arrayObject)&nbsp;{<br>&nbsp;&nbsp;console.log(value);<br>&nbsp;&nbsp;console.log(value&nbsp;===&nbsp;array[index]);<br>}<br>[2,&nbsp;5,&nbsp;6,&nbsp;9].forEach(logArray);<br>Function<br><br>构造器说明：定义函数或新增对象构造器<br>实例化方法<br>//&nbsp;对象实例化<br>var&nbsp;f0&nbsp;=&nbsp;new&nbsp;Function(&quot;i&quot;,&nbsp;&quot;j&quot;,&nbsp;&quot;return&nbsp;(i&nbsp;+&nbsp;j)&quot;);<br>//&nbsp;函数关键字语句<br>function&nbsp;f1(i,&nbsp;j){return&nbsp;i&nbsp;+&nbsp;j;}<br>//&nbsp;函数表达式<br>var&nbsp;f3&nbsp;=&nbsp;function(i,&nbsp;j){return&nbsp;i&nbsp;+&nbsp;j;};<br>属性及方法<br>prototype<br>原型对象属性及其方法<br>constructor<br>apply<br>call<br>bind<br>实例对象属性和方法<br>length<br>prototype<br>arguments<br>caller<br>自定义对象构造器<br><br>下面的代码声明一个&nbsp;Point&nbsp;增加了一个move方法，最后创建了一个&nbsp;Point&nbsp;的实例对象。<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;2);<br>Function.prototype.apply<br><br>功能：通过参数指定调用者和函数参数并执行该函数<br>//&nbsp;functionObj.apply(thisArg[,&nbsp;argsArray])<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;1,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br>p.move.apply(circle,&nbsp;[2,&nbsp;1]);&nbsp;//&nbsp;{x:&nbsp;3,&nbsp;y:&nbsp;2,&nbsp;r:&nbsp;1}<br>Function.prototype.bind<br><br>功能：通过参数指定函数调用者和函数参数并返回该函数的引用<br>//&nbsp;functionObj.bind(thisArg[,&nbsp;arg1[,&nbsp;arg2[,&nbsp;...]]])<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;1,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br>var&nbsp;circleMoveRef&nbsp;=&nbsp;p.move.bind(circle,&nbsp;2,&nbsp;1);<br>setTimeout(circleMoveRef,&nbsp;1000);&nbsp;//&nbsp;{x:&nbsp;3,&nbsp;y:&nbsp;2,&nbsp;r:&nbsp;1}<br><br>//&nbsp;之间使用&nbsp;circleMoveRef()&nbsp;效果等同于&nbsp;apply()<br>circleMoveRef();<br>子类构造器<br><br>function&nbsp;Circle(x,&nbsp;y,&nbsp;r)&nbsp;{<br>&nbsp;&nbsp;Point.apply(this,&nbsp;[x,&nbsp;y]);<br>&nbsp;&nbsp;this.radius&nbsp;=&nbsp;r;<br>}<br>Circle.prototype&nbsp;=&nbsp;Object.create(Point.prototype);<br>Circle.prototype.constructor&nbsp;=&nbsp;Circle;<br>Circle.prototype.area&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;return&nbsp;Math.PI&nbsp;*&nbsp;this.radius&nbsp;*&nbsp;this.radius;<br>}<br><br>var&nbsp;c&nbsp;=&nbsp;new&nbsp;Circle(1,&nbsp;2,&nbsp;3);<br>c.move(2,&nbsp;2);<br>c.area();<br>函数调用<br><br>()<br>apply<br>call<br>函数参数<br><br>形参个数不一定等于实参个数<br>值专递<br>通过参数类型检查实现函数重载<br>arguments<br><br>arguments&nbsp;的常用属性<br>length&nbsp;实参个数<br>0...arguments.length-1&nbsp;实参属性名称（key）<br>callee&nbsp;函数本身<br>function&nbsp;max(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(max.length&nbsp;===&nbsp;arguments.length)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a&gt;b?a:b;<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;_max&nbsp;=&nbsp;arguments[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;arguments.length;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(_max&nbsp;&lt;&nbsp;arguments[i])&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_max&nbsp;=&nbsp;arguments[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_max;<br>&nbsp;&nbsp;}<br>}<br>值专递<br><br>函数参数的值专递是参数复制都是栈内存中的复制。<br><br>//&nbsp;原始类型<br>function&nbsp;plusplus(num)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;num++;<br>}<br>var&nbsp;count&nbsp;=&nbsp;0;<br>var&nbsp;result&nbsp;=&nbsp;plusplus(count);&nbsp;//&nbsp;result&nbsp;=&nbsp;1;&nbsp;count&nbsp;=&nbsp;0;<br><br>//&nbsp;引用类型<br>function&nbsp;setName(obj)&nbsp;{<br>&nbsp;&nbsp;obj.name&nbsp;=&nbsp;&quot;obama&quot;;<br>}<br>var&nbsp;president&nbsp;=&nbsp;{name:&nbsp;&quot;bush&quot;};<br>setName(president);&nbsp;//&nbsp;{name:&nbsp;&quot;obama&quot;};<br>函数重载<br><br>以&nbsp;Require.JS&nbsp;中的&nbsp;define()&nbsp;为例：<br>define(function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>define([&quot;lib&quot;],&nbsp;function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>define(&quot;math&quot;,&nbsp;[&quot;lib&quot;],&nbsp;function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>//&nbsp;define&nbsp;的实现代码<br>/**<br>&nbsp;*&nbsp;The&nbsp;function&nbsp;that&nbsp;handles&nbsp;definitions&nbsp;of&nbsp;modules.&nbsp;Differs&nbsp;from<br>&nbsp;*&nbsp;require()&nbsp;in&nbsp;that&nbsp;a&nbsp;string&nbsp;for&nbsp;the&nbsp;module&nbsp;should&nbsp;be&nbsp;the&nbsp;first&nbsp;argument,<br>&nbsp;*&nbsp;and&nbsp;the&nbsp;function&nbsp;to&nbsp;execute&nbsp;after&nbsp;dependencies&nbsp;are&nbsp;loaded&nbsp;should<br>&nbsp;*&nbsp;return&nbsp;a&nbsp;value&nbsp;to&nbsp;define&nbsp;the&nbsp;module&nbsp;corresponding&nbsp;to&nbsp;the&nbsp;first&nbsp;argument&quot;s<br>&nbsp;*&nbsp;name.<br>&nbsp;*/<br>define&nbsp;=&nbsp;function&nbsp;(name,&nbsp;deps,&nbsp;callback)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;node,&nbsp;context;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//Allow&nbsp;for&nbsp;anonymous&nbsp;modules<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(typeof&nbsp;name&nbsp;!==&nbsp;&quot;string&quot;)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Adjust&nbsp;args&nbsp;appropriately<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback&nbsp;=&nbsp;deps;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deps&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//This&nbsp;module&nbsp;may&nbsp;not&nbsp;have&nbsp;dependencies<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!isArray(deps))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback&nbsp;=&nbsp;deps;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deps&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;省略以下代码<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...<br>};<br>RegExp<br><br>构造器说明：用于定义正则表达式，一个&nbsp;RegExp&nbsp;对象包含一个正则表达式和关联的标志<br>定义方法<br><br>/pattern/flags<br>new&nbsp;RegExp(pattern[,&nbsp;flags]);<br>属性及方法<br>prototype<br>原型对象属性及其方法<br>constructor<br>test<br>exec<br>...<br>RegExp.prototype.test<br><br>功能：使用正则表达式对字符串进行测试，并返回测试结果<br>//&nbsp;regexObj.text(str)<br>var&nbsp;reg&nbsp;=&nbsp;/^abc/i;<br>reg.test(&quot;Abc123&quot;);&nbsp;//&nbsp;true<br>reg.test(&quot;1Abc1234&quot;);&nbsp;//&nbsp;false<br>Date<br><br>构造器说明：用于定义日期对象<br>定义方法<br><br>var&nbsp;date0&nbsp;=&nbsp;new&nbsp;Date();<br>var&nbsp;date1&nbsp;=&nbsp;new&nbsp;Date(2014,&nbsp;3,&nbsp;1,&nbsp;7,&nbsp;1,&nbsp;1,&nbsp;100);<br>属性及方法<br>prototype<br>parse<br>now<br>...<br>原型对象属性及其方法<br>constructor<br>Date<br>getDate<br>getHours<br>setDate<br>setHours<br>...<br>标准内置对象<br><br>Math<br><br>对象说明：拥有属性和方法的单一对象主要用于数字计算<br>对象属性：<br>E<br>PI<br>SQRT2<br>...<br>对象方法：<br>floor<br>random<br>abs<br>max<br>cos<br>ceil<br>Math.floor<br><br>功能：向下取整<br>//&nbsp;Math.floor(num)<br>Math.floor(0.97);&nbsp;//&nbsp;0<br>Math.floor(5.1);&nbsp;//&nbsp;5<br>Math.floor(-5.1);&nbsp;//6<br>相似方法：ceil，round<br>Math.random<br><br>功能：返回&nbsp;0~1&nbsp;之间的浮点数<br>//&nbsp;Math.random()<br>Math.random();&nbsp;//&nbsp;0.14523562323461<br>JSON<br><br>对象说明：用于存储和交换文本信息<br>对象方法：<br>parse<br>stringify<br>JSON.stringify<br><br>功能：将&nbsp;JSON&nbsp;对象转换为字符转<br>//&nbsp;JSON.stringify(value[,&nbsp;replacer[,&nbsp;space]])<br>var&nbsp;json&nbsp;=&nbsp;{&quot;name&quot;:&nbsp;&quot;X&quot;};<br>JSON.stringify(json);&nbsp;//&nbsp;&quot;{&quot;name&quot;:&quot;X&quot;}&quot;<br>JSON.parse<br><br>功能：将&nbsp;JSON&nbsp;字符转转换为对象<br>//&nbsp;JSON.parse(text[,&nbsp;reviver])<br>var&nbsp;jsonStr&nbsp;=&nbsp;&quot;{&quot;name&quot;:&quot;X&quot;}&quot;;<br>JSON.parse(jsonStr);&nbsp;//&nbsp;{name:&nbsp;&quot;X&quot;}<br>全局对象<br><br>全局对象定义了一系列的属性和方法在编程过程中可以被之间调用。<br>属性：NaN，Infinity，undefined<br>方法：<br><br>parseInt<br>parseFloat<br>isNaN<br>isFinite<br>eval<br>处理&nbsp;URI&nbsp;方法：<br>encodedURIComponent<br>decodeURIComponent<br>encodedURI<br>decodeURI<br>构造器属性：<br>Boolean<br>String<br>Number<br>Object<br>Function<br>Array<br>Date<br>Error<br>...<br>对象属性：<br>Math<br>JSON<br>NaA<br><br>非数字值：表示错误或无意义的运算结果，NaN&nbsp;参与运算仍会返回&nbsp;NaA，且&nbsp;NaN&nbsp;不等于任何值，包括它本身。可以使用&nbsp;isNaN()&nbsp;判断运算结果的类型是否为&nbsp;NaN。<br>isNaN(NaN);&nbsp;//&nbsp;true<br>isNaN(4&nbsp;-&nbsp;&quot;2a&quot;);&nbsp;//&nbsp;true;<br>parseInt<br><br>功能：转换字符串成数字<br>//&nbsp;parseInt(string[,&nbsp;radix])<br>//&nbsp;radix&nbsp;-&nbsp;为进制数<br>parseInt(&quot;010&quot;);&nbsp;//&nbsp;10<br>parseInt(&quot;010&quot;,&nbsp;8)&nbsp;//&nbsp;8<br>parseInt(&quot;010&quot;,&nbsp;16)&nbsp;//&nbsp;16<br><br>parseInt(&quot;0x1f&quot;);&nbsp;//&nbsp;31<br>parseInt(&quot;0x1f&quot;,&nbsp;16);&nbsp;//&nbsp;31<br>parseInt(&quot;1f&quot;);&nbsp;//&nbsp;1<br>parseInt(&quot;1f&quot;,&nbsp;16);&nbsp;//&nbsp;31<br>eval<br><br>功能：计算字符串并执行其中的&nbsp;JavaScript&nbsp;代码（会带来安全性和代码逻辑问题，通常不建议使用）<br>//&nbsp;eval(string)<br>var&nbsp;res&nbsp;=&nbsp;&quot;{&quot;error&quot;:&nbsp;&quot;0&quot;,&nbsp;&quot;msg&quot;:&nbsp;&quot;OK&quot;};<br>var&nbsp;obj;<br>if&nbsp;(!JSON)&nbsp;{<br>&nbsp;&nbsp;obj&nbsp;=&nbsp;eval(&quot;(&quot;&nbsp;+&nbsp;res&nbsp;+&nbsp;&quot;)&quot;);<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;obj&nbsp;=&nbsp;JSON.parse(res);<br>}<br>encodedURIComponent<br><br>功能：将&nbsp;URI&nbsp;参数中的特殊字符，中文等作为&nbsp;URI&nbsp;的一部分进行编码<br>var&nbsp;uri&nbsp;=&nbsp;&quot;http://w3schools.com/my&nbsp;test.asp?name=ståle&car=saab&quot;;<br>var&nbsp;res&nbsp;=&nbsp;encodeURIComponent(uri);<br><br>//&nbsp;结果<br>//&nbsp;http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst%C3%A5le%26car%3Dsaab","addLink":"","date":"2016-01-07 14:58","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4},{"addArticleTtitle":"变量作用域","classify":"javascript","addarticleContent":"变量的作用域值的是变量的生命周期和作用范围（全局与局部作用域的区别）。<br>作用域介绍<br><br>静态作用域<br><br>静态作用域有称为词法作用域，即指其在编译的阶段就可以决定变量的引用。静态作用域只更变量定义的位置有关与代码执行的顺序无关。<br>var&nbsp;x&nbsp;=&nbsp;0;<br>function&nbsp;foo()&nbsp;{<br>&nbsp;&nbsp;alert(x);<br>}<br><br>function&nbsp;bar()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;20;<br>&nbsp;&nbsp;foo();<br>}<br><br>foo();<br><br><br>动态作用域<br><br>动态作用域的变量引用只可在程序运行时刻决定（其通常通过动态栈来进行管理）。<br>var&nbsp;x&nbsp;=&nbsp;0;<br>function&nbsp;foo()&nbsp;{<br>&nbsp;&nbsp;alert(x);<br>}<br><br>function&nbsp;bar()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;20;<br>&nbsp;&nbsp;foo();<br>}<br><br>foo();<br><br><br>JavaScript&nbsp;变量作用域<br><br>JavaScript&nbsp;（1）使用静态作用域，（2）其没有块级作用域（只有函数作用域，就是只有&nbsp;function&nbsp;用于可以定义作用域），（3）在&nbsp;ES5&nbsp;之作使用词法环境来管理作用域。<br>词法环境<br><br>组成<br><br>词法环境用来描述静态作用域的数据结构。它由环节记录和外部词法环境的引用组成。+<br><br>环境记录（record）（指形参，变量，函数等）<br>外部词法环境的引用（outer）<br>创建<br><br>在一段代码执行之前，先初始化词法环境。会被初始化的有：<br>形参<br>函数定义（创建函数对象，会保存当前作用域。见下图）<br>变量定义（所有初始化值均为&nbsp;undefined）<br><br>结构<br><br>var&nbsp;x&nbsp;=&nbsp;10;<br>function&nbsp;foo(y)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;z&nbsp;=&nbsp;30;<br>&nbsp;&nbsp;function&nbsp;bar(q)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y&nbsp;+&nbsp;z&nbsp;+&nbsp;q;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return&nbsp;bar;<br>}<br>var&nbsp;bar&nbsp;=&nbsp;foo(20);<br>bar(40);<br>全局词法作用域（初始化状态）<br><br>关于词法环境的问题<br><br>命名冲突<br><br>形参，函数定义，变量名称命名冲突。其中的优先级的排序如下：<br>函数定义&nbsp;&gt;&nbsp;形参&nbsp;&gt;&nbsp;变量<br>arguments&nbsp;的使用<br>为函数中定义好的变量。<br>函数表达式与函数定义的区别<br>函数表达式是在执行时才创建函数对象。<br>函数定义为在代码执行之前就进行创建的。<br>with&nbsp;语句<br><br>with&nbsp;会创造一个临时作用域。<br>var&nbsp;foo&nbsp;=&nbsp;&quot;abc&quot;;<br>with({<br>&nbsp;&nbsp;foo:&nbsp;&quot;bar&quot;;<br>})&nbsp;{<br>&nbsp;&nbsp;function&nbsp;f()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(foo);<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;(function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(foo);<br>&nbsp;&nbsp;})();<br>&nbsp;&nbsp;f();<br>}<br>try-catch&nbsp;句法<br><br>try&nbsp;{<br>&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;10;<br>&nbsp;&nbsp;throw&nbsp;new&nbsp;Error();<br>}&nbsp;catch&nbsp;(e)&nbsp;{<br>&nbsp;&nbsp;function&nbsp;f()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(e);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;(function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(e);<br>&nbsp;&nbsp;})();<br>&nbsp;&nbsp;f();<br>}<br>带名称的函数表达式<br><br>当一个函数表达式有了名称之后，JavaScript&nbsp;会创建一个新的词法环境。并在这个词法环境中用有一个属性&nbsp;A&nbsp;指向这个函数，同时这个属性&nbsp;A&nbsp;指向的函数是不可被修改的。<br>下面例子为不常规的写法<br>(function&nbsp;A(){<br>&nbsp;&nbsp;A&nbsp;=&nbsp;1;<br>&nbsp;&nbsp;alert(A);<br>})();","addLink":"","date":"2016-01-07 15:01","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":5},{"addArticleTtitle":"表达式与运算符","classify":"javascript","addarticleContent":"表达式<br><br>表达式为&nbsp;JavaScript&nbsp;的短语可执行并生成值。<br>1.7&nbsp;//&nbsp;字面量<br>&quot;1.7&quot;<br>var&nbsp;a&nbsp;=&nbsp;1;<br>var&nbsp;b&nbsp;=&nbsp;&quot;2&quot;;<br>var&nbsp;c&nbsp;=&nbsp;(1.7&nbsp;+&nbsp;a)&nbsp;*&nbsp;&quot;3&quot;&nbsp;-&nbsp;b<br>运算符<br><br>算数运算符&nbsp;（+&nbsp;-&nbsp;*&nbsp;/&nbsp;%）<br>关系运算符&nbsp;（&gt;&nbsp;&lt;&nbsp;==&nbsp;!=&nbsp;&gt;=&nbsp;&lt;=&nbsp;===&nbsp;!==)<br>逻辑运算符&nbsp;（!&nbsp;&&&nbsp;||）<br>位运算符&nbsp;（&&nbsp;|&nbsp;^&nbsp;~&nbsp;&lt;&lt;&nbsp;&gt;&gt;）<br>负值运算符&nbsp;（=）<br>条件运算符&nbsp;（?:）<br>逗号运算符&nbsp;（,）<br>对象运算符&nbsp;（new&nbsp;delete&nbsp;.&nbsp;[]&nbsp;instanceof）<br>===&nbsp;全等符号<br><br>全等运算符用于盘对左右两边的对象或值是否类型相同且值相等。<br>伪代码拆解<br>function&nbsp;totalEqual(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;类型相同)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;是引用类型)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;是同一引用)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;值类型<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;值相等)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;}<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;&quot;123&quot;;<br>var&nbsp;b&nbsp;=&nbsp;&quot;123&quot;;<br>var&nbsp;c&nbsp;=&nbsp;&quot;4&quot;;<br>var&nbsp;aObj&nbsp;=&nbsp;new&nbsp;String(&quot;123&quot;);<br>var&nbsp;bObj&nbsp;=&nbsp;new&nbsp;String(&quot;123&quot;);<br>var&nbsp;cObj&nbsp;=&nbsp;aObj;<br><br>a&nbsp;===&nbsp;aObj&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;false<br>aObj&nbsp;===&nbsp;bObj&nbsp;&nbsp;&nbsp;//&nbsp;false<br>aObj&nbsp;===&nbsp;cObj&nbsp;&nbsp;&nbsp;//&nbsp;true<br>a&nbsp;===&nbsp;b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;true<br>a&nbsp;===&nbsp;c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;false<br>==<br><br>==&nbsp;用于判断操作符两边的对象或值是否相等。<br>伪代码拆解<br>function&nbsp;equal(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;类型相同)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a&nbsp;===&nbsp;b;<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;类型不同<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Number(a)&nbsp;===&nbsp;Number(b);&nbsp;//&nbsp;优先转换数值类型<br>&nbsp;&nbsp;}<br>}<br>例子<br><br>&quot;99&quot;&nbsp;==&nbsp;99;&nbsp;//&nbsp;true<br>new&nbsp;String(&quot;99&quot;)&nbsp;==&nbsp;99;&nbsp;//&nbsp;true<br>true&nbsp;==&nbsp;1;&nbsp;//&nbsp;true<br>false&nbsp;==&nbsp;0;&nbsp;//&nbsp;true<br>&quot;&#92;n&#92;n&#92;n&quot;&nbsp;==&nbsp;//&nbsp;true<br>例外规则<br><br>null&nbsp;==&nbsp;undefined&nbsp;结果为真&nbsp;true<br>在有&nbsp;null/undefined&nbsp;参与的&nbsp;==&nbsp;运算是不进行隐式转换。<br>0&nbsp;==&nbsp;null;&nbsp;//&nbsp;false<br>null&nbsp;==&nbsp;false;&nbsp;//&nbsp;false<br>&quot;undefined&quot;&nbsp;==&nbsp;undefined;&nbsp;//&nbsp;false<br>!&nbsp;取反<br><br>!x&nbsp;用于表达&nbsp;x&nbsp;表达式的运行结果转换成布尔值（Boolean）之后取反的结果。!!x&nbsp;则表示取&nbsp;x&nbsp;表达式的运行结果的布尔值。<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>var&nbsp;a&nbsp;=&nbsp;!obj&nbsp;//&nbsp;false;<br>var&nbsp;a&nbsp;=&nbsp;!!obj&nbsp;//&nbsp;true;<br>&&&nbsp;逻辑与<br><br>x&nbsp;&&&nbsp;y&nbsp;如果&nbsp;x&nbsp;表达式的运行交过转换成&nbsp;Boolean&nbsp;值为&nbsp;false&nbsp;则不运行表达式&nbsp;y&nbsp;而直接返回&nbsp;x&nbsp;表达式的运行结果。相反，如果&nbsp;x&nbsp;表达式的运行交过转换成&nbsp;Boolean&nbsp;值为&nbsp;true&nbsp;则运行表达式&nbsp;y&nbsp;并返回&nbsp;y&nbsp;表达式的运行结果。<br>伪代码拆解<br>var&nbsp;ret&nbsp;=&nbsp;null;<br>if&nbsp;(!!(ret&nbsp;=&nbsp;x))&nbsp;{<br>&nbsp;&nbsp;return&nbsp;y;<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;return&nbsp;ret;<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;0&nbsp;&&&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;0<br>var&nbsp;b&nbsp;=&nbsp;1&nbsp;&&&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;2<br>||&nbsp;逻辑或<br><br>x&nbsp;||&nbsp;y&nbsp;如果&nbsp;x&nbsp;表达式的运行结果转换为&nbsp;Boolean&nbsp;值为&nbsp;true，则不运行&nbsp;表达式&nbsp;y&nbsp;而直接返回表达式&nbsp;x&nbsp;的运算结果。（与&nbsp;&&&nbsp;方式相反）<br>伪代码拆解<br>var&nbsp;ret&nbsp;=&nbsp;null;<br>if&nbsp;(!!(ret&nbsp;=&nbsp;x))&nbsp;{<br>&nbsp;&nbsp;return&nbsp;ret;<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;return&nbsp;y;<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;0&nbsp;||&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;2<br>var&nbsp;b&nbsp;=&nbsp;1&nbsp;||&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;1<br>元算符优先级（Operator&nbsp;Precedence）<br><br>+&nbsp;-&nbsp;*&nbsp;/&nbsp;高于&nbsp;&&<br>*&nbsp;/&nbsp;高于&nbsp;+&nbsp;-<br>&&&nbsp;高于&nbsp;?:<br>()&nbsp;内优先级高于之外<br>NOTE：和数学上的算术优先级类似，同级从左到右计算。如有疑问加上&nbsp;()&nbsp;既可解决优先级问题。<br>Precedence&nbsp;&nbsp;Operator&nbsp;type&nbsp;&nbsp;Associativity&nbsp;&nbsp;Individual&nbsp;operators<br>19&nbsp;&nbsp;Grouping&nbsp;&nbsp;n/a&nbsp;&nbsp;(&nbsp;…&nbsp;)<br>18&nbsp;&nbsp;Member&nbsp;Access&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;.&nbsp;…<br>Computed&nbsp;Member&nbsp;Access&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;[&nbsp;…&nbsp;]<br>new&nbsp;(with&nbsp;argument&nbsp;list)&nbsp;&nbsp;n/a&nbsp;&nbsp;new&nbsp;…&nbsp;(&nbsp;…&nbsp;)<br>17&nbsp;&nbsp;Function&nbsp;Call&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;(&nbsp;…&nbsp;)<br>new&nbsp;(without&nbsp;argument&nbsp;list)&nbsp;&nbsp;right-to-left&nbsp;&nbsp;new&nbsp;…<br>16&nbsp;&nbsp;Postfix&nbsp;Increment&nbsp;&nbsp;n/a&nbsp;&nbsp;…&nbsp;++<br>Postfix&nbsp;Decrement&nbsp;&nbsp;n/a&nbsp;&nbsp;…&nbsp;--<br>15&nbsp;&nbsp;Logical&nbsp;NOT&nbsp;&nbsp;right-to-left&nbsp;&nbsp;!&nbsp;…<br>Bitwise&nbsp;NOT&nbsp;&nbsp;right-to-left&nbsp;&nbsp;~&nbsp;…<br>Unary&nbsp;Plus&nbsp;&nbsp;right-to-left&nbsp;&nbsp;+&nbsp;…<br>Unary&nbsp;Negation&nbsp;&nbsp;right-to-left&nbsp;&nbsp;-&nbsp;…<br>Prefix&nbsp;Increment&nbsp;&nbsp;right-to-left&nbsp;&nbsp;++&nbsp;…<br>Prefix&nbsp;Decrement&nbsp;&nbsp;right-to-left&nbsp;&nbsp;--&nbsp;…<br>typeof&nbsp;&nbsp;right-to-left&nbsp;&nbsp;typeof&nbsp;…<br>void&nbsp;&nbsp;right-to-left&nbsp;&nbsp;void&nbsp;…<br>delete&nbsp;&nbsp;right-to-left&nbsp;&nbsp;delete&nbsp;…<br>14&nbsp;&nbsp;Multiplication&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;*&nbsp;…<br>Division&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;/&nbsp;…<br>Remainder&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;%&nbsp;…<br>13&nbsp;&nbsp;Addition&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;+&nbsp;…<br>Subtraction&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;-&nbsp;…<br>12&nbsp;&nbsp;Bitwise&nbsp;Left&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;&lt;&nbsp;…<br>Bitwise&nbsp;Right&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&gt;&nbsp;…<br>Bitwise&nbsp;Unsigned&nbsp;Right&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&gt;&gt;&nbsp;…<br>11&nbsp;&nbsp;Less&nbsp;Than&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;&nbsp;…<br>Less&nbsp;Than&nbsp;Or&nbsp;Equal&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;=&nbsp;…<br>Greater&nbsp;Than&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&nbsp;…<br>Greater&nbsp;Than&nbsp;Or&nbsp;Equal&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;=&nbsp;…<br>in&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;in&nbsp;…<br>instanceof&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;instanceof&nbsp;…<br>10&nbsp;&nbsp;Equality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;==&nbsp;…<br>Inequality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;!=&nbsp;…<br>Strict&nbsp;Equality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;===&nbsp;…<br>Strict&nbsp;Inequality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;!==&nbsp;…<br>9&nbsp;&nbsp;Bitwise&nbsp;AND&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&&nbsp;…<br>8&nbsp;&nbsp;Bitwise&nbsp;XOR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;^&nbsp;…<br>7&nbsp;&nbsp;Bitwise&nbsp;OR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;|&nbsp;…<br>6&nbsp;&nbsp;Logical&nbsp;AND&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&&&nbsp;…<br>5&nbsp;&nbsp;Logical&nbsp;OR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;||&nbsp;…<br>4&nbsp;&nbsp;Conditional&nbsp;&nbsp;right-to-left&nbsp;&nbsp;…&nbsp;?&nbsp;…&nbsp;:&nbsp;…<br>3&nbsp;&nbsp;Assignment&nbsp;&nbsp;right-to-left&nbsp;&nbsp;…&nbsp;=&nbsp;…<br>…&nbsp;+=&nbsp;…<br>…&nbsp;-=&nbsp;…<br>…&nbsp;*=&nbsp;…<br>…&nbsp;/=&nbsp;…<br>…&nbsp;%=&nbsp;…<br>…&nbsp;&lt;&lt;=&nbsp;…<br>…&nbsp;&gt;&gt;=&nbsp;…<br>…&nbsp;&gt;&gt;&gt;=&nbsp;…<br>…&nbsp;&=&nbsp;…<br>…&nbsp;^=&nbsp;…<br>…&nbsp;|=&nbsp;…<br>2&nbsp;&nbsp;yield&nbsp;&nbsp;right-to-left&nbsp;&nbsp;yield&nbsp;…<br>1&nbsp;&nbsp;Spread&nbsp;&nbsp;n/a&nbsp;&nbsp;...&nbsp;…<br>0&nbsp;&nbsp;Comma&nbsp;/&nbsp;Sequence&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;,&nbsp;…","addLink":"","date":"2016-01-07 15:04","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":6},{"addArticleTtitle":"语句","classify":"javascript","addarticleContent":"条件控制语句<br><br>其中expression可以使用整型，字符串，甚至表达式<br>if&nbsp;(expression0)&nbsp;{statement0}<br>else&nbsp;if&nbsp;(expression1)&nbsp;{statement1}<br>else&nbsp;{statement2}<br><br>//&nbsp;JavaScript&nbsp;中的&nbsp;case&nbsp;可以使用整型，字符串，甚至表达式<br>switch(persion.type)&nbsp;{<br>&nbsp;&nbsp;case&nbsp;&quot;teacher&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement1<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case&nbsp;&quot;student&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement2<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement3<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}<br>循环控制语句<br><br>while(expression)&nbsp;{statement}<br><br>//&nbsp;至少执行一次<br>do&nbsp;{statement}&nbsp;while(expression);<br><br>for&nbsp;(initialise;&nbsp;test_expresiion;&nbsp;increment)&nbsp;{statement}<br><br>//&nbsp;跳过下面代码并进入下一轮循环<br>continue;<br><br>//&nbsp;退出当前循环<br>break;<br>for-in<br><br>用于遍历对象的全部属性。<br>function&nbsp;Car(id,&nbsp;type,&nbsp;color)&nbsp;{<br>&nbsp;&nbsp;this.type&nbsp;=&nbsp;type;<br>&nbsp;&nbsp;this.color&nbsp;=&nbsp;color;<br>&nbsp;&nbsp;this.id&nbsp;=&nbsp;id;<br>}<br><br>var&nbsp;benz&nbsp;=&nbsp;new&nbsp;Car(&quot;benz&quot;,&nbsp;&quot;black&quot;,&nbsp;&quot;red&quot;);<br>Car.prototype.start&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.type&nbsp;+&nbsp;&quot;&nbsp;start&quot;);<br>}<br><br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>}<br><br>//&nbsp;输出结果<br>type:black<br>color:red<br>id:benz<br>start:function&nbsp;(){<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.type&nbsp;+&nbsp;&quot;&nbsp;start&quot;);<br>}<br><br>//&nbsp;-----------<br><br>//&nbsp;如不需原型对象上的属性可以使用&nbsp;hasOwnProperty<br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(benz.hasOwnProperty(key))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;输出结果<br>type:black<br>color:red<br>id:benz<br>如不需原型对象上的属性可以使用&nbsp;hasOwnProperty<br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(benz.hasOwnProperty(key))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>&nbsp;&nbsp;}<br>}<br>/*&nbsp;输出结果<br>type:black<br>color:red<br>id:benz&nbsp;*/<br>异常处理语句<br><br>try{<br>&nbsp;&nbsp;//&nbsp;statements<br>&nbsp;&nbsp;throw&nbsp;new&nbsp;Error();<br>catch(e){<br>&nbsp;&nbsp;//&nbsp;statements<br>}<br>finally{<br>&nbsp;&nbsp;//&nbsp;statements<br>}<br>with&nbsp;语句<br><br>with&nbsp;语句是&nbsp;JavaScript&nbsp;中特有的语句形式，它主要有两个作用：<br>其一，其用于缩短特定情况下必须书写的代码量。它可以暂时改变变量的作用域。<br>//&nbsp;使用&nbsp;with&nbsp;之前<br>(function(){<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;Math.cos(3&nbsp;*&nbsp;Math.PI)&nbsp;+&nbsp;Math.sin(Math.LN10);<br>&nbsp;&nbsp;var&nbsp;y&nbsp;=&nbsp;Math.tan(14&nbsp;*&nbsp;Math.E);<br>})();<br><br>//&nbsp;使用&nbsp;with<br>(function(){<br>&nbsp;&nbsp;with(Math)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;cos(3&nbsp;*&nbsp;PI)&nbsp;+&nbsp;sin(LN10);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;y&nbsp;=&nbsp;tan(14&nbsp;*&nbsp;E);<br>&nbsp;&nbsp;}<br>})();<br><br><br>其二，改变变量的作用域，将with语句中的对象添加至作用域链的头部。<br>frame[1].document.forms[0].name.value&nbsp;=&nbsp;&quot;&quot;;<br>frame[1].document.forms[0].address.value&nbsp;=&nbsp;&quot;&quot;;<br>frame[1].document.forms[0].email.value&nbsp;=&nbsp;&quot;&quot;;<br><br>with(frame[1].document.[0])&nbsp;{<br>&nbsp;&nbsp;name.value&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;address.value&nbsp;=&nbsp;&quot;&quot;<br>&nbsp;&nbsp;email.value&nbsp;=&nbsp;&quot;&quot;;<br>}<br>缺点就是导致&nbsp;JavaScript&nbsp;语句的可执行性下降，所以通常情况下因尽可能的避免使用。","addLink":"","date":"2016-01-07 15:08","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":7},{"addArticleTtitle":"闭包","classify":"javascript","addarticleContent":"闭包有函数和与其相关的引用环境的组合而成<br>闭包允许函数访问其引用环境中的变量（又称自由变量）<br>广义上来说，所有&nbsp;JavaScript&nbsp;的函数都可以成为闭包，因为&nbsp;JavaScript&nbsp;函数在创建时保存了当前的词法环境。<br>function&nbsp;add()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;i&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;return&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(i++);<br>&nbsp;&nbsp;}<br>}<br>var&nbsp;f&nbsp;=&nbsp;add();<br>f();<br>f();<br>闭包的应用<br><br>保存变量现场<br><br><br>//&nbsp;错误方法<br>var&nbsp;addHandlers&nbsp;=&nbsp;function(nodes)&nbsp;{<br>&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;len&nbsp;=&nbsp;nodes.length;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;nodes[i].onclick&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;正确方法<br>var&nbsp;addHandlers&nbsp;=&nbsp;function(nodes)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;helper&nbsp;=&nbsp;function(i)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;var&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;len&nbsp;=&nbsp;nodes.length;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;nodes[i].onclick&nbsp;=&nbsp;helper(i);<br>&nbsp;&nbsp;}<br>}<br>封装<br><br><br>//&nbsp;将&nbsp;observerList&nbsp;封装在&nbsp;observer&nbsp;中<br>var&nbsp;observer&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;observerList&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;function(obj)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observerList.push(obj);<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;empty:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observerList&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;getCount:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;observerList.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;get:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;observerList;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;};<br>})();","addLink":"","date":"2016-01-07 15:10","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":8},{"addArticleTtitle":"面向对象","classify":"javascript","addarticleContent":"程序设计方法<br><br>程序设计描述系统如何通过程序来实现的过程，其为一种设计方法与语言实现无关。常见的设计方法有面向流程与面向对象。<br>面向过程<br><br>以程序的过程为中心，采用自定而下逐步细化的方法来实现。常见的面向过程语言有&nbsp;C、Fortran、Pascall。<br><br>面向对象<br><br>将对象作为程序的基本单元，将程序分解为数据和操作的集合。常见的面向过程语言有&nbsp;smalltalk（也是&nbsp;Objective-C&nbsp;的父亲）、Java、C++。<br><br>概念<br><br>类（Class）、对象（Object）<br>属性（Property）、方法（Method）<br>基本特点<br><br>继承（Inheritance）<br>封装（Encapsulation）<br>多态（Polymorphism）<br>JavaScript&nbsp;面向对象<br><br>constructor<br><br>对象的构造器，也可称之为构造类型。<br>//&nbsp;使用&nbsp;new&nbsp;关键字创建<br>var&nbsp;o&nbsp;=&nbsp;new&nbsp;Object();<br>var&nbsp;a&nbsp;=&nbsp;new&nbsp;Array();<br>var&nbsp;d&nbsp;=&nbsp;new&nbsp;Date();<br>&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;object&nbsp;&nbsp;&nbsp;&nbsp;constructor<br><br>//&nbsp;使用直接量创建<br>var&nbsp;o&nbsp;=&nbsp;{name:&nbsp;&quot;Xinyang&quot;};<br>var&nbsp;a&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3];<br>自定义构造器<br><br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Person(&quot;Q&quot;,&nbsp;12,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>创建构造器的方法（3&nbsp;种）<br><br>function&nbsp;ClassName()&nbsp;{...}<br>var&nbsp;Class&nbsp;=&nbsp;function()&nbsp;{...}<br>var&nbsp;Class&nbsp;=&nbsp;new&nbsp;Function()<br>NOTE:&nbsp;并不是所有函数都可以被当成构造器，例如&nbsp;var&nbsp;o&nbsp;=&nbsp;new&nbsp;Math.min()。通常自定义的函数均可当做构造器来使用。内置对象的构造器也可被当做构造器。<br>NOTE+：如果构造器有返还值并为对象类型，则对象将被直接返回。<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;//&nbsp;!!!&nbsp;注意这里<br>&nbsp;&nbsp;return&nbsp;{};<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;X&quot;,&nbsp;13,&nbsp;new&nbsp;Date());<br>console.log(X.name);&nbsp;//&nbsp;undefined;<br>this<br><br>this&nbsp;在不同环境中指代的对象不同（this&nbsp;指代的值可在函数运行过程中发生改变）。<br>出现场景&nbsp;&nbsp;所指代值<br>全局环境&nbsp;&nbsp;全局对象（window&nbsp;在浏览器环境中时）<br>constructor&nbsp;&nbsp;创建的新实例对象<br>函数调用&nbsp;&nbsp;函数的调用者<br>new&nbsp;Function()&nbsp;&nbsp;全局对象<br>eval()&nbsp;&nbsp;调用上下文中的&nbsp;this<br>全局环境中<br><br>全局环境中&nbsp;this&nbsp;指代全局对象，既&nbsp;window&nbsp;在浏览器环境中。<br>//&nbsp;以下的所有&nbsp;this&nbsp;均指代全局对象<br>var&nbsp;a&nbsp;=&nbsp;10;<br>alert(this.a);<br><br>this.b&nbsp;=&nbsp;20;<br>alert(b);<br><br>c&nbsp;=&nbsp;30;<br>alert(this.c);<br>构造器中<br><br>构造器中的&nbsp;this&nbsp;指代的是即将被创建出的对象。<br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;下面的指代即将被创建的对象<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Person(&quot;Q&quot;,&nbsp;12,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>函数中<br><br>函数中的&nbsp;this&nbsp;指代函数的调用者。<br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;下面的指代即将被创建的对象<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;this.gretting&nbsp;=&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;!!!&nbsp;下面这个&nbsp;this&nbsp;指代调用它的对象，既上面的<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;上面的&nbsp;gretting&nbsp;左边的&nbsp;this，既为即将被创建的对象<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Hi,&nbsp;I&nbsp;am&nbsp;&quot;&nbsp;+&nbsp;this.name)<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>X.gretting();<br>NOTE:&nbsp;new&nbsp;Function(&quot;console.log(this)&quot;)&nbsp;中的&nbsp;this&nbsp;均指代全局对象。eval(&quot;console.log(this)&nbsp;则为调用上下文指代的&nbsp;this。<br>this&nbsp;实例<br><br>下面的例子使用&nbsp;apply&nbsp;与&nbsp;call。通过这两个方法来将一个对象中&nbsp;this&nbsp;指代的目标进行改变。<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>&nbsp;&nbsp;this.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>&nbsp;&nbsp;}<br>}<br><br>var&nbsp;point&nbsp;=&nbsp;new&nbsp;Point(0,&nbsp;0);<br>point.move(1,&nbsp;1);<br><br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;0,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br><br>//&nbsp;改变&nbsp;point&nbsp;中&nbsp;move&nbsp;方法&nbsp;this&nbsp;指代的对象至&nbsp;circle<br>point.move.apply(circle,&nbsp;[1,&nbsp;1]);<br>//&nbsp;同样可以用类似的&nbsp;call&nbsp;方法，区别为参数需依次传入<br>point.move.call(circle,&nbsp;1,&nbsp;1);<br><br>原型继承<br><br>使用原型（prototype）可以解决重复定义实例对象拥有的完全一致的属性或方法（既共享原型中的属性或方法）。<br>function&nbsp;Boss()&nbsp;{<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.tasks&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;this.title&nbsp;=&nbsp;&quot;Boss&quot;;<br>&nbsp;&nbsp;this.gretting&nbsp;=&nbsp;function()&nbsp;{console.log(&quot;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);};<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;中具有完全一致（不必唯一的属性或方法）<br>//&nbsp;并耗用内存的共享部分<br>//&nbsp;this.title&nbsp;与&nbsp;this.gretting<br>改造后的构造器<br>function&nbsp;Boss()&nbsp;{<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.tasks&nbsp;=&nbsp;[];<br>}<br>Boss.prototype&nbsp;=&nbsp;{<br>&nbsp;&nbsp;title:&nbsp;&quot;Boss&quot;,<br>&nbsp;&nbsp;gretting:&nbsp;function(){console.log(&quot;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);}<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;中具有完全一致（不必唯一的属性或方法）<br>//&nbsp;并耗用内存的共享部分<br>//&nbsp;this.title&nbsp;与&nbsp;this.gretting<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;拥有相同的原型&nbsp;Boss.prototype<br>原型链<br><br>使用原型继承的方法会产生原型链。JavaScript&nbsp;中对于对象的查找、修改和删除都是通过原型链来完成的。<br>判断属性是否为对象本身<br>objectName.hasOwnProperty(&quot;propertyName&quot;);<br>//&nbsp;返回布尔值&nbsp;true&nbsp;或&nbsp;false<br>属性查找<br><br>对象的属性查找会更随原型链依次查找，如果在当前环境中无法找到需要的属性则会继续向下一层原型中继续寻找。<br>属性修改<br><br>在&nbsp;JavaScript&nbsp;中对于对象属性的修改永远只修改对象自身的属性（不论是来源于对象本身还是对象的原型）。当创建当前对象不存在属性时（即便原型拥有此属性），也会为此对象增加改属性。<br>修改原型上的属性<br>修改原型属性会印象所有被创建出的对象现有的属性和方法。<br>ClassName.prototype.propertyName&nbsp;=&nbsp;&quot;new&nbsp;value&quot;;<br>ClassName.prototype.methodName&nbsp;=&nbsp;function(){...};<br>属性删除<br><br>delete&nbsp;objectName.propertyName&nbsp;只可删除对象自身的属性，无法删除对象的原型属性。<br>Object.create(proto[,&nbsp;propertiesObject])<br><br>其为ECMAScript&nbsp;5&nbsp;中提出的新建立对象的方式。在&nbsp;X&nbsp;中使用隐式的原型对象指向&nbsp;boss&nbsp;对象，并将其设为&nbsp;X&nbsp;对象的原型。<br>var&nbsp;boss&nbsp;=&nbsp;{<br>&nbsp;&nbsp;title:&nbsp;&quot;Boss&quot;,<br>&nbsp;&nbsp;gretting:&nbsp;function(){console.log(&quot;Hi,&nbsp;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);}<br>};<br><br>var&nbsp;X&nbsp;=&nbsp;Object.create(boss);<br>X.gretting();&nbsp;//&nbsp;Hi,&nbsp;I&nbsp;am&nbsp;a&nbsp;Boss!<br>低版本中实现&nbsp;Object.create&nbsp;功能<br>此种方式仍需使用&nbsp;ClassName.prototype&nbsp;的方式来实现。<br>var&nbsp;clone&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;F&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;return&nbsp;function(proto)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;F.prototype&nbsp;=&nbsp;proto;<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;F();<br>&nbsp;&nbsp;}<br>})();<br>面向对象的应用<br><br>全局变量<br><br>全局变量可在程序任意位置进行访问和修改的变量。滥用全局变量会导致，命名冲突，导致程序不稳定。<br>全局标量的三种定义方法：<br>var&nbsp;gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;。<br>window.gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;附加于&nbsp;window&nbsp;对象上<br>gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;不使用&nbsp;var&nbsp;关键字，也附加于&nbsp;windwo&nbsp;对象<br>NOTE：delete&nbsp;无法删除在代码最顶端定义的全局标量&nbsp;var&nbsp;globale<br>封装<br><br>信息隐藏可以保证程序的稳定，将内部信息进行隐藏。其他语言中可词用访问权限来实现封装的概念，像&nbsp;private、public。<br>JavaScript&nbsp;中的封装可使用函数的方法（闭包）。<br>//&nbsp;模拟&nbsp;private&nbsp;的属性<br>function&nbsp;ClassName(){<br>&nbsp;&nbsp;var&nbsp;_property&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.getProperty&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_property;<br>&nbsp;&nbsp;};<br>}<br><br>//&nbsp;模拟&nbsp;protected&nbsp;属性，使用人为约束规则<br>var&nbsp;pro&nbsp;=&nbsp;ClassName.prototype;<br>pro._protectedMethod&nbsp;=&nbsp;function(){...};<br>pro.publicMethod&nbsp;=&nbsp;function(){...};<br>继承<br><br>原型继承<br><br>原型继承的方式为&nbsp;JavaScript&nbsp;中固有的继承方式。<br>var&nbsp;proto&nbsp;=&nbsp;{<br>&nbsp;&nbsp;action1:&nbsp;function(){},<br>&nbsp;&nbsp;action2:&nbsp;function(){}<br>}<br><br>var&nbsp;obj&nbsp;=&nbsp;Object.create(proto);<br>在不支持&nbsp;EM5&nbsp;中的实现方法：<br>var&nbsp;clone&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;F&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;return&nbsp;function(proto)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;F.prototype&nbsp;=&nbsp;proto;<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;F();<br>&nbsp;&nbsp;}<br>})();<br>类继承<br><br>使用原型链继承的方式模拟其他语言类继承的特性。<br>function&nbsp;ClassA()&nbsp;{<br>&nbsp;&nbsp;ClassA.classMethod&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;ClassA.prototype.api&nbsp;=&nbsp;function(){};<br><br>&nbsp;&nbsp;function&nbsp;ClassB()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;ClassA.apply(this,&nbsp;argument);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;ClassB.prototype&nbsp;=&nbsp;new&nbsp;ClassA();<br>&nbsp;&nbsp;ClassB.prototype.constructor&nbsp;=&nbsp;ClassB;<br>&nbsp;&nbsp;ClassB.prototype.api&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;ClassA.prototype.api.apply(this,&nbsp;arguments);<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;ClassA&nbsp;为父类<br>//&nbsp;ClassB&nbsp;为子类<br><br>var&nbsp;b&nbsp;=&nbsp;new&nbsp;ClassB();<br>b.api();","addLink":"","date":"2016-01-07 15:13","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":9},{"addArticleTtitle":"正则表达式","classify":"javascript","addarticleContent":"正则表达式为标书字符串规则的表达式。下面为两个例子为在&nbsp;JavaScript&nbsp;中的使用，<br>/pattern/attrs<br>new&nbsp;RegExp(pattern,&nbsp;attrs)<br>锚点<br><br>锚点用于匹配一个位置，下列为常用的锚点<br>^&nbsp;起始的位置&nbsp;/^http/<br>$&nbsp;结尾的位置&nbsp;/&#92;.jpg$/<br>&#92;b&nbsp;单词边界<br>字符类<br><br>字符类用于匹配一类字符中的一个，下面为几个常用的例子，<br>[abc]&nbsp;可用于匹配&nbsp;a&nbsp;b&nbsp;还有&nbsp;c<br>[0-9]&nbsp;可用于匹配一个数字<br>[^0-9]&nbsp;可用于匹配一个非数字<br>[a-z]&nbsp;可用于匹配一个字母<br>.&nbsp;任意字符但换行符除外<br>元字符<br><br>元字符为具有特殊意义的字符。常见的有，<br>^,&nbsp;$,&nbsp;&#92;b<br>&#92;d&nbsp;用于匹配数字&nbsp;[0-9]<br>&#92;D&nbsp;用于匹配&nbsp;[^&#92;d]<br>&#92;s&nbsp;用于匹配空白符<br>&#92;S&nbsp;用于匹配非空白符&nbsp;[^&#92;s]<br>&#92;w&nbsp;用于匹配任意单词字符（例如程序中的变量字符）&nbsp;[A-Za-z0-9_]<br>&#92;W&nbsp;用于匹配非单词字符&nbsp;[^&#92;W]<br>量词<br><br>量词用于表现字符出现的次数。可用的连词如下，<br>{m,n}&nbsp;用于表示出现&nbsp;m&nbsp;到&nbsp;n&nbsp;次之间。<br>*&nbsp;用于表示出现&nbsp;0&nbsp;到无穷之间也就等同于&nbsp;{0,}<br>?&nbsp;用于表示出现&nbsp;0&nbsp;次到&nbsp;1&nbsp;次也等同于&nbsp;{0,1}<br>+&nbsp;用于表现出现&nbsp;1&nbsp;次以及一次以上也等同于&nbsp;{1,}<br>转移符<br><br>转义符需要在匹配的字符是元字符的时候使用。使用&nbsp;&#92;&nbsp;来进行转移即可。2<br><br>多选分支<br><br>多选分支用于表示或的概念。/thi(c|n)k/&nbsp;其又等同于&nbsp;/thi[cn]k/。其还可以用于匹配文件扩展名&nbsp;/&#92;.(png|jpg|jpeg|gif)$/&nbsp;。<br>常用方法<br><br>测试：regxObj.test(str)<br><br>其用于测试正则表达式与指定字符串是否匹配。<br>/123/.test(123);&nbsp;//&nbsp;true<br>/123/.test(111);&nbsp;//&nbsp;false<br>/123/.test(&quot;x123&quot;);&nbsp;//&nbsp;true<br>捕获<br><br>其用于保存所匹配到的字符串为后续开发所用。()&nbsp;可用于捕获，正则表达式再运行时会将其保存下来，(?:)&nbsp;则不予保存。<br>//&nbsp;str.match(regexp)<br>var&nbsp;url&nbsp;=&nbsp;&quot;http://www.google.com/query?test=li-xinyang#cool&quot;;<br>var&nbsp;reg&nbsp;=&nbsp;/(https?:)&#92;/&#92;/([^&#92;/]+)(&#92;/[^&#92;?]*)?(&#92;?[^#]*)?(#,*)?/;<br><br>var&nbsp;arr&nbsp;=&nbsp;url.match(reg);<br>var&nbsp;protocol&nbsp;=&nbsp;arr[1];<br>var&nbsp;host&nbsp;=&nbsp;arr[2];<br>var&nbsp;pathname&nbsp;=&nbsp;arr[3];<br>var&nbsp;search&nbsp;=&nbsp;arr[4];<br>var&nbsp;hash&nbsp;=&nbsp;arr[5];<br>搜索与替换<br><br>regexpObj.exec(str)&nbsp;可以提供更强大的检索，它可以提供更详尽的结果&nbsp;index&nbsp;也可以提供过程状态&nbsp;lastIndex。<br>str.replace(regex/substr,&nbsp;replacement)&nbsp;可以使用正则表达式来对字符串进行替换。","addLink":"","date":"2016-01-07 15:15","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":10}],"jquery":[{"addArticleTtitle":"特点：选择网页元素---模拟css选择元素","classify":"jquery","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;模拟css选择元素&lt;/title&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;src=&quot;jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;div1&quot;&nbsp;class=&quot;box&quot;&gt;div&lt;/div&gt;<br>&nbsp;&nbsp;&lt;span&nbsp;class=&quot;box&quot;&gt;span&lt;/span&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;div2&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;divdiv&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;pp&lt;/p&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#div1&quot;).css(&quot;background&quot;,&quot;red&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;div&quot;).css(&quot;background&quot;,&quot;green&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;.box&quot;).css(&quot;background&quot;,&quot;blue&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#div2&nbsp;p&quot;).css(&quot;background&quot;,&quot;red&quot;);<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>","addLink":"","date":"2016-01-06 23:07","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0}],"zepto":[],"git":[],"flex":[],"layout":[{"addArticleTtitle":"居中布局---实现父元素不定宽高、子元素水平居中的几种方法","classify":"layout","addarticleContent":"1.inline-block+text-align<br>特点：<br>&nbsp;&nbsp;兼容性好，给display:&nbsp;inline-block;做兼容（*display:inline;*zoom:1;）<br><br>后可以支持到IE6<br>实现方法：<br>&nbsp;&nbsp;.child1{display:&nbsp;inline-block;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.parent1{text-align:&nbsp;center;}<br><br>2.table+margin<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性：display:&nbsp;table&nbsp;IE8以上，如果想支持IE6、7可以把div换位table结<br><br>构<br>实现方法：<br>&nbsp;&nbsp;.child2{display:&nbsp;table;margin:&nbsp;0&nbsp;auto;&nbsp;background-color:&nbsp;black;}<br><br>3.absolute+transform&nbsp;<br>特点：<br>&nbsp;&nbsp;兼容性：transform&nbsp;IE9以上&nbsp;&nbsp;优点：设置position:&nbsp;absolute;的元素脱离文<br><br>档流，不影响其他子元素<br>实现方法：<br>&nbsp;&nbsp;.parent3{position:&nbsp;relative;}<br>&nbsp;&nbsp;.child3{position:&nbsp;absolute;left:&nbsp;50%;transform:translateX(-<br><br>50%);background-color:&nbsp;black;}<br><br>4.flex<br>特点：<br>&nbsp;&nbsp;兼容性：flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent4{display:&nbsp;flex;justify-content:center;}<br>&nbsp;&nbsp;.child4{background-color:&nbsp;black;}<br>","addLink":"<a href=&quot;./layout/demo1.html&quot;>以上实现方法Demo<a/>","date":"2016-01-05 00:14","author":"xxz","good":3,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"居中布局---实现父元素不定高度，子元素垂直居中的几种方法","classify":"layout","addarticleContent":"1.table-cell+vertical-align<br>特点：<br>&nbsp;&nbsp;兼容到IE8以上，如果想兼容IE6、7,把&nbsp;DIV改成table<br>实现方法：<br>&nbsp;&nbsp;.parent1{display:&nbsp;table-cell;vertical-align:&nbsp;middle;background-color:&nbsp;black;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child1{background-color:&nbsp;white;}&nbsp;<br><br>2.absolute+transform&nbsp;<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{position:&nbsp;relative;height:&nbsp;100px;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.child2{position:&nbsp;absolute;top:50%;&nbsp;transform:translateY(-50%);&nbsp;background-color:&nbsp;white;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;&nbsp;align-items:center;&nbsp;background-color:&nbsp;black;&nbsp;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child3{background-color:&nbsp;white;}<br>","addLink":"<a href=&quot;./layout/demo2.html&quot;>Demo<a/>","date":"2016-01-05 10:09","author":"xxz","good":1,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"居中布局---实现父元素不定宽高、子元素居中的几种方法","classify":"layout","addarticleContent":"1.inline-block+text-align+table-cell+vertical-align<br>特点：<br>&nbsp;&nbsp;兼容性好<br>实现方法：<br>&nbsp;&nbsp;.parent1{text-align:&nbsp;center;&nbsp;display:&nbsp;table-cell;vertical-align:&nbsp;middle;background-color:&nbsp;black;height:&nbsp;100px;width:&nbsp;100px;}<br>&nbsp;&nbsp;.child1{display:&nbsp;inline-block;&nbsp;background-color:&nbsp;white;}<br><br>2.absolute+transform<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{position:&nbsp;relative;height:&nbsp;100px;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.child2{position:&nbsp;absolute;top:50%;left:&nbsp;50%;&nbsp;transform:translate(-50%,-50%);&nbsp;background-color:&nbsp;white;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性：兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;justify-content:center;&nbsp;align-items:center;&nbsp;background-color:&nbsp;black;&nbsp;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child3{background-color:&nbsp;white;}","addLink":"<a href=&quot;./layout/demo3.html&quot;>Demo<a/>","date":"2016-01-05 10:19","author":"xxz","good":2,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"多列布局---实现一列定宽，一列自适应的几种方法","classify":"layout","addarticleContent":"1.float+margin<br>特点：<br>&nbsp;&nbsp;不足：当right中子元素有清除浮动时，会对布局有影响&nbsp;&nbsp;margin-right:&nbsp;-100px;兼容IE6<br>实现方法：<br>&nbsp;&nbsp;.left1{float:&nbsp;left;width:&nbsp;100px;&nbsp;background-color:&nbsp;#ccc;margin-right:&nbsp;-100px;}<br>&nbsp;&nbsp;.right1{margin-left:&nbsp;120px;&nbsp;background-color:&nbsp;#555;}<br><br>2.float+margin+(fix)<br>特点：&nbsp;<br>&nbsp;&nbsp;第一个方案的改进，right中有浮动子元素，不影响。兼容IE6<br>实现方法：<br>&nbsp;&nbsp;.left2{float:&nbsp;left;width:&nbsp;100px;position:&nbsp;relative;&nbsp;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right-fix{float:&nbsp;right;width:&nbsp;100%;margin-left:-100px;&nbsp;}<br>&nbsp;&nbsp;.right2{margin-left:&nbsp;120px;&nbsp;background-color:&nbsp;#555;}<br><br>3.float+hidden<br>特点：<br>&nbsp;&nbsp;不支持IE6<br>实现方法：<br>&nbsp;&nbsp;.left3{float:&nbsp;left;width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right3{overflow:&nbsp;hidden;&nbsp;background-color:&nbsp;#555;}<br><br>4.table<br>特点：<br>&nbsp;&nbsp;<br>实现方法：<br>&nbsp;&nbsp;.parent4{display:&nbsp;table;width:&nbsp;100%;}<br>&nbsp;&nbsp;.left4,.right4{display:&nbsp;table-cell;background-color:&nbsp;#555;}<br>&nbsp;&nbsp;.left4{width:&nbsp;100px;padding-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br><br>5.flex<br>特点：<br>&nbsp;&nbsp;兼容性：兼容性差，flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent5{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left5{width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right5{flex:1;background-color:&nbsp;#555;}<br><br>6.两列定宽+一列自适应，方法跟上面类似<br>float+margin实现方法：<br>&nbsp;&nbsp;.left6,.middle6{float:&nbsp;left;width:&nbsp;100px;&nbsp;background-color:&nbsp;#ccc;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.middle6{margin-right:&nbsp;-100px;}<br>&nbsp;&nbsp;.right6{margin-left:&nbsp;240px;&nbsp;background-color:&nbsp;#555;}<br><br><br><br><br>","addLink":"<a href=&quot;./layout/demo4.html&quot;>Demo<a/>","date":"2016-01-05 10:53","author":"xxz","good":2,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"多列布局---实现一列不定宽，一列自适应的几种方法","classify":"layout","addarticleContent":"1.float+overflow<br>特点：<br>&nbsp;&nbsp;兼容性好<br>实现方法：<br>&nbsp;&nbsp;.left1{float:&nbsp;left;background-color:&nbsp;#ddd;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.right1{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>2.table<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性好&nbsp;&nbsp;&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{display:&nbsp;table;width:&nbsp;100%;}<br>&nbsp;&nbsp;.left2,.right2{display:&nbsp;table-cell;}<br>&nbsp;&nbsp;.left2{width:&nbsp;0.1%;padding-right:&nbsp;20px;&nbsp;background-color:&nbsp;#ddd;}<br>&nbsp;&nbsp;.right2{background-color:&nbsp;#555;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性差<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left3{margin-right:&nbsp;20px;background-color:&nbsp;#ddd;}<br>&nbsp;&nbsp;.right3{flex:1;background-color:&nbsp;#555;}&nbsp;&nbsp;<br><br>4.两列不定宽+自适应<br>特点：<br>&nbsp;&nbsp;&nbsp;新增加的列和左列样式一样&nbsp;<br>实现方法：<br>&nbsp;&nbsp;.left4,.middle4{float:&nbsp;left;background-color:&nbsp;#ddd;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.right4{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>","addLink":"<a href=&quot;./layout/demo5.html&quot;>Demo<a/>","date":"2016-01-05 14:10","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4},{"addArticleTtitle":"多列等分布局---实现父元素不定宽度，子元素多列等分布局的几种方法","classify":"layout","addarticleContent":"1.float<br>特点：<br>&nbsp;&nbsp;兼容性好&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent1{margin-left:&nbsp;-20px;}<br>&nbsp;&nbsp;.column{float:&nbsp;left;width:&nbsp;25%;padding-left:&nbsp;20px;box-sizing:border-box;}<br>&nbsp;&nbsp;.div1&nbsp;p{background-color:&nbsp;red;}<br>&nbsp;&nbsp;.div2&nbsp;p{background-color:&nbsp;green;}<br>&nbsp;&nbsp;.div3&nbsp;p{background-color:&nbsp;blue;}<br>&nbsp;&nbsp;.div4&nbsp;p{background-color:&nbsp;black;}<br><br>2.table<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性好&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent-fix{margin-left:&nbsp;-20px;}<br>&nbsp;&nbsp;.parent2{display:&nbsp;table;width:&nbsp;100%;table-layout:&nbsp;fixed;}<br>&nbsp;&nbsp;.column2{display:&nbsp;table-cell;padding-left:&nbsp;20px;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性：flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;}<br>&nbsp;&nbsp;.column3{flex:1;}<br>&nbsp;&nbsp;.column3+.column3{margin-left:&nbsp;20px;}<br><br>","addLink":"<a href=&quot;./layout/demo6.html&quot;>Demo<a/>","date":"2016-01-05 14:23","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":5},{"addArticleTtitle":"多列等高布局---实现子元素多列等高布局的几种方法","classify":"layout","addarticleContent":"1.table<br>实现方法：<br>&nbsp;&nbsp;.parent1{display:&nbsp;table;width:&nbsp;100%;table-layout:&nbsp;fixed;}<br>&nbsp;&nbsp;.left1,.right1{display:&nbsp;table-cell;background-color:&nbsp;#555;}<br>&nbsp;&nbsp;.left1{width:&nbsp;100px;padding-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br><br>2.flex<br>实现方法：<br>&nbsp;&nbsp;.parent2{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left2{width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right2{flex:1;background-color:&nbsp;#555;}<br><br>3.float<br>实现方法：<br>&nbsp;&nbsp;.parent3{overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;.left3,.right3{padding-bottom:&nbsp;9999px;margin-bottom:&nbsp;-9999px;}<br>&nbsp;&nbsp;.left3{float:&nbsp;left;&nbsp;width:&nbsp;100px;&nbsp;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right3{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>","addLink":"<a href=&quot;./layout/demo7.html&quot;>Demo<a/>","date":"2016-01-05 14:42","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":6},{"addArticleTtitle":"全屏布局---position实现方案","classify":"layout","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;水平居中&lt;/title&gt;<br>&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*兼容性:IE6不兼容，可以用hash*/&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;html,body,.parent{height:&nbsp;100%;overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.top{position:&nbsp;absolute;top:0;left:&nbsp;0;right:&nbsp;0;height:&nbsp;100px;background-color:&nbsp;#222;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.left{position:&nbsp;absolute;top:&nbsp;100px;left:&nbsp;0;bottom:&nbsp;50px;width:&nbsp;200px;background-color:&nbsp;#444;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.right{position:&nbsp;absolute;top:&nbsp;100px;bottom:&nbsp;50px;left:&nbsp;200px;right:&nbsp;0;background-color:&nbsp;#666;overflow:&nbsp;auto;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.bottom{position:&nbsp;absolute;left:&nbsp;0;right:&nbsp;0;bottom:&nbsp;0;height:&nbsp;50px;background-color:&nbsp;#888;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.inner{min-height:&nbsp;1000px;}<br>&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;&nbsp;&nbsp;<br>&nbsp;&nbsp;&lt;div&nbsp;class=&quot;parent&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;top&quot;&gt;top&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;left&quot;&gt;left&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;right&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;inner&quot;&gt;inner&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"<a href=&quot;./layout/demo8.html&quot;>Demo<a/>","date":"2016-01-05 15:21","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":7},{"addArticleTtitle":"全屏布局---flex方案","classify":"layout","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;水平居中&lt;/title&gt;<br>&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*兼容性IE9以下不兼容，可以用hash*/&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;html,body,.parent{height:&nbsp;100%;overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.parent{display:&nbsp;flex;flex-direction:column;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.top{height:&nbsp;100px;background-color:&nbsp;#222;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.bottom{height:&nbsp;50px;background-color:&nbsp;#888;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.middle{flex:1;display:&nbsp;flex;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.left{width:&nbsp;200px;background-color:&nbsp;#444;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.right{flex:1;background-color:&nbsp;#666;overflow:&nbsp;auto;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.inner{min-height:&nbsp;1000px;}<br>&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;&nbsp;&nbsp;<br>&nbsp;&nbsp;&lt;div&nbsp;class=&quot;parent&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;top&quot;&gt;top&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;middle&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;left&quot;&gt;left&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;right&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;inner&quot;&gt;inner&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"<a href=&quot;./layout/demo9.html&quot;>Demo<a/>","date":"2016-01-05 15:43","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":8}],"buildWebsite":[],"resources":[],"encourage":[{"addArticleTtitle":"穷人思维","classify":"encourage","addarticleContent":"穷人为什么穷？无论中国美国，主流对此都有种没明说但心照不宣的观点：因为他们懒、酗酒、赌博……曾有条被疯转微博，一位妈妈卖盗版光盘被城管追赶跳入水中，当时，一位女博士点评说北京好月嫂都月入过万了，何必要选这么苦情的生活方式？此微博后被证实为谣言，但抱小孩卖毛片的中年女性的确曾是北京一景。中产阶级的眼界不是穷人的眼界，正如本书作者也苦苦思索，劳工为何不要求加薪，或寻找更高薪工作，甚至组织工会，维护自身权益？答案是，越贫困，越无力。<br><br>畅销书女作家芭芭拉•艾伦瑞克进入美国底层，体验在时薪6~8美元下，辛勤工作是否能生活下去，她的答案是：不能。除非你跟别人合租房子，或者打两份工。<br><br>她在三个城市当过餐厅服务员、旅馆服务员、清洁女工、看护护理及沃尔玛的售货员，她努力工作，也努力尝试收支平衡，为此她曾勇猛打两份工，一周工作七天，每周还能在打工的看护之家免费吃两三餐，这些都帮助了她。但到旅游旺季，房租将上涨三倍，身为女佣的她，只能再次破产。<br><br>作者有穷人没有的优势：在前面的几十年，她有高于一般水平的医疗照顾、良好饮食、她常年练举重，身体“是不寻常的结实”。并且，就这个实验来说，她作弊了，她给自己租车，用信用卡付费；每到一个城市，她备有一千多美元的起头基金；她开了外挂，却仍然没有打赢。<br><br>我一度觉得这本《我在底层的生活——当专栏作家化身女服务员》是来黑美国的，因为美剧、好莱坞电影不曾说过，还有这么个美国存在：低薪白人劳工，三四人挤在一个小房间里生活；怀孕的清洁工摔伤也不敢请假，一天没薪水，第二天就没钱买杂物；沃尔玛的员工付不起房租，住在收容所；背着十几磅重的吸尘器吸尘、跪在地上擦地，女佣们话题热点是哪个牌子的止痛药最好用；没有健康保险，因为太贵，这意味如果生病，你要比别人多花钱。<br><br>女招待考虑搬入每晚40~60美金的汽车旅馆（她每天才挣四十多美金），作家惊讶问她怎么想的，同事像看笨蛋一样看着女作家：我上哪儿弄一个月的租金跟押金去租公寓？而女作家，之所以能租到月租500的公寓，是拜她从自己的现实世界带来的1000美金付押金及头一月租金所赐。<br><br>不断上涨的房租是穷人的噩梦，作者发现，穷人越来越多住在汽车旅馆。后者可以按天结账，犹如鸦片，诱惑现金紧张的穷人陷进去，微薄的积蓄被烧光，更加不可能有钱租公寓。作者发现有两个男人轮流睡一张床，一个人睡觉时另一个在车上打盹。而我忽然明白卡佛小说里的那些穷人，那些卖掉农庄，揣着全部积蓄进城找工作的一家人，在一间汽车旅馆里住下去，某一天又一声不吭地走掉——他们就是汽车旅馆鸦片的受害者，他们不是走掉，是掉入地狱的更下一层。<br><br>作者认为，穷人破产，因为薪水太低，而房租太贵。这一点中国读者想必也深有共鸣。当房租犹如奥运会田径赛道上的博尔特般一路狂奔，穷人只能不停搬家，搬入一间又一间不带家具的公寓，锅碗瓢勺家具又是一笔钱；或入住汽车旅馆胶囊公寓，只剩一张床那么大小的房间，你证悟到睡觉和死亡何其相似。而无法做饭的后果，是你要花更多钱在吃饭上。最终，她，还有我们，均不难发现一条荒谬定律，如果你穷，你就得比不穷的人花更多的钱，才能活下去。这不是美剧中的美国，但它并不陌生。全世界的金钱流动法则相同：钱生育钱，贫困生育贫困。<br><br>作者有强烈的政治立场，而她真实凶残的打工经历平衡了她的倾向。说到底这并不是一本坐在空调房间凭政治理念写出来的书，她一天工作九小时，住在没有纱窗空调电扇的旅馆，因为锁不上门，不得不合衣而睡。而她的工作，是在35度高温下打扫“有五套浴厕的房子”，撅起屁股，跪于大理石地板，用抹布擦过每一寸地面，擦干净整排玻璃门上的每一个指纹，而且遵循女仆美德，不在主人家喝水；是每周六日服侍近四十名阿兹海默症老年病人吃三餐、清理餐具、擦桌吸地，“我只能全力跟上洗碗机吐出盘子和脏盘子涌进来的速度”；午饭是高速路上停车上厕所时的五分钟；上厕所要打卡。即使这样，仍有几次，她不得不求助于慈善机构，后者提供的免费食物，对没有冰箱的穷人来说并不实用；而一个“平价”通铺床位，每晚也要19美元，慈善机构的小姐建议她“搬进收容所”，以便存到足够的钱交第一个月的房租和押金。<br><br>她将自己奉献为小白鼠，而我们得以观察，贫穷是如何侵蚀一个人的精神。<br><br>作者自己能从时薪5.15美元的餐厅跳槽至时薪7.5，因为她有车，可四处应聘，上班范围更有弹性。她的同事若换工作，交通是大问题，甚至需更换住处。穷人比富人更保守，更不愿意改变，就像奴隶比奴隶主更保守。物质上的窘迫，使他们承受不起改变，冒不起一周没工作的风险。那意味着他们会挨饿，从现在的房子被赶出去，掉到地狱更可怕的下一层。<br><br>但作者在找工作时呈现的状态，她的精神活力、她的勇气才是她和她的同事们之最大区别。同样被羞辱及盘剥，她跃跃欲试组织工会，她的同事却只希望偶尔请一天假，第二天还能有钱买点杂货。这一部分也可用来解释教育的重要所在，作者隐瞒了博士学位，却拿不走自己的思维。精神的贫困是穷人解脱贫穷的最大障碍。<br><br>两个多月的底层生活后，作者的背伤复发、全身起了疱疹，并且，她身为“民主社会主义者”“女性主义者”，对底层人民抱有的博爱之情，慢慢变淡，代之以麻木，甚至仇恨。一个身高不到1米4的女售货员跟她起了纠纷，她看着后者踩着梯子才够得着高处衣服，一股恶意涌上，“希望能看到她啪地一声摔到地上”；而残疾员工忧伤地坐在轮椅里，她看到第一感觉是“至少你还坐着。”——她忽然意识到，如果自己的父亲没有脱离矿工身份，如果去掉自己的教育程度，也许自己就是现在这样：苛刻、狡猾、满怀怨恨。她没有强调，但读者可以自行总结：穷人仇恨穷人。这不是什么新鲜事，却让人难以面对——穷人不都是善良的么？法国作家塞利纳在他1935年的《长夜行》里写道：“我们之间有五个法郎的隔阂，就足以产生恨，希望他们统统死光。”“五个法郎”，可以换成小升初的一个名额、一个工作机会，甚至仅仅是高峰期公车上的一个座位、它仍然“足以产生恨，希望他们统统死光”。不信你看北京上海贴吧里，那些铺天盖地的“外地人滚出去”。<br><br>贫穷是一种专制，它培养自己的奴隶。当你习惯于被剥夺自尊，习惯于被当做一个小偷/懒虫/酒鬼对待，当你常年生活在社会边缘、你存在的意义被抹去，宛如你根本不存在。而打开电视——无论中美——都是老板，男女白领，即使是喊着奋斗的北漂，住的也是你这辈子都住不上的三室两厅，它会让你以为“只有我自己才是不正常的”。精神上的专制就此完成。穷奴大抵上有两种，一种借仇恨别人获得自己高人一等的存在价值感，一种则接受自己是最弱的，就像那些被迫在自己的社会体系中落入屈从位置的沮丧的猴子，它们变得焦虑而退缩，不再挣扎，甚至对自卫也毫无兴趣。<br><br>借助铁丝和剪刀，能培养出自然界不存在的侏儒松，定型成功，即使松开捆扎铁丝，那些松树也固定在扭曲的姿态。同样，精神上的专制，令你在内心相信自己就是个侏儒。芭芭拉•艾伦瑞克细腻雄辩地写出精神的毁灭之路，我却在其中看到熟悉的人脸，作为经历了大饥荒的幸存者的后代，她绘出的精神贫穷者的肖像我并不陌生。那些脸在我们周围漫游，如恒河河沙，又似幽灵。<br><br>怎么办？也许没有一个药方可以取消贫困，但至少下次看到一个走投无路的穷人，在指责他懒惰、酗酒之前还可以多想一秒钟；在大吼“外地人滚出去”之前，还可以思考一下这仇恨从何而来；即使我们的初始值是一棵被剪成侏儒的盆景，也可以在松绑后尝试站起来，笔直地站成一棵树。<br><br>开外挂的女作家，无论如何也做不到收支平衡。但实在要流浪街头时，她可以挖出自己的信用卡，大吃一顿。可是现实中真正的穷人，她的同事们呢？<br><br>我想起《没有人给他写信的上校》的最后一段：绝望的妻子揪着上校的领子，问这些天我们吃什么？<br><br>“上校活了七十五岁——用他一生中分分秒秒积累起来的七十五岁——才到了这个关头。他自觉心灵清透，坦坦荡荡，什么事也难不住他。他说：<br><br>‘吃屎’。”","date":"2016-01-04 20:15","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"行走，回首","classify":"encourage","addarticleContent":"&nbsp;&nbsp;人生路，漫漫而行。一阵秋雨洒落，驻足回首，秋叶纷飞。踩过一叠厚厚堆积的落叶，仿佛就像生命中一堆纠缠不清的人和事，渐渐遗忘，渐渐随风。<br>　　<br>　　往事过眼，便是回忆。你的呢喃，清晰在耳畔。但我的眼眸，已失去了你的色彩。人生这条路，走的越远，失去的就越多，想抓也抓不住，想停也只能一直走下去。<br>　　<br>　　昨日的温存，已成了今日的怀恋。依稀记得梦中的清风随了夜，划在心底的寒，淡淡的痛。你说的话语，凋零在上一个叶落，满地的残朵。我却傻傻祈求，时光捡起，成为我心中不忘的那朵。<br>　　<br>　　转眼间秋风舞动，一声呓语飘落清冷，像一场邂逅，一次回眸。记忆在残风中流逝，那样匆匆，那样落寞，连呼喊都来不及停留，便消散在天边不见。书刻思念的篇章，空白，黯淡，碎散一地无法拼凑。寥寥秋落，回忆是那么的无助，那么令人叹息，苍白的嘴唇自嘲苦笑，连握笔的手指都那么的无力，消瘦。<br>　　<br>　　告诉我什么是孤独？我们还会再见吗？最后的旅程擦肩而过，时光带走了一切，但我只求留下最后的思念。<br>　　<br>　　醉念红尘，抚桥流水。岁月铸就的青石板路，寸草难生，如同霜寒舞天的夜月，哀叹了生命的流逝。一曲残星滑落，蓦然回首。这条路，孤独的没有任何生命。<br>　　<br>　　时间匆忙，我们来不及休息。风景匆匆而来又匆匆而去，看到了风景却落下了脚程。人的使命就是在孤独寂寞中寻索，可人自己，却想看看尘世的美艳。这一世为使命，还是为自己？<br>　　<br>　　又是那条无人的街道，一个人漫步远去，莫名的情绪，莫名在颤动。眼神茫然地注视着前方，寒风带起的落叶，如思念般那么无助那么遥远，像根丝线般，缠绕着你绷紧的心弦，连雨落到脸上，还依旧倔强地走着。<br>　　<br>　　那些人再也不回来，那片天最后模糊了色彩。我们都是孤独的，都在黑夜中寻找被云雾遮掩的星空，却看到了流星失落的雨夜。期盼着刺目的阳光，却在逆光的地方，看着自己沉默的倒影。以为世界会关注自己，转过身看着消失的彼岸，却不得不为世界而哭泣。<br>　　<br>　　一条沉默的路，一个狼狈的背影。彷徨，无助。孤独的感觉似幽风徘徊在耳边，拉动了最后的心弦，凄厉地惨叫。奔跑，跌撞。无人的世界，无人的寂静。回首，期盼的眼眸望不到熟悉的轻语;行走，孤独的身影望不到漆黑的彼方。泪断的雨线，渐渐模糊了记忆的错觉……<br>　　<br>　　虚无的世界，虚无的路，孤独的人，孤独地走。耳边飘来了熟悉的话语:不是所有委屈都可以呐喊，不是所有心事都可以述说，有些事只有自己能做，别人帮不了你。这条路，注定是寂寞的。回首，充满了期待却是更残酷的等待。<br>　　<br>　　秋季，等待了一地叶落，像那些荒芜的岁月，像是旅人，望着沉默的斑驳古路，带着落寞，行走，回首……","date":"2016-01-04 20:24","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"一直努力，直至成功","classify":"encourage","addarticleContent":"&nbsp;&nbsp;所谓理想就是把我们的愿景放在一个价值观的尺度上度量，然后决定人生往哪里走？去哪里？走多远？和谁走？<br>　　<br>　　从民营企业角度看，我做生意是被迫的一个开始，但习惯于用自己的价值观来引导我做判断，因此一直把丧事当喜事办。因为我总觉得自己要去心中期待的某个地方，这时我会经常想起鲁迅的一个小说《过客》。这个过客腿脚不好，他一直不停地走，有天他到一个茶水摊和一个老人和小孩对话，询问前方的路该怎么走？老人告诉他：过了一个坟地，再往前一拐，差不多就到了。他又问那小孩儿，小孩告诉他，你看见那片鲜花了，再往前走就到了。同样一个地方，老人眼里看见的是坟墓，而年轻人眼里看见的是鲜花，可见视野和心态截然不同。而这个过客心里只有一句话，就是——我要走，我要走，我要走。<br>　　<br>　　我在创业和折腾的过程中经常会想起这个故事，我心里有两个地方可以去，一个是坟墓，一个是鲜花，不管是哪个，当下就是“我要走”这样一个状态，这种想法陪伴我，从开始很被动的创业，甚至到后来哪怕负债累累，人生已经到了最绝望的时候，始终没有放弃，仍然把丧事当喜事办，因为我意识到理想是希望的风，是黑暗尽头的那道光，有了它，我能驱走黑暗与恐惧，虽然不知道前方有多远，但是依然有坚持下去的力量。<br>　　<br>　　50岁生日前夕，我决定送给自己的一份特别、有纪念意义的生日礼物，去台湾骑自行车环岛旅行。那时正值酷暑，我每天骑行80多公里，总共环岛5500公里，路上看到一个老太太比我还猛，她磕头环岛。我问她，您怎么走？她说，我就拜拜拜拜，一直走没停过。我很是敬佩，送给她一瓶水，她接着继续走。真的很难想象一个瘦老太太单薄的身躯下，哪来这么大能量？只有一个答案：她心里有佛，有信念，有理想和快乐的天堂，所以才有如此的毅力和能量，不停地拜下去，也许有一天膝盖流血她却浑然不知，也许有一天她会劳累晕眩，但她心里追求的天堂不会坠落。<br>　　<br>　　我再说一个崔永元的故事，原来我们俩很不搭界，相信他对“黑心开发商”也抱有道德上的不满，而在央视看到的小崔似乎也有点装，老讲长征、理想什么的，后来我听一个朋友介绍说他在做一个口述历史的节目。某天，我们在一家酒店中见面，香格里拉见面，他送我一些小人书和他做的口述史的资料，我才发现原来屏幕以外的小崔很了不起。<br>　　<br>　　有个夏天我把这个故事讲给王石，带着王石去了小崔的工作室，到了工作室以后，我们看到崔永元花了十几、二十年的时间一直在做一件事情，就是记录当下中国人的状态，而且默默无闻地到处筹资。这让我看到了一个有责任感的男人，这个男人没事儿找事儿，把别人事儿当自己事儿，自己的事儿不当回事儿，自己都快抑郁了，还是操心民族的历史是不是能记录下来，着实感动了我，也感动了王石。后来，我们成了好朋友，也参与到了口述历史的项目中，共同记录这个时代以及这个时代中人们的想法和事迹。<br>　　<br>　　古人讲：势必有坚韧不拔之志，才有坚韧不拔之力。志向是带来毅力的事儿，就像磕头环岛的老太太，如果她心里没有佛，怎会有毅力去磕头环岛？毅力依附于信念和理想之上，不是欺骗也不是虚妄，理想除了让我们获得能量、财富外，还会在我们遭遇痛苦和不幸时支撑我们活下去。否则，当我们遇到巨大的困难时，很可能会选择逃避，甚至会在不为人知的时候选择死亡。在这个纷繁、价值观多元的时代，希望我们对“理想”这个词不再拒绝，不再隔膜，不再离它而去，而是从脚下做起，一天天努力，直到成功为止。","date":"2016-01-04 20:26","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2}],"noCategory":[],"dom":[{"addArticleTtitle":"文档树","classify":"dom","addarticleContent":"Document&nbsp;Object&nbsp;Model&nbsp;(DOM)&nbsp;为文档对象模型，&nbsp;它使用对象的表示方式来表示对应的文档结构及其中的内容。<br><br>下面为一个样例&nbsp;p&nbsp;元素在文档中的对象所包含的所有属性。<br>&lt;p&nbsp;id=&quot;target&quot;&gt;Hello,&nbsp;World!&lt;/p&gt;<br>p#targetaccessKey:&nbsp;&quot;&quot;<br>align:&nbsp;&quot;&quot;<br>attributes:&nbsp;Named<br>NodeMapbaseURI:&nbsp;&quot;&quot;<br>childElementCount:&nbsp;0<br>childNodes:&nbsp;NodeList[1]<br>children:&nbsp;HTMLCollection[0]<br>classList:&nbsp;DOMTokenList[0]<br>className:&nbsp;&quot;&quot;<br>clientHeight:&nbsp;0<br>clientLeft:&nbsp;0<br>clientTop:&nbsp;0<br>clientWidth:&nbsp;0<br>contentEditable:&nbsp;&quot;inherit&quot;<br>dataset:&nbsp;DOM<br>StringMapdir:&nbsp;&quot;&quot;<br>draggable:&nbsp;false<br>firstChild:&nbsp;text<br>firstElementChild:&nbsp;null<br>hidden:&nbsp;false<br>id:&nbsp;&quot;target&quot;<br>innerHTML:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>innerText:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>isContentEditable:&nbsp;false<br>lang:&nbsp;&quot;&quot;<br>lastChild:&nbsp;text<br>lastElementChild:&nbsp;null<br>localName:&nbsp;&quot;p&quot;<br>namespaceURI:&nbsp;&quot;http://www.w3.org/1999/xhtml&quot;<br>nextElementSibling:&nbsp;null<br>nextSibling:&nbsp;null<br>nodeName:&nbsp;&quot;P&quot;<br>nodeType:&nbsp;1<br>nodeValue:&nbsp;null<br>offsetHeight:&nbsp;0<br>offsetLeft:&nbsp;0<br>offsetParent:&nbsp;null<br>offsetTop:&nbsp;0<br>offsetWidth:&nbsp;0<br>onabort:&nbsp;null<br>onautocomplete:&nbsp;null<br>onautocompleteerror:&nbsp;null<br>onbeforecopy:&nbsp;null<br>onbeforecut:&nbsp;null<br>onbeforepaste:&nbsp;null<br>onblur:&nbsp;null<br>oncancel:&nbsp;null<br>oncanplay:&nbsp;null<br>oncanplaythrough:&nbsp;null<br>onchange:&nbsp;null<br>onclick:&nbsp;null<br>onclose:&nbsp;null<br>oncontextmenu:&nbsp;null<br>oncopy:&nbsp;null<br>oncuechange:&nbsp;null<br>oncut:&nbsp;null<br>ondblclick:&nbsp;null<br>ondrag:&nbsp;null<br>ondragend:&nbsp;null<br>ondragenter:&nbsp;null<br>ondragleave:&nbsp;null<br>ondragover:&nbsp;null<br>ondragstart:&nbsp;null<br>ondrop:&nbsp;null<br>ondurationchange:&nbsp;null<br>onemptied:&nbsp;null<br>onended:&nbsp;null<br>onerror:&nbsp;null<br>onfocus:&nbsp;null<br>oninput:&nbsp;null<br>oninvalid:&nbsp;null<br>onkeydown:&nbsp;null<br>onkeypress:&nbsp;null<br>onkeyup:&nbsp;null<br>onload:&nbsp;null<br>onloadeddata:&nbsp;null<br>onloadedmetadata:&nbsp;null<br>onloadstart:&nbsp;null<br>onmousedown:&nbsp;null<br>onmouseenter:&nbsp;null<br>onmouseleave:&nbsp;null<br>onmousemove:&nbsp;null<br>onmouseout:&nbsp;null<br>onmouseover:&nbsp;null<br>onmouseup:&nbsp;null<br>onmousewheel:&nbsp;null<br>onpaste:&nbsp;null<br>onpause:&nbsp;null<br>onplay:&nbsp;null<br>onplaying:&nbsp;null<br>onprogress:&nbsp;null<br>onratechange:&nbsp;null<br>onreset:&nbsp;null<br>onresize:&nbsp;null<br>onscroll:&nbsp;null<br>onsearch:&nbsp;null<br>onseeked:&nbsp;null<br>onseeking:&nbsp;null<br>onselect:&nbsp;null<br>onselectstart:&nbsp;null<br>onshow:&nbsp;null<br>onstalled:&nbsp;null<br>onsubmit:&nbsp;null<br>onsuspend:&nbsp;null<br>ontimeupdate:&nbsp;null<br>ontoggle:&nbsp;null<br>onvolumechange:&nbsp;null<br>onwaiting:&nbsp;null<br>onwebkitfullscreenchange:&nbsp;null<br>onwebkitfullscreenerror:&nbsp;null<br>onwheel:&nbsp;null<br>outerHTML:&nbsp;&quot;&lt;p&nbsp;id=&quot;target&quot;&gt;Hello,&nbsp;World!&lt;/p&gt;&quot;<br>outerText:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>ownerDocument:&nbsp;document<br>parentElement:&nbsp;null<br>parentNode:&nbsp;null<br>prefix:&nbsp;null<br>previousElementSibling:&nbsp;null<br>previousSibling:&nbsp;null<br>scrollHeight:&nbsp;0<br>scrollLeft:&nbsp;0<br>scrollTop:&nbsp;0<br>scrollWidth:&nbsp;0<br>shadowRoot:&nbsp;null<br>spellcheck:&nbsp;true<br>style:&nbsp;CSSStyle<br>DeclarationtabIndex:&nbsp;-1<br>tagName:&nbsp;&quot;P&quot;<br>textContent:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>title:&nbsp;&quot;&quot;<br>translate:&nbsp;true<br>webkitdropzone:&nbsp;&quot;&quot;<br>__proto__:&nbsp;HTMLParagraphElement<br><br>通过使用&nbsp;DOM&nbsp;提供的&nbsp;API&nbsp;(Application&nbsp;Program&nbsp;Interface)&nbsp;可以动态的修改节点（node），也就是对&nbsp;DOM&nbsp;树的直接操作。&nbsp;浏览器中通过使用&nbsp;JavaScript&nbsp;来实现对于&nbsp;DOM&nbsp;树的改动。<br><br>DOM&nbsp;包含<br><br>DOM&nbsp;Core<br>DOM&nbsp;HTML<br>DOM&nbsp;Style<br>DOM&nbsp;Event<br><br>HTML&nbsp;转换&nbsp;DOM&nbsp;树<br><br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&nbsp;&nbsp;&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;My&nbsp;title&lt;/title&gt;<br>&nbsp;&nbsp;&lt;/head&gt;<br>&nbsp;&nbsp;&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href=&quot;&quot;&gt;My&nbsp;Link&lt;/a&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;My&nbsp;header&lt;/h1&gt;<br>&nbsp;&nbsp;&lt;/body&gt;<br>&lt;/html&gt;<br><br><br>节点遍历<br><br>在元素节点中提取自己所需的节点，并予以操作。<br>//&nbsp;Document.getElementsByTagName()<br>//&nbsp;更具标签名找到目标节点的集合，此例中为&nbsp;&lt;h1&gt;My&nbsp;header&lt;/h1&gt;<br>var&nbsp;node&nbsp;=&nbsp;document.getElementsByTagName(&quot;h1&quot;)[0];<br><br>//&nbsp;Node.parentNode;<br>//&nbsp;获得目标节点的父节点，此例中为&nbsp;body&nbsp;元素<br>node.parentNode;<br><br>//&nbsp;Node.firstChild<br>//&nbsp;获得目标节点的第一个子节点，此例中为&nbsp;&quot;My&nbsp;header&quot;<br>node.firstChild;<br><br>//&nbsp;Node.lastChild<br>//&nbsp;获得目标节点的最后一个子节点，此例中为&nbsp;&quot;My&nbsp;header&quot;<br>node.lastChild;<br><br>//&nbsp;Node.previousSibling;<br>//&nbsp;获得目标节点的前一个相邻节点<br>node.previousSibling;<br><br>//&nbsp;Node.nextSibling;<br>//&nbsp;获得目标节点的下一个相邻节点<br>node.nextSibling;<br><br>节点类型<br><br>常用节点类型<br>ELEMENT_NODE&nbsp;可使用&nbsp;Document.createElement(&quot;elementName&quot;);&nbsp;创建<br>TEXT_NODE&nbsp;可使用&nbsp;Document.createTextNode(&quot;Text&nbsp;Value&quot;);&nbsp;创建<br><br>不常用节点类型<br>COMMENT_NODE<br>DOCUMENT_TYPE_NODE<br><br>不同节点对应的NodeType类型<br>此值可以通过&nbsp;Node.nodeType&nbsp;来获取。<br><br>节点编号&nbsp;&nbsp;节点名称<br>1&nbsp;&nbsp;Element<br>2&nbsp;&nbsp;Attribute<br>3&nbsp;&nbsp;Text<br>4&nbsp;&nbsp;CDATA&nbsp;Section<br>5&nbsp;&nbsp;Entity&nbsp;Reference<br>6&nbsp;&nbsp;Entity<br>7&nbsp;&nbsp;Processing&nbsp;Instrucion<br>8&nbsp;&nbsp;Comment<br>9&nbsp;&nbsp;Document<br>10&nbsp;&nbsp;Document&nbsp;Type<br>11&nbsp;&nbsp;Document&nbsp;Fragment<br>12&nbsp;&nbsp;Notation<br><br>NOTE：此处需要清楚节点和元素的区别。我们平常说的元素&nbsp;其实指的是节点中得元素节点，所以说节点包含元素，节点还包括文本节点、实体节点等。<br><br>元素遍历<br><br>元素节点符合&nbsp;HTML&nbsp;DOM&nbsp;树规则，所以它与&nbsp;DOM&nbsp;中存在的节点相似。<br>&lt;p&gt;<br>&nbsp;&nbsp;Hello,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;em&gt;Xinyang&lt;/em&gt;!<br>&nbsp;&nbsp;回到<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主页<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;<br>&nbsp;&nbsp;。<br>&lt;/p&gt;<br>//&nbsp;在选取元素节点后<br><br>p.firstElementChild;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;em&gt;Xinyang&lt;/em&gt;<br>p.lastElementChild;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;主页&lt;/a&gt;<br><br>em.nextElementSibling;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;主页&lt;/a&gt;<br>em.previousElementSibling;&nbsp;//&nbsp;&quot;Hello,&quot;","addLink":"","date":"2016-01-07 18:27","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"节点操作","classify":"dom","addarticleContent":"因为&nbsp;DOM&nbsp;的存在，这使我们可以通过&nbsp;JavaScript&nbsp;来获取、创建、修改、或删除节点。<br><br>NOTE：下面提供的例子中的&nbsp;element&nbsp;均为元素节点。<br><br>1、获取节点<br><br>父子关系<br><br>element.parentNode<br>element.firstChild/element.lastChild<br>element.childNodes/element.children<br><br>兄弟关系<br><br>element.previousSibling/element.nextSibling<br>element.previousElementSibling/element.nextElementSibling<br><br>通过节点直接的关系获取节点会导致代码维护性大大降低（节点之间的关系变化会直接影响到获取节点），而通过接口则可以有效的解决此问题。<br><br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;ELEMENT_NODE&nbsp;&&nbsp;TEXT_NODE&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;ul&nbsp;id=&quot;ul&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;First&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Second&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Third&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Fourth&lt;/li&gt;<br>&nbsp;&nbsp;&lt;/ul&gt;<br>&nbsp;&nbsp;&lt;p&gt;Hello&lt;/p&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;ulNode&nbsp;=&nbsp;document.getElementsByTagName(&quot;ul&quot;)[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.parentNode);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;body&gt;&lt;/body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.previousElementSibling);&nbsp;//null<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.nextElementSibling);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;p&gt;Hello&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.firstElementChild);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;li&gt;First&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.lastElementChild);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;li&gt;Fourth&lt;/li&gt;<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>NTOE：细心地人会发现，在节点遍历的例子中，body、ul、li、p节点之间是没有空格的，因为如果有空格，那么空格就会被当做一个TEXT节点，从而用ulNode.previousSibling获取到得就是一个空的文本节点，而不是&nbsp;&lt;li&gt;First&lt;/li&gt;&nbsp;节点了。即节点遍历的几个属性会得到所有的节点类型，而元素遍历只会得到相对应的元素节点。一般情况下，用得比较多得还是元素节点的遍历属性。<br><br>实现浏览器兼容版的element.children<br>有一些低版本的浏览器并不支持&nbsp;element.children&nbsp;方法，但我们可以用下面的方式来实现兼容。<br><br>&lt;html&nbsp;lang&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charest=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;Compatible&nbsp;Children&nbsp;Method&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&nbsp;id=&quot;body&quot;&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;item&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;123&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;ppp&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;h1&lt;/h1&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;getElementChildren(e){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(e.children){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;e.children;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;compatible&nbsp;other&nbsp;browse&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;i,&nbsp;len,&nbsp;children&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;child&nbsp;=&nbsp;element.firstChild;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(child&nbsp;!=&nbsp;element.lastChild){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(child&nbsp;!=&nbsp;null){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(child.nodeType&nbsp;==&nbsp;1){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children.push(child);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child&nbsp;=&nbsp;child.nextSibling;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children.push(child);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;children;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Test&nbsp;method&nbsp;getElementChildren(e)&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;item&nbsp;=&nbsp;document.getElementById(&quot;item&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;children&nbsp;=&nbsp;getElementChildren(item);<br>&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i&nbsp;=0;&nbsp;i&nbsp;&lt;&nbsp;children.length;&nbsp;i++){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(children[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>NOTE：此兼容方法为初稿，还未进行兼容性测试。<br><br><br><br>2、接口获取元素节点<br><br>getElementById<br>getElementsByTagName<br>getElementsByClassName<br>querySelector<br>querySelectorAll<br><br>API&nbsp;&nbsp;只作用于&nbsp;document&nbsp;&nbsp;唯一返回值&nbsp;&nbsp;live<br>getElementById&nbsp;&nbsp;√&nbsp;&nbsp;√&nbsp;&nbsp;<br>getElementsByTagName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;√<br>getElementsByClassName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;√<br>querySelectorAll&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>querySelector&nbsp;&nbsp;&nbsp;&nbsp;√&nbsp;&nbsp;<br>getElementById<br><br>获取文档中指定&nbsp;id&nbsp;的节点对象。<br>var&nbsp;element&nbsp;=&nbsp;document.getElementById(&quot;id&quot;);<br>getElementsByTagName<br><br>动态的获取具有指定标签元素节点的集合（其返回值会被&nbsp;DOM&nbsp;的变化所影响，其值会发生变化）。此接口可直接通过元素而获取，不必直接作用于&nbsp;document&nbsp;之上。<br>//&nbsp;示例<br>var&nbsp;collection&nbsp;=&nbsp;element.getElementsByTagName(&quot;tagName&quot;);<br><br>//&nbsp;获取指定元素的所有节点<br>var&nbsp;allNodes&nbsp;=&nbsp;document.getElementsByTagName(&quot;*&quot;);<br><br>//&nbsp;获取所有&nbsp;p&nbsp;元素的节点<br>var&nbsp;elements&nbsp;=&nbsp;document.getElementsByTagName(&quot;p&quot;);<br>//&nbsp;取出第一个&nbsp;p&nbsp;元素<br>var&nbsp;p&nbsp;=&nbsp;elements[0];<br>getElementsByClassName<br><br>获取指定元素中具有指定&nbsp;class&nbsp;的所有节点。多个&nbsp;class&nbsp;可的选择可使用空格分隔，与顺序无关。<br>var&nbsp;elements&nbsp;=&nbsp;element.getElementsByClassName(&quot;className&quot;);<br><br>NOTE：IE9&nbsp;及一下版本不支持&nbsp;getElementsByClassName<br>兼容方法<br><br>function&nbsp;getElementsByClassName(root,&nbsp;className)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;特性侦测<br>&nbsp;&nbsp;if&nbsp;(root.getElementsByClassName)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;优先使用&nbsp;W3C&nbsp;规范接口<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;root.getElementsByClassName(className);<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取所有后代节点<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;elements&nbsp;=&nbsp;root.getElementsByTagName(&quot;*&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;element&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;classNameStr&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;flag&nbsp;=&nbsp;null;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;className&nbsp;=&nbsp;className.split(&quot;&nbsp;&quot;);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;选择包含&nbsp;class&nbsp;的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;element;&nbsp;element&nbsp;=&nbsp;elements[i];&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;classNameStr&nbsp;=&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;element.getAttribute(&quot;class&quot;)&nbsp;+&nbsp;&quot;&nbsp;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag&nbsp;=&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;j&nbsp;=&nbsp;0,&nbsp;name;&nbsp;name&nbsp;=&nbsp;className[j];&nbsp;j++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(classNameStr.indexOf(&quot;&nbsp;&quot;&nbsp;+&nbsp;name&nbsp;+&nbsp;&quot;&nbsp;&quot;)&nbsp;===&nbsp;-1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag&nbsp;=&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(flag)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push(element);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result;<br>&nbsp;&nbsp;}<br>}<br><br>querySelector&nbsp;/&nbsp;querySelectorAll<br><br>获取一个&nbsp;list&nbsp;（其返回结果不会被之后&nbsp;DOM&nbsp;的修改所影响，获取后不会再变化）符合传入的&nbsp;CSS&nbsp;选择器的第一个元素或全部元素。<br>var&nbsp;listElementNode&nbsp;=&nbsp;element.querySelector(&quot;selector&quot;);<br>var&nbsp;listElementsNodes&nbsp;=&nbsp;element.querySelectorAll(&quot;selector&quot;);<br><br>var&nbsp;sampleSingleNode&nbsp;=&nbsp;element.querySelector(&quot;#className&quot;);<br>var&nbsp;sampleAllNodes&nbsp;=&nbsp;element.querySelectorAll(&quot;#className&quot;);<br>NOTE:&nbsp;IE9&nbsp;一下不支持&nbsp;querySelector&nbsp;与&nbsp;querySelectorAll<br><br><br>3、创建节点<br><br>创建节点&nbsp;-&gt;&nbsp;设置属性&nbsp;-&gt;&nbsp;插入节点<br>var&nbsp;element&nbsp;=&nbsp;document.createElement(&quot;tagName&quot;);<br><br><br>4、节点<br><br>textContent<br>获取或设置节点以及其后代节点的文本内容（对于节点中的所有文本内容）。<br>element.textContent;&nbsp;//&nbsp;获取<br>element.textContent&nbsp;=&nbsp;&quot;New&nbsp;Content&quot;;<br>NOTE：不支持&nbsp;IE&nbsp;9&nbsp;及其一下版本。<br><br>innerText&nbsp;（不符合&nbsp;W3C&nbsp;规范）<br>获取或设置节点以及节点后代的文本内容。其作用于&nbsp;textContent&nbsp;几乎一致。<br>element.innerText;<br><br>NOTE：不符合&nbsp;W3C&nbsp;规范，不支持&nbsp;FireFox&nbsp;浏览器。<br>FireFox&nbsp;兼容方案<br>if&nbsp;(!(&quot;innerText&quot;&nbsp;in&nbsp;document.body))&nbsp;{<br>&nbsp;&nbsp;HTMLElement.prototype.__defineGetter__(&quot;innerText&quot;,&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.textContent;<br>&nbsp;&nbsp;});<br>&nbsp;&nbsp;HTMLElement.prototype.__defineSetter__(&quot;innerText&quot;,&nbsp;function(s)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.textContent&nbsp;=&nbsp;s;<br>&nbsp;&nbsp;});<br>}<br><br><br>5、插入节点<br><br>appendChild<br><br>在指定的元素内追加一个元素节点。<br>var&nbsp;aChild&nbsp;=&nbsp;element.appendChild(aChild);<br>insertBefore<br><br>在指定元素的指定节点前插入指定的元素。<br>var&nbsp;aChild&nbsp;=&nbsp;element.insertBefore(aChild,&nbsp;referenceChild);<br><br><br>6、删除节点<br><br>删除指定的节点的子元素节点。<br>var&nbsp;child&nbsp;=&nbsp;element.removeChild(child);<br>innerHTML<br><br>获取或设置指定节点之中所有的&nbsp;HTML&nbsp;内容。替换之前内部所有的内容并创建全新的一批节点（去除之前添加的事件和样式）。innerHTML&nbsp;不检查内容，直接运行并替换原先的内容。<br><br>NOTE：只建议在创建全新的节点时使用。不可在用户可控的情况下使用。<br>var&nbsp;elementsHTML&nbsp;=&nbsp;element.innerHTML;<br>存在的问题<br>低版本&nbsp;IE&nbsp;存在内存泄露<br>安全问题（用户可以在名称中运行脚本代码）","addLink":"","date":"2016-01-07 18:32","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"属性操作","classify":"dom","addarticleContent":"1、HTML&nbsp;属性与&nbsp;DOM&nbsp;属性的对应<br><br>每个&nbsp;HTML&nbsp;属性都会对应相应的&nbsp;DOM&nbsp;对象属性。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;label&nbsp;for=&quot;username&quot;&gt;User&nbsp;Name:&nbsp;&lt;/label&gt;<br>&nbsp;&nbsp;&lt;input&nbsp;type=&quot;input&quot;&nbsp;name=&quot;username&quot;&nbsp;id=&quot;username&quot;&nbsp;class=&quot;text&quot;&nbsp;value=&quot;&quot;&gt;<br>&lt;/div&gt;<br>input.id;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br>input.type;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;text&quot;<br>input.className;&nbsp;//&nbsp;&quot;text&quot;<br><br>label.htmlFor;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br><br><br><br>2、属性操作方式<br><br>3、Property&nbsp;Accessor<br><br>通过属性方法符得到的属性为转换过的实例对象（并非全字符串）。<br>特点<br><br>X&nbsp;通用行差（命名异常，使用不同的命名方式进行访问）<br>X&nbsp;扩展性差<br>√&nbsp;实用对象（取出后可直接使用）<br><br>读取属性<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;label&nbsp;for=&quot;username&quot;&gt;User&nbsp;Name:&nbsp;&lt;/label&gt;<br>&nbsp;&nbsp;&lt;input&nbsp;type=&quot;input&quot;&nbsp;name=&quot;username&quot;&nbsp;id=&quot;username&quot;&nbsp;class=&quot;text&quot;&nbsp;value=&quot;&quot;&gt;<br>&lt;/div&gt;<br>input.className;&nbsp;//&nbsp;&quot;text&quot;<br>input[id];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br><br>写入属性<br><br>可增加新的属性或改写已有属性。<br>input.value&nbsp;=&nbsp;&quot;new&nbsp;value&quot;;<br>input[id]&nbsp;=&nbsp;&quot;new-id&quot;;<br><br><br><br>4、getAttribute&nbsp;/&nbsp;setAttribute<br><br>特点<br><br>X&nbsp;仅可获取字符串（使用时需转换）<br>√&nbsp;通用性强<br><br>读取属性<br><br>获取到的均为属性的字符串。<br>var&nbsp;attribtue&nbsp;=&nbsp;element.getAttribute(&quot;attributeName&quot;);<br><br>写入属性<br><br>可增加新的属性或改写已有属性。<br>element.setAttribute(&quot;attributeName&quot;,&nbsp;value);<br>dataset<br><br>自定义属性，其为&nbsp;HTMLElement&nbsp;上的属性也是&nbsp;data-*&nbsp;的属性集。主要用于在元素上保存数据。获取的均为属性字符串。数据通常使用&nbsp;AJAX&nbsp;获取并存储在节点之上。<br>&lt;div&nbsp;id=&quot;user&quot;&nbsp;data-id=&quot;1234&quot;&nbsp;data-username=&quot;x&quot;&nbsp;data-email=&quot;mail@gmail.com&quot;&gt;&lt;/div&gt;<br>div.dataset.id;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;1234&quot;<br>div.dataset.username;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;x&quot;<br>div.dataset.email;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;mail@gmail.com&quot;<br>NOTE：dataset&nbsp;在低版本&nbsp;IE&nbsp;不可使用，但可通过&nbsp;getAttribute&nbsp;与&nbsp;setAttribute&nbsp;来做兼容。","addLink":"","date":"2016-01-07 19:19","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"样式操作","classify":"dom","addarticleContent":"通过&nbsp;JavaScript&nbsp;动态修改页面样式。<br>CSS&nbsp;对应&nbsp;DOM&nbsp;对象<br><br><br><br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;sample.css&quot;&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;link&quot;);<br>//&nbsp;对应于&nbsp;element.sheet<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&nbsp;media=&quot;screen&quot;&gt;<br>&nbsp;&nbsp;body&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;30px<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;style&quot;);<br>//&nbsp;对应于&nbsp;element.sheet<br><br>//&nbsp;整个页面的全部样式（不包括行内样式）<br>document.styleSheets<br><br>&lt;p&nbsp;style=&quot;color:red&quot;&gt;Text&nbsp;Color&lt;/p&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;p&quot;);<br>//&nbsp;对应于&nbsp;element.style<br>内部样式表<br><br>&lt;style&gt;<br>&nbsp;&nbsp;body{margin:30;}<br>&nbsp;&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>&lt;/style&gt;<br><br>//&nbsp;1.对应所有样式的列表<br>//&nbsp;body{margin:30;}<br>//&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>element.sheet.cssRules;<br><br>//&nbsp;2.对应相应的&nbsp;CSS&nbsp;选择器<br>//&nbsp;p<br>element.sheet.cssRules[1].selectorText;<br><br>//&nbsp;3.对应一个样式<br>//&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>element.sheet.cssRules[1]<br><br>//&nbsp;4.对应所有样式的键值对<br>//&nbsp;color:&nbsp;#aaa;&nbsp;line-height:20px<br>element.sheet.cssRules[1].style;<br><br>//&nbsp;5.对应的属性值<br>//&nbsp;#aaa<br>element.sheet.cssRules[1].stlye.color;<br>element.sheet.cssRules[1].lineHeight;<br>行内样式<br><br>其对应于&nbsp;CSSStyleDeclaration&nbsp;的对象。<br>element.style.color;<br>//&nbsp;获取行内样式的键值对<br>更新样式<br><br>element.style<br><br>element.style.color&nbsp;=&nbsp;&quot;red&quot;;<br>element.style.background&nbsp;=&nbsp;&quot;black&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;style=&quot;color:&nbsp;red;&nbsp;background:&nbsp;black;&quot;&gt;&lt;/div&gt;<br>缺点<br><br>每个属性的更新都需要一个命令<br>命名异常（以驼峰命名法命名属性）<br>element.style.cssText<br><br>一次同时设置多个行内样式，其结果同&nbsp;element.style&nbsp;单独设置相同。<br>element.style.cssText&nbsp;=&nbsp;&quot;color:&nbsp;red;&nbsp;background:&nbsp;black&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;style=&quot;color:&nbsp;red;&nbsp;background:&nbsp;black;&quot;&gt;&lt;/div&gt;<br>以上两种方式均将样式混合在逻辑当中。<br>更新&nbsp;class<br><br>首先需要创建对应样式的&nbsp;CSS&nbsp;样式。<br>.angry&nbsp;{<br>&nbsp;&nbsp;color:&nbsp;red;<br>&nbsp;&nbsp;background:&nbsp;black;<br>}<br>然后再在&nbsp;JavaScript&nbsp;中，在对应的事件中给元素添加需要的类即可。<br>element.className&nbsp;+=&nbsp;&quot;&nbsp;angry&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;class=&quot;angry&quot;&gt;&lt;/div&gt;<br>统一更新多个元素样式<br><br>以上方法均不适合同时更新多个样式，通过更换样式表的方式则可同时更改多个页面中的样式。将需要的大量样式也在一个皮肤样式表中，通过&nbsp;JavaScript&nbsp;来直接更换样式表来进行样式改变。（此方法也可用于批量删除样式）<br><br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;base.css&quot;&gt;<br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;style1.css&quot;&gt;<br>element.setAttribute(&quot;href&quot;,&nbsp;&quot;style2.css&quot;);<br>获取样式<br><br>element.style<br><br>其对应的为元素的行内样式表而不是实际样式表。<br>&lt;input&nbsp;type=&quot;checkbox&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;<br>element.style.color;&nbsp;//&nbsp;&quot;&quot;<br>line-height:&nbsp;200px<br>window.getComputedStyle()<br><br>将需要取出样式的目标元素传入&nbsp;window.getComputedStyle()&nbsp;函数中，即可得到对应元素的实际样式。注意的是这里获取到的样式值为只读属性不可修改！<br>NOTE：获取的实际为&nbsp;CSSStyleDeclaration&nbsp;的实例对象。&nbsp;NOTE+：此方法不支持&nbsp;IE9&nbsp;以下版本，IE9&nbsp;中需使用&nbsp;element.currentStyle&nbsp;来做兼容。<br>var&nbsp;style&nbsp;=&nbsp;window.getComputedStyle(element[,&nbsp;pseudoEle]);<br>&lt;input&nbsp;type=&quot;checkbox&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;<br>window.getComputedStyle(element).color;&nbsp;//&nbsp;&quot;rgb(0,0,0)&quot;","addLink":"","date":"2016-01-07 19:38","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":3}]} ';
var dataJsonStr='{"html":[{"addArticleTtitle":"HTML简介","classify":"html","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;keywords&quot;&nbsp;content=&quot;音乐。。。&quot;&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;description&quot;&nbsp;content=&quot;网易。。。&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;网易云音乐&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;div&gt;222&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>&lt;!DOCTYPE&nbsp;html&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----------文档声明<br>&lt;head&gt;.....&lt;head&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----------文档头部<br>&lt;body&gt;......&lt;/body&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-----------文档主体<br><br>注意事项：<br>&lt;!DOCTYPE&nbsp;html&gt;&nbsp;必须首行定格<br>&lt;title&gt;&nbsp;为文档标题<br>&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;&nbsp;文档编码格式<br>&lt;meta&nbsp;name=&quot;keywords&quot;&nbsp;content=&quot;...&quot;&gt;&nbsp;和&nbsp;&lt;meta&nbsp;name=&quot;description&quot;&nbsp;content=&quot;...&quot;&gt;&nbsp;提供给搜索引擎使用<br>&lt;meta&nbsp;name=&quot;viewport&quot;&nbsp;content=&quot;width=device-width,&nbsp;initial-scale=1.0&quot;&gt;&nbsp;移动端浏览器的宽高与缩放<br>&lt;link&gt;&nbsp;标签可以引入&nbsp;favicon&nbsp;和样式表&nbsp;CSS&nbsp;文件","addLink":"","date":"2016-01-06 19:43","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"HTML标签","classify":"html","addarticleContent":"1、文档章节<br><br>&lt;body&gt;&nbsp;页面内容&nbsp;&lt;header&gt;&nbsp;文档头部&nbsp;&lt;nav&gt;&nbsp;导航&nbsp;&lt;aside&gt;&nbsp;侧边栏&nbsp;&lt;article&gt;&nbsp;定义外部内容（如外部引用的文章）&nbsp;&lt;section&gt;&nbsp;一个独立的块&nbsp;&lt;footer&gt;&nbsp;尾部<br><br><br><br>2、文本标签<br><br>&lt;!--&nbsp;默认超链接&nbsp;&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;当前窗口显示&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;_self&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;新窗口显示&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;_blacnk&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;iframe&nbsp;中打开链接&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;iframe-name&quot;&gt;Sample&lt;/a&gt;<br>&lt;iframe&nbsp;name=&quot;iframe-name&quot;&nbsp;frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;<br><br>&lt;!--&nbsp;页面中的锚点&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;#achor&quot;&gt;Achor&nbsp;Point&lt;/a&gt;<br>&lt;section&nbsp;id=&quot;achor&quot;&gt;Achor&nbsp;Content&lt;/section&gt;<br><br>&lt;!--&nbsp;邮箱及电话需系统支持&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br>&lt;!--&nbsp;多个邮箱地址&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com,&nbsp;sample-address0@me.com&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br>&lt;!--&nbsp;添加抄送，主题和内容&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com?cc=admin@me.com&subject=Help&body=sample-body-text&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br><br>&lt;!--&nbsp;电话示例&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;tel:99999999&quot;&nbsp;title=&quot;Phone&quot;&gt;Ring&nbsp;Us&lt;/a&gt;<br><br><br><br>3、组合内容标签<br><br>&lt;div&gt;<br>&lt;p&gt;<br>&lt;ol&gt;<br>&lt;ul&gt;<br>&lt;dl&gt;<br>&lt;pre&gt;<br>&lt;blockquote&gt;<br><br><br><br>4、引用<br><br>&lt;cite&gt;&nbsp;引用作品的名字、作者的名字等<br>&lt;q&gt;&nbsp;引用一小段文字（大段文字引用用&lt;blockquote&gt;）<br>&lt;blockquote&gt;&nbsp;引用大块文字<br>&lt;pre&gt;&nbsp;保存格式化的内容（其空格、换行等格式不会丢失）<br>&lt;pre&gt;<br>&nbsp;&nbsp;<br>&lt;/pre&gt;<br><br><br><br>5、代码<br>&lt;code&gt;&nbsp;引用代码<br><br><br><br>6、格式化<br><br>&lt;b&gt;&nbsp;加粗&nbsp;&lt;i&gt;&nbsp;斜体<br><br><br><br>7、强调<br><br>&lt;em&gt;&nbsp;斜体。着重于强调内容，会改变语义的强调&nbsp;&lt;strong&gt;&nbsp;粗体。着重于强调内容的重要性<br><br><br><br>8、换行<br><br>&lt;br&gt;&nbsp;换行<br><br><br><br>9、列表<br><br>无序列表<br>&lt;ul&gt;<br>&nbsp;&nbsp;&lt;li&gt;标题&lt;/li&gt;<br>&nbsp;&nbsp;&lt;li&gt;结论&lt;/li&gt;<br>&lt;/ul&gt;<br><br>有序列表<br>&lt;ol&gt;<br>&nbsp;&nbsp;&lt;li&gt;第一&lt;/li&gt;<br>&nbsp;&nbsp;&lt;li&gt;第二&lt;/li&gt;<br>&lt;/ol&gt;<br><br>自定义列表<br>&lt;dl&gt;<br>&nbsp;&nbsp;&lt;dt&gt;作者&lt;/dt&gt;<br>&nbsp;&nbsp;&lt;dd&gt;爱因斯坦&lt;/dd&gt;<br>&nbsp;&nbsp;&lt;dt&gt;作品&lt;/dt&gt;<br>&nbsp;&nbsp;&lt;dd&gt;《相对论》&lt;/dd&gt;<br>&nbsp;&nbsp;&lt;dd&gt;《时间与空间》&lt;/dd&gt;<br>&lt;/dl&gt;<br><br>一个&lt;dt&gt;可以对应多个&lt;dd&gt;<br>NOTE:&nbsp;&lt;dl&gt;&nbsp;为自定义列表，其中包含一个或多个&nbsp;&lt;dt&gt;&nbsp;及&nbsp;一个或多个&nbsp;&lt;dd&gt;，并且dt&nbsp;与&nbsp;dl列表会有缩进的效果。&lt;pre&gt;&nbsp;会保留换行和空格，通常与&nbsp;&lt;code&gt;&nbsp;一同使用。<br><br>&lt;pre&gt;<br>&nbsp;&nbsp;&lt;code&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;main(void)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&lt;/code&gt;<br>&lt;/pre&gt;<br><br>&lt;blockquote&gt;&nbsp;拥有&nbsp;cite&nbsp;属性，它包含引用文本的出处，示例如下所示：<br>&lt;blockquote&nbsp;cite=&quot;http://example.com/facts&quot;&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Quote...&lt;/p&gt;<br>&lt;/blockquote&gt;<br><br><br><br>10、嵌入<br><br>&lt;iframe&nbsp;src=&quot;&quot;&gt;&lt;/iframe&gt;&nbsp;页面操作可以不影响到iframe的内容<br><br>&lt;!--object&nbsp;embed通常用来嵌入外部资源&nbsp;--&gt;<br>&lt;object&nbsp;type=&quot;application/x-shockwave-player&quot;&gt;<br>&nbsp;&nbsp;&lt;param&nbsp;name=&quot;movie&quot;&nbsp;value=&quot;book.pdf&quot;&gt;<br>&lt;/object&gt;<br><br>&lt;!--视频&nbsp;track可以引入字幕&nbsp;autoplay可以使视频加载后自动播放，loop可以使其循环播放&nbsp;--&gt;<br>&lt;video&nbsp;autoplay&nbsp;loop&nbsp;controls=&quot;controls&quot;&nbsp;poster=&quot;poster.jpg&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.mp4&quot;&nbsp;type=&quot;video/mp4&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.webm&quot;&nbsp;type=&quot;video/webm&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.ogg&quot;&nbsp;type=&quot;video/ogg&quot;&gt;<br>&nbsp;&nbsp;&lt;track&nbsp;kind=&quot;subtitles&quot;&nbsp;src=&quot;video.vtt&quot;&nbsp;srclang=&quot;cn&quot;&nbsp;label=&quot;cn&quot;&gt;<br>&lt;/video&gt;<br><br><br><br>11、资源标签<br><br>图标签<br><br>canvas&nbsp;基于像素，性能要求比较高，可用于实时数据展示。svg&nbsp;为矢量图形图像。<br>热点区域标签<br><br>img中套用map以及area可以实现点击某部分图片触发一个链接，点击另一部分触发另一个链接<br>&lt;img&nbsp;src=&quot;mama.jpg&quot;&nbsp;width=100&nbsp;height=100&nbsp;usemap=&quot;#map&quot;&nbsp;/&gt;<br>&lt;map&nbsp;name=&quot;map&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;area&nbsp;shap=&quot;rect&quot;&nbsp;coords=&quot;0,0,50,50&quot;&nbsp;href=&quot;&quot;&nbsp;alt=&quot;&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;area&nbsp;shap=&quot;circle&quot;&nbsp;coords=&quot;75,75,25&quot;&nbsp;href=&quot;&quot;&nbsp;alt=&quot;&quot;&gt;<br>&lt;/map&gt;<br><br><br><br>12、表格<br><br>表格代码示例<br>&lt;table&gt;<br>&nbsp;&nbsp;&lt;caption&gt;table&nbsp;title&nbsp;and/or&nbsp;explanatory&nbsp;text&lt;/caption&gt;<br>&nbsp;&nbsp;&lt;thead&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;header&lt;/th&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&lt;/thead&gt;<br>&nbsp;&nbsp;&lt;tbody&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;data&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&lt;/tbody&gt;<br>&lt;/table&gt;<br>使用&nbsp;colspan=val&nbsp;进行跨列，使用&nbsp;rowspan=val&nbsp;进行跨行。<br><br><br><br>13、表单<br><br>&lt;form&nbsp;action=&quot;WebCreation_submit&quot;&nbsp;method=&quot;get&quot;&nbsp;accept-charset=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&lt;fieldset&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;legend&gt;title&nbsp;or&nbsp;explanatory&nbsp;caption&lt;/legend&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;第一种添加标签的方法&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;&lt;input&nbsp;type=&quot;text/submit/hidden/button/etc&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;第二种添加标签的方法&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for=&quot;input-id&quot;&gt;Sample&nbsp;Label&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;id=&quot;input-id&quot;&gt;<br>&nbsp;&nbsp;&lt;/fieldset&gt;<br>&nbsp;&nbsp;&lt;fieldset&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;legend&gt;title&nbsp;or&nbsp;explanatory&nbsp;caption&lt;/legend&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;只读文本框&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;readonly&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;隐藏文本框，可提交影藏数据&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;hidden-info&quot;&nbsp;value=&quot;hiden-info-value&quot;&nbsp;hidden&gt;<br>&nbsp;&nbsp;&lt;/fieldset&gt;<br>&nbsp;&nbsp;&lt;button&nbsp;type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>&nbsp;&nbsp;&lt;button&nbsp;type=&quot;reset&quot;&gt;Reset&lt;/button&gt;<br>&lt;/form&gt;<br>使用fieldset可用于对表单进行分区<br>表单中的其他控件类型：<br>textarea&nbsp;（文本框）<br>select&nbsp;与&nbsp;option&nbsp;（下拉菜单可多选）<br><br><br><br><br>14、语义化<br><br>语义化（Semantic&nbsp;Tag）是指用合适的标签标识适当的内容，它可以起到搜索引擎优化（Search&nbsp;Engine&nbsp;Optimization），提高可访问性（例如盲人使用的屏幕阅读器），与此同时还可以提高代码的可读性。简而言之也就是在正确的地方使用正确的标签<br><br>","addLink":"","date":"2016-01-06 20:07","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1}],"css":[{"addArticleTtitle":"CSS语法","classify":"css","addarticleContent":"1、语法<br><br>/*&nbsp;选择器&nbsp;*/<br>.m-userlist&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;属性声明&nbsp;*/<br>&nbsp;&nbsp;margin:&nbsp;0&nbsp;0&nbsp;30px;<br>&nbsp;&nbsp;/*&nbsp;属性名:属性值;&nbsp;*/<br>}<br>.m-userlist&nbsp;.list&nbsp;{<br>&nbsp;&nbsp;position:&nbsp;relative;<br>&nbsp;&nbsp;height:&nbsp;100px;<br>&nbsp;&nbsp;overflow:&nbsp;hidden;<br>}<br><br><br>2、浏览器私有属性<br><br>Google&nbsp;Chrome,&nbsp;Safari&nbsp;(-webkit)<br>Firefox&nbsp;(-moz-)<br>IE&nbsp;(-ms-)<br>Opera&nbsp;(-o-)<br>.pic&nbsp;{<br>&nbsp;&nbsp;-webkit-transform:&nbsp;rotate(-3deg);<br>&nbsp;&nbsp;-ms-transform:&nbsp;rotate(-3deg);<br>&nbsp;&nbsp;transform:&nbsp;rotate(-3deg);<br>}<br><br>NOTE:&nbsp;使用&nbsp;http://pleeease.io/play/&nbsp;，CSS&nbsp;预处理器（Sass，Less，Stylus）或编辑器插件可自动添加浏览器厂商的私有属性前缀。<br><br><br>3、属性值语法<br><br>margin:&nbsp;[&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;auto&nbsp;]{1,4}<br>/*&nbsp;基本元素：&lt;length&gt;,&nbsp;&lt;percentage&gt;,&nbsp;auto*/<br>/*&nbsp;组合符号：[],&nbsp;|&nbsp;*/<br>/*&nbsp;数量符号：{1,4}&nbsp;*/<br><br>基本元素<br><br>关键字<br><br>auto<br>solid<br>bold<br>...<br>类型<br><br>基本类型<br>&lt;length&gt;<br>&lt;percentage&gt;<br>&lt;color&gt;<br>...<br><br>其他类型<br>&lt;padding-width&gt;<br>&lt;color-stop&gt;<br><br>符号<br>/<br>,<br>inherit,&nbsp;initial<br><br>组合符号<br><br>&lt;font-size&gt;&nbsp;&lt;font-family&gt;&nbsp;（&nbsp;&nbsp;两项必存，顺序毕遵）<br>合法：12px&nbsp;arial<br>不合法：2em<br>不合法：arial&nbsp;14px<br>&lt;length&gt;&&&lt;color&gt;&nbsp;(&&&nbsp;两项必存，顺序无碍)<br>合法：green&nbsp;2px<br>合法：1em&nbsp;orange<br>不合法：blue<br>underline&nbsp;||&nbsp;overline&nbsp;||&nbsp;line-through&nbsp;||&nbsp;blink&nbsp;(||&nbsp;至少选一，顺序无碍)<br>合法：underline<br>合法：overline&nbsp;underline<br>&lt;color&gt;&nbsp;|&nbsp;transparent（|&nbsp;只可选一，不可共存）<br>合法：orange<br>合法：transparent<br>不合法：orange&nbsp;transparent<br>bold&nbsp;[thin&nbsp;||&nbsp;&lt;length&gt;]（[]&nbsp;分组之用，视为整体）<br>合法：bold&nbsp;thin<br>合法：bold&nbsp;2em<br><br>数量符号<br><br>&lt;length&gt;（无则表示仅可出现一次）<br>合法：1px<br>合法：10em<br>不合法：1px&nbsp;2px<br>&lt;color-stop&gt;[,&nbsp;&lt;color-stop&gt;]+&nbsp;(+&nbsp;可出现一次或多次)<br>合法：#fff,&nbsp;red<br>合法：blue,&nbsp;green&nbsp;50%,&nbsp;gray<br>不合法：red<br>inset?&&&lt;color&gt;&nbsp;(?&nbsp;表示可选)<br>合法：inset&nbsp;orange<br>合法：red<br>&lt;length&gt;{2,4}&nbsp;({2,4}&nbsp;可出现次数和最少最多出现次数)<br>合法：1px&nbsp;2px<br>合法：1px&nbsp;2px&nbsp;3px<br>不合法:&nbsp;1px<br>不合法：1px&nbsp;2px&nbsp;3px&nbsp;4px&nbsp;5px<br>&lt;time&gt;[,&nbsp;&lt;time&gt;]*（*&nbsp;出现&nbsp;0&nbsp;次或多次）<br>合法：1s<br>合法：1s,4ms<br>&lt;time&gt;#（#&nbsp;出现一次或者多次，用,分隔）<br>合法：2s,&nbsp;4s<br>不合法：1s&nbsp;2s<br><br><br><br>4、@规则语法<br><br>@import&nbsp;&quot;subs.css&quot;;<br>@charset&nbsp;&quot;utf-8&quot;;<br>@media&nbsp;print&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;property:&nbsp;value&nbsp;*/<br>}<br>@keyframes&nbsp;fadein&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;property:&nbsp;value&nbsp;*/<br>}<br>@标示符&nbsp;内容;<br>@标示符&nbsp;内容{}<br>@规则<br><br>常用的规则<br>@media&nbsp;（用于响应式布局）<br>@keyframes&nbsp;（CSS&nbsp;动画的中间步骤）<br>@font-face&nbsp;（引入外部字体）<br><br>其他规则（不常用）<br>@import<br>@charset<br>@namespace<br>@page<br>@supports<br>@document","addLink":"","date":"2016-01-06 21:03","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"CSS选择器","classify":"css","addarticleContent":"选择器可被看做表达式，通过它可以选择相应的元素并应用不同的样式。<br>简单选择器<br>元素选择器<br>组合选择器<br>简单选择器<br><br>简单选择器可组合使用。<br><br><br>1、标签选择器<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;p&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>2、类选择器<br><br>.className&nbsp;以&nbsp;.&nbsp;开头，名称可包含字母，数字，-，_，但必须以字母开头。它区分大小写并可出现多次。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&nbsp;class=&quot;special&nbsp;bold&quot;&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;p&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;.special&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;orange;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;.bold&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;font-weight:&nbsp;bold;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>3、id&nbsp;选择器<br><br>#idName&nbsp;以&nbsp;#&nbsp;开头且只可出现一次，其命名要求于&nbsp;.className&nbsp;相同。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&nbsp;id=&quot;special&quot;&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;#special&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;red;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>4、通配符选择器<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;*&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>5、属性选择器<br><br>[attr]&nbsp;或&nbsp;[attr=val]&nbsp;来选择相应的元素。#nav{...}&nbsp;既等同于&nbsp;[id=nav]{...}。IE7+<br>[attr~=val]&nbsp;可选用与选择包含&nbsp;val&nbsp;属性值的元素，像class=&quot;title&nbsp;sports&quot;&nbsp;与&nbsp;class=&quot;sports&quot;。.sports{...}&nbsp;既等同于&nbsp;[class~=sports]{...}&nbsp;IE7+<br>[attr|=val]&nbsp;可以选择val开头及开头紧接-的属性值。IE7+<br>[attr^=val]&nbsp;可选择以val开头的属性值对应的元素，如果值为符号或空格则需要使用引号&nbsp;&quot;&quot;。IE7+<br>[attr$=val]&nbsp;可选择以val结尾的属性值对应的元素。IE7+<br>[attr*=val]&nbsp;可选择以包含val属性值对应的元素。IE7+<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;form&nbsp;action=&quot;&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;value=&quot;Xinyang&quot;&nbsp;disabled&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;password&quot;&nbsp;placeholder=&quot;Password&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;button&quot;&nbsp;value=&quot;Button&quot;&gt;<br>&nbsp;&nbsp;&lt;/form&gt;<br>&lt;/div&gt;<br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;[disabled]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color:&nbsp;orange;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;[type=button]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>6、伪类选择器<br><br>常用伪类选择器：<br>:link&nbsp;IE6+<br>:visited&nbsp;IE7+<br>:hover&nbsp;IE6中仅可用于链接<br>:active&nbsp;IE6/7中仅可用于链接<br>:enabled&nbsp;IE9+<br>:disabled&nbsp;IE9+<br>:checked&nbsp;IE9+<br>:first-child&nbsp;IE8+<br>:last-child&nbsp;IE9+<br>:nth-child(even)&nbsp;可为&nbsp;odd&nbsp;even&nbsp;或数字&nbsp;IE9+<br>:nth-last-child(n)&nbsp;n从&nbsp;0&nbsp;开始计算&nbsp;IE9+<br>:only-child&nbsp;仅选择唯一的元素&nbsp;IE9+<br>:only-of-type&nbsp;IE9+<br>:first-of-type&nbsp;IE9+<br>:last-of-type&nbsp;IE9+<br>:nth-of-type(even)&nbsp;IE9+<br>:nth-last-of-type(2n)&nbsp;IE9+<br><br>不常用伪类选择器：<br>:empty&nbsp;选中页面中无子元素的标签&nbsp;IE9+<br>:root&nbsp;选择&nbsp;HTML&nbsp;根标签&nbsp;IE9+<br>:not()&nbsp;参数为一般选择器&nbsp;IE9+<br>:target&nbsp;被锚点选中的目标元素&nbsp;IE9+<br>:lang()&nbsp;选中语言值为某类特殊值的元素&nbsp;IE7+<br><br>NOTE：element:nth-of-type(n)&nbsp;指父元素下第&nbsp;n&nbsp;个&nbsp;element&nbsp;元素，element:nth-child(n)&nbsp;指父元素下第&nbsp;n&nbsp;个元素且元素为&nbsp;element，若不是，选择失败。具体细节请在使用时查找文档。<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;a&nbsp;href=&quot;http://sample-site.com&quot;&nbsp;title=&quot;Sample&nbsp;Site&quot;&gt;Sample&nbsp;Site&lt;/a&gt;<br>&lt;/div&gt;<br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;/*&nbsp;伪类属性定义有顺序要求！&nbsp;*/<br>&nbsp;&nbsp;a:link&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;gray;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:visited&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:red;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:hover&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;green;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;鼠标悬停&nbsp;*/<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:active&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;orange;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;鼠标点击&nbsp;*/<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>7、其他选择器<br><br>伪元素选择器<br><br>注意与伪类学则器的区分。<br>::first-letter&nbsp;IE6+<br>::first-line&nbsp;IE6+<br>::before{content:&nbsp;&quot;before&quot;}&nbsp;需与&nbsp;content&nbsp;一同使用&nbsp;IE8+<br>::after{content:&nbsp;&quot;after&quot;}&nbsp;需与&nbsp;content&nbsp;一同使用&nbsp;IE8+<br>::selection&nbsp;被用户选中的内容（鼠标选择高亮属性）IE9+&nbsp;Firefox需用&nbsp;-moz&nbsp;前缀<br><br>组合选择器<br><br>后代选择器&nbsp;.main&nbsp;h2&nbsp;{...}，使用&nbsp;表示&nbsp;IE6+<br>子选择器&nbsp;.main&gt;h2&nbsp;{...}，使用&gt;表示&nbsp;IE7+<br>兄弟选择器&nbsp;h2+p&nbsp;{...}，使用+表示&nbsp;IE7+<br>h2~p&nbsp;{...}，使用~表示（此标签无需紧邻）IE7+<br><br>选择器分组<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>/*&nbsp;下面两组样式声明效果一致&nbsp;*/<br>h1&nbsp;{color:&nbsp;red;}<br>h2&nbsp;{color:&nbsp;red;}<br>h3&nbsp;{color:&nbsp;red;}<br><br>h1,&nbsp;h2,&nbsp;h3&nbsp;{color:&nbsp;red;}<br>&lt;/style&gt;<br><br><br>8、继承、优先、层级<br><br>9、继承<br><br>子元素继承父元素的样式，但并不是所有属性都是默认继承的。通过文档中的&nbsp;inherited:&nbsp;yes&nbsp;来判断属性是否可以自动继承。<br><br><br>自动继承属性：<br>color<br>font<br>text-align<br>list-style<br>...<br>非继承属性：<br>background<br>border<br>position<br>...<br><br><br>10、优先<br><br>CSS&nbsp;Specificity&nbsp;Calculator&nbsp;可以在这里找到。更多关于&nbsp;CSS&nbsp;优先级别的信息可以在这里找到（英文）。<br>计算方法：<br>a&nbsp;=&nbsp;行内样式<br>b&nbsp;=&nbsp;id&nbsp;选择器的数量<br>c&nbsp;=&nbsp;类、伪类的属性选择器的数量<br>d&nbsp;=&nbsp;标签选择器和伪元素选择器的数量<br><br>NOTE：从上到下优先级一次降低，且优先级高的样式会将优先级低的样式覆盖。大致公式（并不准确）如下。<br>value&nbsp;=&nbsp;a&nbsp;*&nbsp;1000&nbsp;+&nbsp;b&nbsp;*&nbsp;100&nbsp;+&nbsp;c&nbsp;*&nbsp;10&nbsp;+&nbsp;d<br><br>改变优先级<br><br>改变样式声明先后顺序<br>提升选择器优先级<br>!important（慎用）<br><br><br>11、层叠<br><br>层叠为相同属性根据优先级覆盖，如优先级相同则后面会覆盖前面的属性，而不同属性则会合并<br><br>","addLink":"","date":"2016-01-06 21:22","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"CSS样式---文本相关","classify":"css","addarticleContent":"1、字体<br><br>改变字号<br><br>font-size:&nbsp;&lt;absolute-size&gt;&nbsp;|&nbsp;&lt;relative-size&gt;&nbsp;|&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;inherit<br>&lt;absolute-size&gt;&nbsp;有&nbsp;small&nbsp;large&nbsp;medium<br>&lt;relative-size&gt;&nbsp;有&nbsp;smaller&nbsp;larger<br>div<br>&nbsp;&nbsp;font-size&nbsp;12px<br>&nbsp;&nbsp;p#sample0<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;16px<br>&nbsp;&nbsp;p#sample1<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;2em<br>&nbsp;&nbsp;p#sample2<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;200%<br><br>NOTE：以上两值在开发中并不常用。2em&nbsp;与&nbsp;200%&nbsp;都为父元素默认大小的两倍（参照物为父元素的字体大小&nbsp;12px）。<br><br>改变字体<br><br>font-family:&nbsp;[&nbsp;&lt;family-name&gt;&nbsp;|&nbsp;&lt;generic-family&gt;&nbsp;]#<br>&lt;generic-family&gt;&nbsp;可选选项，但具体使用字体由浏览器决定<br>serif<br>sans-serif<br>cursive<br>fantasy<br>monospace<br>font-family:&nbsp;arial,&nbsp;Verdana,&nbsp;sans-serif;<br><br>NOTE：优先使用靠前的字体<br><br>加粗字体<br><br>font-weight:&nbsp;normal&nbsp;|&nbsp;bold&nbsp;|&nbsp;bolder&nbsp;|&nbsp;lighter&nbsp;|&nbsp;100&nbsp;|&nbsp;200&nbsp;|&nbsp;300&nbsp;|&nbsp;400&nbsp;|&nbsp;500&nbsp;|&nbsp;600&nbsp;|&nbsp;700&nbsp;|&nbsp;800&nbsp;|&nbsp;900<br>font-weight:&nbsp;normal;<br>font-weight:&nbsp;bold;<br><br>倾斜字体<br><br>font-style:&nbsp;normal&nbsp;|&nbsp;italic&nbsp;|&nbsp;oblique&nbsp;|&nbsp;inherit<br>italic&nbsp;使用字体中的斜体，而&nbsp;oblique&nbsp;在没有斜体字体时强制倾斜字体。<br><br>更改行距<br><br>line-height:&nbsp;normal&nbsp;|&nbsp;&lt;number&gt;&nbsp;|&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;<br>normal&nbsp;值为浏览器决定，在1.1至1.2之间（通常设置值为1.14左右）<br>/*&nbsp;length&nbsp;类型&nbsp;*/<br>line-height:&nbsp;40px;<br>line-height:&nbsp;3em;<br>/*&nbsp;percentage&nbsp;类型&nbsp;*/<br>line-height:&nbsp;300%;<br>/*&nbsp;number&nbsp;类型&nbsp;*/<br>line-height:&nbsp;3;<br><br>NOTE：当line-height为&nbsp;number&nbsp;类型时，子类直接继承其数值（不计算直接继承）。&nbsp;而当为&nbsp;percentage&nbsp;类型时，子类则会先计算再显示（先计算后继承）。<br><br>字间距（字母间距）<br><br>letter-spacing:&nbsp;normal&nbsp;|&nbsp;&lt;length&gt;<br>其用于设置字间距或者字母间距，此属性适用于中文或西文中的字母。&nbsp;如果需要设置西文中词与词的间距或标签直接的距离则需要使用&nbsp;word-spacing。<br>word-spacing:&nbsp;normal&nbsp;|&nbsp;&lt;length&gt;<br>font&nbsp;shorthand<br><br>font:&nbsp;[&nbsp;[&nbsp;&lt;‘font-style’&gt;&nbsp;||&nbsp;&lt;font-variant-css21&gt;&nbsp;||&nbsp;&lt;‘font-weight’&gt;&nbsp;||&nbsp;&lt;‘font-stretch’&gt;&nbsp;]?&nbsp;&lt;‘font-size’&gt;&nbsp;[&nbsp;/&nbsp;&lt;‘line-height’&gt;&nbsp;]?&nbsp;&lt;‘font-family’&gt;&nbsp;]&nbsp;|&nbsp;caption&nbsp;|&nbsp;icon&nbsp;|&nbsp;menu&nbsp;|&nbsp;message-box&nbsp;|&nbsp;small-caption&nbsp;|&nbsp;status-bar<br>font:&nbsp;30px/2&nbsp;&quot;Consolas&quot;,&nbsp;monospace;<br>font:&nbsp;italic&nbsp;bold&nbsp;20px/1.5&nbsp;arial,&nbsp;serif;<br>font:&nbsp;20px&nbsp;arial,&nbsp;serif;<br><br>NOTE：当其他值为空时，均被设置为默认值。<br><br>改变文字颜色<br><br>color:&nbsp;&lt;color&gt;<br>element&nbsp;{&nbsp;color:&nbsp;red;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;#f00;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;#ff0000;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgb(255,0,0);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgb(100%,&nbsp;0%,&nbsp;0%);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;hsl(0,&nbsp;100%,&nbsp;50%);&nbsp;}<br><br>/*&nbsp;50%&nbsp;translucent&nbsp;*/<br>element&nbsp;{&nbsp;color:&nbsp;rgba(255,&nbsp;0,&nbsp;0,&nbsp;0.5);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;hsla(0,&nbsp;100%,&nbsp;50%,&nbsp;0.5);&nbsp;}<br><br>/*&nbsp;全透明&nbsp;*/<br>element&nbsp;{&nbsp;color:&nbsp;transparent&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgba(0,&nbsp;0,&nbsp;0,&nbsp;0);&nbsp;}<br><br><br><br>2、对齐方式<br><br>文字居中<br><br>text-align:&nbsp;start&nbsp;|&nbsp;end&nbsp;|&nbsp;left&nbsp;|&nbsp;right&nbsp;|&nbsp;center&nbsp;|&nbsp;justify&nbsp;|&nbsp;match-parent&nbsp;|&nbsp;start&nbsp;end<br><br>NOTE：默认为文本左对齐。<br><br>文本垂直对齐<br><br>vertical-align:&nbsp;baseline&nbsp;|&nbsp;sub&nbsp;|&nbsp;super&nbsp;|&nbsp;text-top&nbsp;|&nbsp;text-bottom&nbsp;|&nbsp;middle&nbsp;|&nbsp;top&nbsp;|&nbsp;bottom&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;&lt;length&gt;<br>NOTE：&lt;percentage&gt;的参照物为line-height<br><br>文本缩进<br><br>text-indent:&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;&&&nbsp;[&nbsp;hanging&nbsp;||&nbsp;each-line&nbsp;]<br>NOTE：缩进两个字可使用&nbsp;text-indent:&nbsp;2em;<br><br><br><br>3、格式处理<br><br>保留空格格式<br><br>white-space:&nbsp;normal&nbsp;|&nbsp;pre&nbsp;|&nbsp;nowrap&nbsp;|&nbsp;pre-wrap&nbsp;|&nbsp;pre-line<br>pre&nbsp;行为同&nbsp;&lt;pre&gt;&nbsp;一致。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;New&nbsp;lines&nbsp;&nbsp;Spaces&nbsp;and&nbsp;tabs&nbsp;&nbsp;Text&nbsp;wrapping<br>normal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>nowrap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No&nbsp;wrap<br>pre&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No&nbsp;wrap<br>pre-wrap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>pre-line&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>文字换行<br><br>word-wrap:&nbsp;normal&nbsp;|&nbsp;break-word<br><br>NOTE：允许长单词自动换行。<br><br>word-break:&nbsp;normal&nbsp;|&nbsp;break-all&nbsp;|&nbsp;keep-all<br><br>NOTE：break-all&nbsp;单词中的任意字母间都可以换行。<br><br><br><br>4、文本装饰<br><br>文字阴影<br><br>text-shadow:none&nbsp;|&nbsp;&lt;shadow-t&gt;#&nbsp;或&nbsp;text-shadow:none&nbsp;|&nbsp;[&lt;length&gt;{2,3}&&&lt;color&gt;?]#<br>p&nbsp;{<br>&nbsp;&nbsp;text-shadow:&nbsp;1px&nbsp;1px&nbsp;1px&nbsp;#000,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3px&nbsp;3px&nbsp;5px&nbsp;blue;<br>}<br>value&nbsp;=&nbsp;The&nbsp;X-coordinate&nbsp;X&nbsp;轴偏移像素<br>value&nbsp;=&nbsp;The&nbsp;Y-coordinate&nbsp;Y&nbsp;轴偏移像素<br>value&nbsp;=&nbsp;The&nbsp;blur&nbsp;radius&nbsp;阴影模糊半径<br>value&nbsp;=&nbsp;The&nbsp;color&nbsp;of&nbsp;the&nbsp;shadow&nbsp;阴影颜色（默认为文字颜色）<br><br>文本装饰（下划线等）<br><br>text-decoration:&nbsp;&lt;text-decoration-line&gt;&nbsp;||&nbsp;&lt;text-decoration-style&gt;&nbsp;||&nbsp;&lt;text-decoration-color&gt;<br>h1.under&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;underline;<br>}<br>h1.over&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;overline;<br>}<br>p.line&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;line-through;<br>}<br>p.blink&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;blink;<br>}<br>a.none&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;none;<br>}<br>p.underover&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;underline&nbsp;overline;<br>}<br><br><br><br>5、高级设置<br><br>省略字符<br><br>text-overflow:&nbsp;[&nbsp;clip&nbsp;|&nbsp;ellipsis&nbsp;|&nbsp;&lt;string&gt;&nbsp;]{1,2}<br>/*&nbsp;常用配合&nbsp;*/<br>text-overflow:&nbsp;ellipsis;<br>overflow:&nbsp;hidden;&nbsp;/*&nbsp;溢出截取&nbsp;*/<br>white-space:&nbsp;nowrap;&nbsp;/*&nbsp;禁止换行&nbsp;*/<br><br>更换鼠标形状<br><br>cursor:&nbsp;[[&lt;funciri&gt;,]*&nbsp;[&nbsp;auto&nbsp;|&nbsp;crosshair&nbsp;|&nbsp;default&nbsp;|&nbsp;pointer&nbsp;|&nbsp;move&nbsp;|&nbsp;e-resize&nbsp;|&nbsp;ne-resize&nbsp;|&nbsp;nw-resize&nbsp;|&nbsp;n-resize&nbsp;|&nbsp;se-resize&nbsp;|&nbsp;sw-resize&nbsp;|&nbsp;s-resize&nbsp;|&nbsp;w-resize|&nbsp;text&nbsp;|&nbsp;wait&nbsp;|&nbsp;help&nbsp;]]&nbsp;|&nbsp;inherit<br><br>常用属性<br><br>cursor:&nbsp;[&lt;uri&gt;,]*[auto&nbsp;|&nbsp;default&nbsp;|&nbsp;none&nbsp;|&nbsp;help&nbsp;|&nbsp;pointer&nbsp;|&nbsp;zoom-in&nbsp;|&nbsp;zoom-out&nbsp;|&nbsp;move]<br>&lt;uri&gt;&nbsp;图片资源地址代替鼠标默认形状<br>&lt;default&gt;&nbsp;默认光标<br>&lt;none&gt;&nbsp;隐藏光标<br>&lt;pointer&gt;&nbsp;手型光标<br>&lt;zoom-in&gt;<br>&lt;zoom-out&gt;<br>&lt;move&gt;<br>cursor:&nbsp;pointer;<br>cursor:&nbsp;url(image-name.cur),&nbsp;pointer;<br>/*&nbsp;当&nbsp;uri&nbsp;失效时或者则会起作用&nbsp;*/<br><br>强制继承<br><br>inherit&nbsp;会强制继承父元素的属性值。<br>font-size:&nbsp;inherit;<br>font-family:&nbsp;inherit;<br>font-weight:&nbsp;inherit;<br>...<br>word-wrap:&nbsp;inherit;<br>work-break:&nbsp;inherit<br>text-showdow:&nbsp;inherit<br><br>NOTE：具体在使用时可查询文档","addLink":"","date":"2016-01-07 10:30","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2}],"javascript":[{"addArticleTtitle":"JavaScript 介绍","classify":"javascript","addarticleContent":"前端开发三要素，HTML（描述网页内容），CSS（描述样式），JavaScript（控制网页行为）。JavaScript&nbsp;为解释型编程语（程序不需要编译，程序在运行时才翻译成机器语言，每执&nbsp;行一次都要翻译一次)，运行环境也很广泛（浏览器或操作系统中&nbsp;NodeJS）。<br>JavaScript&nbsp;又分为两部分，ECMAScript&nbsp;和&nbsp;DOM。其中&nbsp;JavaScript&nbsp;的基本的语言属性（例如，变量，作用域等）都在&nbsp;ECMAScript&nbsp;中有详细的定义好比汉子在字典中的定义。DOM&nbsp;中则定义如何修改文档结构（HTML&nbsp;或&nbsp;XML&nbsp;等）。<br>JavaScript的引入方法如下：<br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;title&gt;Demo&nbsp;Page&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;以上代码忽略&nbsp;--&gt;<br><br>&nbsp;&nbsp;&lt;!--&nbsp;为性能优化需将&nbsp;javascript&nbsp;代码放置在&nbsp;body&nbsp;标签的最末端&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;外联文件&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;src=&quot;/javascripts/application.js&quot;&nbsp;type=&quot;text/javascript&quot;&nbsp;charset=&quot;utf-8&quot;&nbsp;async&nbsp;defer&gt;&lt;/script&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;内嵌代码&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;document.write(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"","date":"2016-01-06 22:54","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"基础语法","classify":"javascript","addarticleContent":"1、变量标示符<br><br>变量的命名<br><br>var&nbsp;_name&nbsp;=&nbsp;null;<br>var&nbsp;$name&nbsp;=&nbsp;null;<br>var&nbsp;name0&nbsp;=&nbsp;null;<br><br><br><br>2、关键字与保留字<br><br>JavaScript&nbsp;在语言定义中保留的字段，这些字段在语言使用中存在特殊意义或功能，在程序编写的过程中不可以当做变量或函数名称使用。无需记忆，报错修改即可。<br>关键字与保留字可以在&nbsp;Mozilla&nbsp;开发者站点找到。<br><br><br><br>3、字符敏感<br><br>字符串的大小写是有所区分的，不同字符指代不同的变量。<br><br><br><br>4、严格模式<br><br>增益<br><br>消除语法中不合理与不安全的问题，保证代码正常运行<br>提高编译效率，增加运行速度<br><br>使用方法<br><br>&lt;!--&nbsp;全局使用&nbsp;严格&nbsp;模式&nbsp;--&gt;<br>&quot;use&nbsp;strict&quot;;<br>(function(){<br>&nbsp;&nbsp;console.log(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>})()<br><br>&lt;!--&nbsp;或者在函数内部声明使用&nbsp;严格&nbsp;模式&nbsp;--&gt;<br>(function(){<br>&nbsp;&nbsp;&quot;use&nbsp;strict&quot;;<br>&nbsp;&nbsp;console.log(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>})()<br><br>严格模式与标准模式的区别：<br><br>严格模式下隐式声明或定义变量被静止<br>严格模式下对象重名的属性在严格模式下被静止<br>严格模式下&nbsp;arguments.callee()&nbsp;被禁用<br>严格模式下&nbsp;with()&nbsp;语句<br>更多限制<br><br><br><br>5、注释<br><br>/*<br>&nbsp;&nbsp;多行注释，不可嵌套<br>&nbsp;*/<br><br>//&nbsp;单行注释","addLink":"","date":"2016-01-07 11:23","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"类型","classify":"javascript","addarticleContent":"1、javascript&nbsp;类型系统可以分为标准类型和对象类型，进一步标准类型又可以分为原始类型和引用类型，而对象类型又可以分为内置对象类型、普通对象类型、自定义对象类型。<br><br><br><br>2、标准类型<br><br>标准类型共包括了6个分别是：<br>原始类型（值类型）：<br>Undefined&nbsp;undefined<br>Null&nbsp;null<br>Boolean&nbsp;true<br>String&nbsp;&quot;hello&quot;<br>Number&nbsp;123<br><br><br><br>3、引用类型（对象类型）：<br><br>Object<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>&lt;!--&nbsp;原始类型变量的包装类型如下&nbsp;--&gt;<br>var&nbsp;bool&nbsp;=&nbsp;new&nbsp;Boolean(true);<br>var&nbsp;str&nbsp;=&nbsp;new&nbsp;String(&quot;hello&quot;);<br>var&nbsp;num&nbsp;=&nbsp;new&nbsp;Number(1);<br>var&nbsp;obj0&nbsp;=&nbsp;new&nbsp;Object();<br><br><br><br>4、原始类型和引用类型的区别：<br><br>原始类型储存在栈（Stack）中储存变量的值，而引用类型在栈中保存的是所引用内容储存在堆（Heap）中的值。类似于指针的概念，引用类型并非储存变量真实数值而是地址，所以对已引用类型的复制其实只是复制了相同的地址而非实际的变量值。<br><br>Undefined&nbsp;值：undefined&nbsp;出现场景：<br><br>以声明为赋值的变量&nbsp;var&nbsp;obj;<br>获取对象不存在的属性&nbsp;var&nbsp;obj&nbsp;=&nbsp;{x:&nbsp;0};&nbsp;obj.y;<br>无返回值函数的执行结果&nbsp;function&nbsp;f(){};&nbsp;var&nbsp;obj&nbsp;=&nbsp;f();<br>函数参数没有传入&nbsp;function&nbsp;f(i){console.log(i)};&nbsp;f();<br>void(expression)<br><br>Null&nbsp;值：null&nbsp;出现场景：<br><br>获取不存在的对象&nbsp;document.getElementById(&quot;not-exist-element&quot;)<br><br>Boolean&nbsp;值：true,&nbsp;false&nbsp;出现场景：<br><br>条件语句导致的系统执行的隐式类型转换&nbsp;if(隐式转换){}<br>字面量或变量定义&nbsp;var&nbsp;bool&nbsp;=&nbsp;true;<br><br>String&nbsp;值：字符串&nbsp;出现场景：<br><br>var&nbsp;str&nbsp;=&nbsp;&quot;Hello,&nbsp;world!&quot;;<br><br>Number&nbsp;值：整型直接量，八进制直接量（0-），十六进制直接量（0x-)，浮点型直接量&nbsp;出现场景：<br><br>1026<br>3.14<br>1.2e5<br>0x10<br><br>Object&nbsp;值：属性集合&nbsp;出现场景：<br><br>var&nbsp;obj&nbsp;=&nbsp;{name:&nbsp;&quot;Xinyang&quot;};<br><br><br><br>5、变量转换表<br><br>Value&nbsp;&nbsp;Boolean&nbsp;&nbsp;Number&nbsp;&nbsp;String<br>undefined&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;undefined&quot;<br>null&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;null&quot;<br>true&nbsp;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;1&nbsp;&nbsp;&quot;true&quot;<br>false&nbsp;&nbsp;f&nbsp;alse&nbsp;&nbsp;0&nbsp;&nbsp;&quot;false&quot;<br>&quot;&quot;&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;&quot;<br>&quot;123&quot;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;123&nbsp;&nbsp;&quot;123&quot;<br>&quot;1a&quot;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;1a&quot;<br>0&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;0&quot;<br>1&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;1&nbsp;&nbsp;&quot;1&quot;<br>Infinity&nbsp;&nbsp;true&nbsp;&nbsp;Infinity&nbsp;&nbsp;&quot;Infinity&quot;<br>NaN&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;NaN&quot;<br>{}&nbsp;&nbsp;true&nbsp;&nbsp;NaN&nbsp;&nbsp;&nbsp;&nbsp;&quot;[object&nbsp;Object]&quot;<br><br><br><br>6、类型识别<br><br>typeof<br>Object.prototype.toString<br>constructor<br>instanceof<br><br>typeof：<br>可以是标准类型（Null&nbsp;除外）<br>不可识别具体的对象类型（Function&nbsp;除外）<br>Object.prototype.toString：<br>可是识别标准类型及内置对象类型（例如，Object,&nbsp;Date,&nbsp;Array）<br>不能识别自定义对象类型<br><br>constructor：<br>可以识别标准类型（Undefined/Null&nbsp;除外）<br>可识别内置对象类型<br>可识别自定义对象类型<br>function&nbsp;getConstructiorName(obj)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;obj&nbsp;&&&nbsp;obj.constructor&nbsp;&&&nbsp;obj.constructor.toString().match(/function&#92;s*([^(]*)/)[1];<br>}<br>getConstructiorName([])&nbsp;===&nbsp;&quot;Array&quot;;&nbsp;//&nbsp;true<br><br>instanceof：<br>不可判别原始类型<br>可判别内置对象类型<br>可判别自定义对象类型<br>","addLink":"","date":"2016-01-07 11:34","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"类型识别","classify":"javascript","addarticleContent":"1、类型识别<br><br>typeof<br>Object.prototype.toString<br>constructor<br>instanceof<br><br>2、typeof：<br>可以是标准类型（Null&nbsp;除外）<br>不可识别具体的对象类型（Function&nbsp;除外）<br>Object.prototype.toString：<br>可是识别标准类型及内置对象类型（例如，Object,&nbsp;Date,&nbsp;Array）<br>不能识别自定义对象类型<br><br>3、constructor：<br>可以识别标准类型（Undefined/Null&nbsp;除外）<br>可识别内置对象类型<br>可识别自定义对象类型<br><br>4、function&nbsp;getConstructiorName(obj)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;obj&nbsp;&&&nbsp;obj.constructor&nbsp;&&&nbsp;obj.constructor.toString().match(/function&#92;s*([^(]*)/)[1];<br>}<br>getConstructiorName([])&nbsp;===&nbsp;&quot;Array&quot;;&nbsp;//&nbsp;true<br><br>5、instanceof：<br>不可判别原始类型<br>可判别内置对象类型<br>可判别自定义对象类型<br>JavaScript的数据类型可以分为：标准类型和对象类型。<br>标准类型有：undefined&nbsp;Null&nbsp;Boolean&nbsp;Date&nbsp;Number&nbsp;Object<br>对象类型（构造器类型）：Boolean&nbsp;Date&nbsp;Number&nbsp;Object&nbsp;Array&nbsp;Date&nbsp;Error&nbsp;Function&nbsp;RegExp<br><br>6、用来判断数据类型的一般有四种方式，分别是：<br>typeof<br>Prototype.toString()<br>constructor<br>instanceof<br><br>7、下面我们写一个HTML来检验一下：<br><br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;JavaScript类型判断&lt;/title&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.red{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color:red;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Standard&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;a;&nbsp;&nbsp;&nbsp;&nbsp;//undefined<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;b&nbsp;=&nbsp;document.getElementById(&quot;no_exist_element&quot;);&nbsp;//null<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;c&nbsp;=&nbsp;true;&nbsp;&nbsp;&nbsp;&nbsp;//Boolean<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;d&nbsp;=&nbsp;1;&nbsp;&nbsp;&nbsp;&nbsp;//Number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;&quot;str&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//String<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;f&nbsp;=&nbsp;{name&nbsp;:&nbsp;&quot;Tom&quot;};&nbsp;&nbsp;&nbsp;&nbsp;//Object<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Object&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;g&nbsp;=&nbsp;new&nbsp;Boolean(true);&nbsp;&nbsp;&nbsp;&nbsp;//Boolean&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;h&nbsp;=&nbsp;new&nbsp;Number(1);&nbsp;&nbsp;&nbsp;&nbsp;//Number&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;i&nbsp;=&nbsp;new&nbsp;String(&quot;str&quot;);&nbsp;&nbsp;&nbsp;&nbsp;//String&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;j&nbsp;=&nbsp;new&nbsp;Object({name&nbsp;:&nbsp;&quot;Tom&quot;});&nbsp;//Object&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;k&nbsp;=&nbsp;new&nbsp;Array([1,&nbsp;2,&nbsp;3,&nbsp;4]);&nbsp;&nbsp;&nbsp;&nbsp;//Array&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;l&nbsp;=&nbsp;new&nbsp;Date();&nbsp;&nbsp;&nbsp;&nbsp;//Date&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;m&nbsp;=&nbsp;new&nbsp;Error();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;n&nbsp;=&nbsp;new&nbsp;Function();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;o&nbsp;=&nbsp;new&nbsp;RegExp(&quot;&#92;&#92;d&quot;);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Self-Defined&nbsp;Object&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Use&nbsp;the&nbsp;Prototype.toString()&nbsp;to&nbsp;judge&nbsp;the&nbsp;type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;type(obj){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Object.prototype.toString.call(obj).slice(8,&nbsp;-1).toLowerCase();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&nbsp;border=&quot;1&quot;&nbsp;cellspacing=&quot;0&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;typeof&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;toString&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;constructor&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;instanceof&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;undefined&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;a)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(a))&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(a.constructor)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(a&nbsp;instanceof&nbsp;&quot;undefined&quot;)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Null&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;b);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(b));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(b.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(b&nbsp;instanceof&nbsp;&quot;null&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Boolean&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;c);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(c));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(c.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(c&nbsp;instanceof&nbsp;&quot;boolean&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Number&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;d);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(d));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(d.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(d&nbsp;instanceof&nbsp;&quot;number&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;String&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;e);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(e));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(e.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(e&nbsp;instanceof&nbsp;&quot;string&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;f);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(f));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(f.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(f&nbsp;instanceof&nbsp;&quot;object&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&lt;td&nbsp;colspan=&quot;5&quot;&gt;-----------------------&lt;/td&gt;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Boolean&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;g);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(g));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(g.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(g&nbsp;instanceof&nbsp;Boolean);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Number&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;h);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(h));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(h.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(h&nbsp;instanceof&nbsp;Number);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;String&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;i);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(i));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(i.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(i&nbsp;instanceof&nbsp;String);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Object&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;j);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(j));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(j.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(j&nbsp;instanceof&nbsp;Object);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Array&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;k);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(k));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(k.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(k&nbsp;instanceof&nbsp;Array);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Date&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;l);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(l));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(l.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(l&nbsp;instanceof&nbsp;Date);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Error&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;m);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(m));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(m.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(m&nbsp;instanceof&nbsp;Error);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Function&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;n);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(n));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(n.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(n&nbsp;instanceof&nbsp;Function);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;RegExp&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;o);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(o));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(o.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(o&nbsp;instanceof&nbsp;RegExp);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&lt;td&nbsp;colspan=&quot;5&quot;&gt;-----------------------&lt;/td&gt;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Point&nbsp;Objct&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;p);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(p));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(p.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(p&nbsp;instanceof&nbsp;Point);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>","addLink":"","date":"2016-01-07 12:32","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"内置对象","classify":"javascript","addarticleContent":"通常情况下只有对象才存在方法，但&nbsp;JavaScript&nbsp;不同它具有12种内置对象。内置对象又分为两类，普通对象（属性和方法）与构造器对象（可用于实例化普通对象，它还包含原型对象属性和方法，及实例对象属性和方法）。<br><br>1、JavaScript&nbsp;对象原型链的简要说明<br><br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>p.move(2,2);<br><br>__proto__&nbsp;称之为原型链，有如下特点：<br>__proto__&nbsp;为对象内部的隐藏属性<br>__proto__&nbsp;为实例化该对象的构造器的&nbsp;prototype&nbsp;对象的引用，因此可以直接方法&nbsp;prototype&nbsp;的所有属性和方法<br>除了&nbsp;Object&nbsp;每个对象都有一个&nbsp;__proto__&nbsp;属性且逐级增长形成一个链，原型链顶端是一个&nbsp;Object&nbsp;对象。<br>在调用属性或方法时，引擎会查找自身的属性如果没有则会继续沿着原型链逐级向上查找，直到找到该方法并调用。<br>__proto__&nbsp;跟浏览器引擎实现相关，不同的引擎中名字和实现不尽相同(chrome、firefox中名称是&nbsp;__proto__&nbsp;，并且可以被访问到，IE中无法访问)。基于代码兼容性、可读性等方面的考虑，不建议开发者显式访问&nbsp;__proto__&nbsp;属性或通过&nbsp;__proto__更改原型链上的属性和方法，可以通过更改构造器prototype&nbsp;对象来更改对象的&nbsp;__proto__&nbsp;属性。<br><br><br><br>2、构造器对象与普通对象的区别<br><br>1、构造器对象原型链中的&nbsp;__proto__&nbsp;是一个&nbsp;Function.prototype&nbsp;对象的引用，因此可以调用&nbsp;Function.prototype的属性及方法<br>2、构造器对象本身有一个&nbsp;prototype&nbsp;属性，用该构造器实例化对象时该&nbsp;prototype&nbsp;会被实例对象的&nbsp;__proto__&nbsp;所引用<br>3、构造器对象本身是一个&nbsp;function&nbsp;对象，因此也会有自身属性<br><br><br><br>3、标准内置对象<br><br>构造器对象<br>Object<br>Boolean<br>String<br>Number<br>Function<br>Array<br>RegExp<br>Date<br>Error<br><br>其他对象<br><br>Math<br>JSON<br><br>全局对象<br><br>内置对象，其实也叫内置构造器，它们可以通过&nbsp;new&nbsp;的方式创建一个新的实例对象。内置对象所属的类型就叫内置对象类型。其声明方式如下：<br>var&nbsp;i&nbsp;=&nbsp;new&nbsp;String(&quot;str&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;String&nbsp;Object<br>var&nbsp;h&nbsp;=&nbsp;new&nbsp;Number(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Number&nbsp;Object<br>var&nbsp;g&nbsp;=&nbsp;new&nbsp;Boolean(true);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Boolean&nbsp;Object<br>var&nbsp;j&nbsp;=&nbsp;new&nbsp;Object({name&nbsp;:&nbsp;&quot;Tom&quot;});&nbsp;//&nbsp;Object&nbsp;Object<br>var&nbsp;k&nbsp;=&nbsp;new&nbsp;Array([1,&nbsp;2,&nbsp;3,&nbsp;4]);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Array&nbsp;Object<br>var&nbsp;l&nbsp;=&nbsp;new&nbsp;Date();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Date&nbsp;Object<br>var&nbsp;m&nbsp;=&nbsp;new&nbsp;Error();<br>var&nbsp;n&nbsp;=&nbsp;new&nbsp;Function();<br>var&nbsp;o&nbsp;=&nbsp;new&nbsp;RegExp(&quot;&#92;&#92;d&quot;);<br><br>注意：虽然标准类型中有Boolean&nbsp;String&nbsp;Number&nbsp;Object，内置对象类型中也有Boolean&nbsp;String&nbsp;Number&nbsp;Object，但它们其实是通过不同的声明方式来进行区别的。标准类型通过直接赋值，而对象类型则是通过构造器实现初始化。<br><br><br><br>4、Object<br><br>构造器的原型对象在对象实例化时将会被添加到实例对象的原型链当中。&nbsp;__proto__&nbsp;为原型链属性，编码时不可被显像调用。但是实例化对象可以调用原型链上的方法。<br>用&nbsp;String/Number&nbsp;等构造器创建的对象原型链顶端对象始终是一个Object对象，因此这些对象可以调用Object的原型对象属性和方法。所以&nbsp;String/Number&nbsp;等构造器是&nbsp;Object&nbsp;的子类。<br>更多关于&nbsp;Object&nbsp;的内容可以在这里找到。<br><br>构造器说明：<br>Object&nbsp;是属性和方法的集合<br>String/Number/Boolean/Array/Date/Error&nbsp;构造器均为&nbsp;Object&nbsp;的子类并集成&nbsp;Object&nbsp;原型对象的属性及方法。<br>实例化方法<br>var&nbsp;obj0&nbsp;=&nbsp;new&nbsp;Object({name:&nbsp;&quot;X&quot;,&nbsp;age:&nbsp;13});<br>//&nbsp;常用方法<br>var&nbsp;obj1&nbsp;=&nbsp;{name:&nbsp;&quot;Q&quot;,&nbsp;age:&nbsp;14};<br>属性及方法<br>prototype<br>create<br>keys<br>...<br>**原型对象属性及其方法<br>constructor<br>toString<br>valueOf<br>hasOwnProperty<br>...<br>实例对象属性及方法<br>无<br><br>Object.create<br><br>功能：基于原型对象创造新对象<br>//&nbsp;Object.create(prototype[,&nbsp;propertiesObject])<br>var&nbsp;prototype&nbsp;=&nbsp;{name:&nbsp;&quot;X&quot;,&nbsp;age:&nbsp;13};<br>var&nbsp;obj&nbsp;=&nbsp;Object.create(proto);<br>Object.prototype.toString<br><br>功能：获取方法调用者的标准类型<br>//&nbsp;objectInstance.toString()<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>obj.toString();&nbsp;//&nbsp;Object<br>Object.prototype.hasOwnProperty<br><br>功能：判断一个属性是否是一个对象的自身属性<br>//&nbsp;objectInstance.hasOwnProperty(&quot;propertyName&quot;)<br>var&nbsp;obj&nbsp;=&nbsp;Object.create({a:&nbsp;1,&nbsp;b:&nbsp;2});<br>obj.c&nbsp;=&nbsp;3;<br>obj.hasOwnProperty(&quot;a&quot;);&nbsp;//&nbsp;false<br>obj.hasOwnProperty(&quot;c&quot;);&nbsp;//&nbsp;true<br>Boolean<br><br>构造器说明：值为&nbsp;true&nbsp;与&nbsp;false<br>属性及方法<br>prototype<br>**原型对象属性及其方法<br>constructor,&nbsp;toString,&nbsp;valueOf<br>String<br><br>构造器说明：单双引号内的字符串<br>实例化方法<br>&quot;Hello,&nbsp;world!&quot;<br>var&nbsp;str0&nbsp;=&nbsp;&quot;Xinyang&quot;;<br>var&nbsp;str1&nbsp;=&nbsp;new&nbsp;String(&quot;Xinyang&quot;);<br>属性及方法<br>prototype<br>fromCharCode（转换&nbsp;ASCII&nbsp;代码为字符）<br>原型对象属性及其方法<br>constructor<br>indexOf<br>replace<br>slice<br>split<br>charCodeAt<br>toLowerCase<br>...<br>String.prototype.indexOf<br><br>功能：获取子字符串在字符串中的索引<br>//&nbsp;stringObject.indexOf(searchValue,&nbsp;fromIndex)<br>var&nbsp;str&nbsp;=&nbsp;&quot;I&nbsp;am&nbsp;X.&nbsp;From&nbsp;China!&quot;;<br>var&nbsp;index&nbsp;=&nbsp;str.indexOf(&quot;a&quot;);&nbsp;//&nbsp;2<br>str.indexOf(&quot;a&quot;,&nbsp;index&nbsp;+&nbsp;1);&nbsp;//&nbsp;16<br>str.indexOf(&quot;Stupid&quot;);&nbsp;//&nbsp;-1&nbsp;字符串不存在<br>String.prototype.replace<br><br>功能：查找字符串替换成目标文字<br>//&nbsp;stringObject.replace(regexp/substr,&nbsp;replacement)<br>var&nbsp;str&nbsp;=&nbsp;&quot;apple&nbsp;is&nbsp;bad&quot;;<br>str&nbsp;=&nbsp;str.replace(&quot;bad&quot;,&nbsp;&quot;awesome&quot;);<br>String.prototype.split<br><br>功能：按分隔符将分隔符分成字符串数组<br>//&nbsp;stringObject.split(separator,&nbsp;arrayLength)<br>var&nbsp;str&nbsp;=&nbsp;&quot;1&nbsp;2&nbsp;3&nbsp;4&quot;;<br>str.split(&quot;&nbsp;&quot;);&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;];<br>str.split(&quot;&nbsp;&quot;,&nbsp;3);&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;];<br>str.split(/&#92;d+/);&nbsp;//&nbsp;[&quot;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&quot;]<br>Number<br><br>构造器说明：整型直接量，八进制直接量（0-），十六进制直接量（0x-)，浮点型直接量<br>实例化方法<br>10<br>1.2e5<br>var&nbsp;count&nbsp;=&nbsp;0x10;<br>var&nbsp;pi&nbsp;=&nbsp;new&nbsp;Number(3.1415);<br>属性及方法<br>prototype<br>MAX_VALUE<br>MIN_VALUE<br>NaN<br>NEGATIVE_INFINITY<br>POSITIVE_INFINITY<br>原型对象属性及其方法<br>constructor<br>toFixed<br>toExponential<br>...<br>Number.prototype.toFixed<br><br>功能：四舍五入至指定小数位<br>//&nbsp;numberObject.toFixed(num)<br>var&nbsp;num0&nbsp;=&nbsp;3.14;<br>num0.toFixed(1);&nbsp;//&nbsp;3.1<br>var&nbsp;num1&nbsp;=&nbsp;3.35;<br>num1.toFixed(1);&nbsp;//&nbsp;3.4<br>Array<br><br>构造器说明：定义数组对象<br>实例化方法<br>var&nbsp;a0&nbsp;=&nbsp;[1,&nbsp;&quot;abc&quot;,&nbsp;true,&nbsp;function(){}];<br>var&nbsp;a1&nbsp;=&nbsp;new&nbsp;Array();<br>var&nbsp;a2&nbsp;=&nbsp;new&nbsp;Array(1,&nbsp;&quot;abc&quot;,&nbsp;true);<br>属性及方法<br>prototype<br>isArray<br>原型对象属性及其方法<br>constructor<br>splice<br>forEach<br>find<br>concat<br>pop<br>push<br>reverse<br>shift<br>slice<br>...<br>Array.prototype.splice<br><br>功能：从数组中删除或添加元素，返回被删除的元素列表（作用域原有数组）<br>//&nbsp;arrayObject.splice(start,&nbsp;deleteCount[,&nbsp;item1[,&nbsp;item2[,&nbsp;...]]])<br>var&nbsp;arr&nbsp;=&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;a&quot;,&nbsp;&quot;b&quot;,&nbsp;&quot;6&quot;];<br>var&nbsp;ret&nbsp;=&nbsp;arr.splice(2,&nbsp;2,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;,&nbsp;&quot;5&quot;);&nbsp;//&nbsp;[&quot;a&quot;,&nbsp;&quot;b&quot;]<br>arr;&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;,&nbsp;5&quot;,&nbsp;&quot;6&quot;]<br>Array.prototype.forEach<br><br>功能：遍历元素组并调用回调函数<br>//&nbsp;arrayObject.forEach(callback[,&nbsp;thisArg])<br>//&nbsp;回调函数<br>//&nbsp;function&nbsp;callback(value,&nbsp;index,&nbsp;arrayObject)&nbsp;{...}<br>//&nbsp;value&nbsp;-&nbsp;当前值&nbsp;index&nbsp;-&nbsp;当前索引&nbsp;arrayObject&nbsp;-&nbsp;数组本身<br>function&nbsp;logArray(value,&nbsp;index,&nbsp;arrayObject)&nbsp;{<br>&nbsp;&nbsp;console.log(value);<br>&nbsp;&nbsp;console.log(value&nbsp;===&nbsp;array[index]);<br>}<br>[2,&nbsp;5,&nbsp;6,&nbsp;9].forEach(logArray);<br>Function<br><br>构造器说明：定义函数或新增对象构造器<br>实例化方法<br>//&nbsp;对象实例化<br>var&nbsp;f0&nbsp;=&nbsp;new&nbsp;Function(&quot;i&quot;,&nbsp;&quot;j&quot;,&nbsp;&quot;return&nbsp;(i&nbsp;+&nbsp;j)&quot;);<br>//&nbsp;函数关键字语句<br>function&nbsp;f1(i,&nbsp;j){return&nbsp;i&nbsp;+&nbsp;j;}<br>//&nbsp;函数表达式<br>var&nbsp;f3&nbsp;=&nbsp;function(i,&nbsp;j){return&nbsp;i&nbsp;+&nbsp;j;};<br>属性及方法<br>prototype<br>原型对象属性及其方法<br>constructor<br>apply<br>call<br>bind<br>实例对象属性和方法<br>length<br>prototype<br>arguments<br>caller<br>自定义对象构造器<br><br>下面的代码声明一个&nbsp;Point&nbsp;增加了一个move方法，最后创建了一个&nbsp;Point&nbsp;的实例对象。<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;2);<br>Function.prototype.apply<br><br>功能：通过参数指定调用者和函数参数并执行该函数<br>//&nbsp;functionObj.apply(thisArg[,&nbsp;argsArray])<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;1,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br>p.move.apply(circle,&nbsp;[2,&nbsp;1]);&nbsp;//&nbsp;{x:&nbsp;3,&nbsp;y:&nbsp;2,&nbsp;r:&nbsp;1}<br>Function.prototype.bind<br><br>功能：通过参数指定函数调用者和函数参数并返回该函数的引用<br>//&nbsp;functionObj.bind(thisArg[,&nbsp;arg1[,&nbsp;arg2[,&nbsp;...]]])<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;1,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br>var&nbsp;circleMoveRef&nbsp;=&nbsp;p.move.bind(circle,&nbsp;2,&nbsp;1);<br>setTimeout(circleMoveRef,&nbsp;1000);&nbsp;//&nbsp;{x:&nbsp;3,&nbsp;y:&nbsp;2,&nbsp;r:&nbsp;1}<br><br>//&nbsp;之间使用&nbsp;circleMoveRef()&nbsp;效果等同于&nbsp;apply()<br>circleMoveRef();<br>子类构造器<br><br>function&nbsp;Circle(x,&nbsp;y,&nbsp;r)&nbsp;{<br>&nbsp;&nbsp;Point.apply(this,&nbsp;[x,&nbsp;y]);<br>&nbsp;&nbsp;this.radius&nbsp;=&nbsp;r;<br>}<br>Circle.prototype&nbsp;=&nbsp;Object.create(Point.prototype);<br>Circle.prototype.constructor&nbsp;=&nbsp;Circle;<br>Circle.prototype.area&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;return&nbsp;Math.PI&nbsp;*&nbsp;this.radius&nbsp;*&nbsp;this.radius;<br>}<br><br>var&nbsp;c&nbsp;=&nbsp;new&nbsp;Circle(1,&nbsp;2,&nbsp;3);<br>c.move(2,&nbsp;2);<br>c.area();<br>函数调用<br><br>()<br>apply<br>call<br>函数参数<br><br>形参个数不一定等于实参个数<br>值专递<br>通过参数类型检查实现函数重载<br>arguments<br><br>arguments&nbsp;的常用属性<br>length&nbsp;实参个数<br>0...arguments.length-1&nbsp;实参属性名称（key）<br>callee&nbsp;函数本身<br>function&nbsp;max(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(max.length&nbsp;===&nbsp;arguments.length)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a&gt;b?a:b;<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;_max&nbsp;=&nbsp;arguments[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;arguments.length;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(_max&nbsp;&lt;&nbsp;arguments[i])&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_max&nbsp;=&nbsp;arguments[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_max;<br>&nbsp;&nbsp;}<br>}<br>值专递<br><br>函数参数的值专递是参数复制都是栈内存中的复制。<br><br>//&nbsp;原始类型<br>function&nbsp;plusplus(num)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;num++;<br>}<br>var&nbsp;count&nbsp;=&nbsp;0;<br>var&nbsp;result&nbsp;=&nbsp;plusplus(count);&nbsp;//&nbsp;result&nbsp;=&nbsp;1;&nbsp;count&nbsp;=&nbsp;0;<br><br>//&nbsp;引用类型<br>function&nbsp;setName(obj)&nbsp;{<br>&nbsp;&nbsp;obj.name&nbsp;=&nbsp;&quot;obama&quot;;<br>}<br>var&nbsp;president&nbsp;=&nbsp;{name:&nbsp;&quot;bush&quot;};<br>setName(president);&nbsp;//&nbsp;{name:&nbsp;&quot;obama&quot;};<br>函数重载<br><br>以&nbsp;Require.JS&nbsp;中的&nbsp;define()&nbsp;为例：<br>define(function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>define([&quot;lib&quot;],&nbsp;function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>define(&quot;math&quot;,&nbsp;[&quot;lib&quot;],&nbsp;function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>//&nbsp;define&nbsp;的实现代码<br>/**<br>&nbsp;*&nbsp;The&nbsp;function&nbsp;that&nbsp;handles&nbsp;definitions&nbsp;of&nbsp;modules.&nbsp;Differs&nbsp;from<br>&nbsp;*&nbsp;require()&nbsp;in&nbsp;that&nbsp;a&nbsp;string&nbsp;for&nbsp;the&nbsp;module&nbsp;should&nbsp;be&nbsp;the&nbsp;first&nbsp;argument,<br>&nbsp;*&nbsp;and&nbsp;the&nbsp;function&nbsp;to&nbsp;execute&nbsp;after&nbsp;dependencies&nbsp;are&nbsp;loaded&nbsp;should<br>&nbsp;*&nbsp;return&nbsp;a&nbsp;value&nbsp;to&nbsp;define&nbsp;the&nbsp;module&nbsp;corresponding&nbsp;to&nbsp;the&nbsp;first&nbsp;argument&quot;s<br>&nbsp;*&nbsp;name.<br>&nbsp;*/<br>define&nbsp;=&nbsp;function&nbsp;(name,&nbsp;deps,&nbsp;callback)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;node,&nbsp;context;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//Allow&nbsp;for&nbsp;anonymous&nbsp;modules<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(typeof&nbsp;name&nbsp;!==&nbsp;&quot;string&quot;)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Adjust&nbsp;args&nbsp;appropriately<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback&nbsp;=&nbsp;deps;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deps&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//This&nbsp;module&nbsp;may&nbsp;not&nbsp;have&nbsp;dependencies<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!isArray(deps))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback&nbsp;=&nbsp;deps;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deps&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;省略以下代码<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...<br>};<br>RegExp<br><br>构造器说明：用于定义正则表达式，一个&nbsp;RegExp&nbsp;对象包含一个正则表达式和关联的标志<br>定义方法<br><br>/pattern/flags<br>new&nbsp;RegExp(pattern[,&nbsp;flags]);<br>属性及方法<br>prototype<br>原型对象属性及其方法<br>constructor<br>test<br>exec<br>...<br>RegExp.prototype.test<br><br>功能：使用正则表达式对字符串进行测试，并返回测试结果<br>//&nbsp;regexObj.text(str)<br>var&nbsp;reg&nbsp;=&nbsp;/^abc/i;<br>reg.test(&quot;Abc123&quot;);&nbsp;//&nbsp;true<br>reg.test(&quot;1Abc1234&quot;);&nbsp;//&nbsp;false<br>Date<br><br>构造器说明：用于定义日期对象<br>定义方法<br><br>var&nbsp;date0&nbsp;=&nbsp;new&nbsp;Date();<br>var&nbsp;date1&nbsp;=&nbsp;new&nbsp;Date(2014,&nbsp;3,&nbsp;1,&nbsp;7,&nbsp;1,&nbsp;1,&nbsp;100);<br>属性及方法<br>prototype<br>parse<br>now<br>...<br>原型对象属性及其方法<br>constructor<br>Date<br>getDate<br>getHours<br>setDate<br>setHours<br>...<br>标准内置对象<br><br>Math<br><br>对象说明：拥有属性和方法的单一对象主要用于数字计算<br>对象属性：<br>E<br>PI<br>SQRT2<br>...<br>对象方法：<br>floor<br>random<br>abs<br>max<br>cos<br>ceil<br>Math.floor<br><br>功能：向下取整<br>//&nbsp;Math.floor(num)<br>Math.floor(0.97);&nbsp;//&nbsp;0<br>Math.floor(5.1);&nbsp;//&nbsp;5<br>Math.floor(-5.1);&nbsp;//6<br>相似方法：ceil，round<br>Math.random<br><br>功能：返回&nbsp;0~1&nbsp;之间的浮点数<br>//&nbsp;Math.random()<br>Math.random();&nbsp;//&nbsp;0.14523562323461<br>JSON<br><br>对象说明：用于存储和交换文本信息<br>对象方法：<br>parse<br>stringify<br>JSON.stringify<br><br>功能：将&nbsp;JSON&nbsp;对象转换为字符转<br>//&nbsp;JSON.stringify(value[,&nbsp;replacer[,&nbsp;space]])<br>var&nbsp;json&nbsp;=&nbsp;{&quot;name&quot;:&nbsp;&quot;X&quot;};<br>JSON.stringify(json);&nbsp;//&nbsp;&quot;{&quot;name&quot;:&quot;X&quot;}&quot;<br>JSON.parse<br><br>功能：将&nbsp;JSON&nbsp;字符转转换为对象<br>//&nbsp;JSON.parse(text[,&nbsp;reviver])<br>var&nbsp;jsonStr&nbsp;=&nbsp;&quot;{&quot;name&quot;:&quot;X&quot;}&quot;;<br>JSON.parse(jsonStr);&nbsp;//&nbsp;{name:&nbsp;&quot;X&quot;}<br>全局对象<br><br>全局对象定义了一系列的属性和方法在编程过程中可以被之间调用。<br>属性：NaN，Infinity，undefined<br>方法：<br><br>parseInt<br>parseFloat<br>isNaN<br>isFinite<br>eval<br>处理&nbsp;URI&nbsp;方法：<br>encodedURIComponent<br>decodeURIComponent<br>encodedURI<br>decodeURI<br>构造器属性：<br>Boolean<br>String<br>Number<br>Object<br>Function<br>Array<br>Date<br>Error<br>...<br>对象属性：<br>Math<br>JSON<br>NaA<br><br>非数字值：表示错误或无意义的运算结果，NaN&nbsp;参与运算仍会返回&nbsp;NaA，且&nbsp;NaN&nbsp;不等于任何值，包括它本身。可以使用&nbsp;isNaN()&nbsp;判断运算结果的类型是否为&nbsp;NaN。<br>isNaN(NaN);&nbsp;//&nbsp;true<br>isNaN(4&nbsp;-&nbsp;&quot;2a&quot;);&nbsp;//&nbsp;true;<br>parseInt<br><br>功能：转换字符串成数字<br>//&nbsp;parseInt(string[,&nbsp;radix])<br>//&nbsp;radix&nbsp;-&nbsp;为进制数<br>parseInt(&quot;010&quot;);&nbsp;//&nbsp;10<br>parseInt(&quot;010&quot;,&nbsp;8)&nbsp;//&nbsp;8<br>parseInt(&quot;010&quot;,&nbsp;16)&nbsp;//&nbsp;16<br><br>parseInt(&quot;0x1f&quot;);&nbsp;//&nbsp;31<br>parseInt(&quot;0x1f&quot;,&nbsp;16);&nbsp;//&nbsp;31<br>parseInt(&quot;1f&quot;);&nbsp;//&nbsp;1<br>parseInt(&quot;1f&quot;,&nbsp;16);&nbsp;//&nbsp;31<br>eval<br><br>功能：计算字符串并执行其中的&nbsp;JavaScript&nbsp;代码（会带来安全性和代码逻辑问题，通常不建议使用）<br>//&nbsp;eval(string)<br>var&nbsp;res&nbsp;=&nbsp;&quot;{&quot;error&quot;:&nbsp;&quot;0&quot;,&nbsp;&quot;msg&quot;:&nbsp;&quot;OK&quot;};<br>var&nbsp;obj;<br>if&nbsp;(!JSON)&nbsp;{<br>&nbsp;&nbsp;obj&nbsp;=&nbsp;eval(&quot;(&quot;&nbsp;+&nbsp;res&nbsp;+&nbsp;&quot;)&quot;);<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;obj&nbsp;=&nbsp;JSON.parse(res);<br>}<br>encodedURIComponent<br><br>功能：将&nbsp;URI&nbsp;参数中的特殊字符，中文等作为&nbsp;URI&nbsp;的一部分进行编码<br>var&nbsp;uri&nbsp;=&nbsp;&quot;http://w3schools.com/my&nbsp;test.asp?name=ståle&car=saab&quot;;<br>var&nbsp;res&nbsp;=&nbsp;encodeURIComponent(uri);<br><br>//&nbsp;结果<br>//&nbsp;http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst%C3%A5le%26car%3Dsaab","addLink":"","date":"2016-01-07 14:58","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4},{"addArticleTtitle":"变量作用域","classify":"javascript","addarticleContent":"变量的作用域值的是变量的生命周期和作用范围（全局与局部作用域的区别）。<br>作用域介绍<br><br>静态作用域<br><br>静态作用域有称为词法作用域，即指其在编译的阶段就可以决定变量的引用。静态作用域只更变量定义的位置有关与代码执行的顺序无关。<br>var&nbsp;x&nbsp;=&nbsp;0;<br>function&nbsp;foo()&nbsp;{<br>&nbsp;&nbsp;alert(x);<br>}<br><br>function&nbsp;bar()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;20;<br>&nbsp;&nbsp;foo();<br>}<br><br>foo();<br><br><br>动态作用域<br><br>动态作用域的变量引用只可在程序运行时刻决定（其通常通过动态栈来进行管理）。<br>var&nbsp;x&nbsp;=&nbsp;0;<br>function&nbsp;foo()&nbsp;{<br>&nbsp;&nbsp;alert(x);<br>}<br><br>function&nbsp;bar()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;20;<br>&nbsp;&nbsp;foo();<br>}<br><br>foo();<br><br><br>JavaScript&nbsp;变量作用域<br><br>JavaScript&nbsp;（1）使用静态作用域，（2）其没有块级作用域（只有函数作用域，就是只有&nbsp;function&nbsp;用于可以定义作用域），（3）在&nbsp;ES5&nbsp;之作使用词法环境来管理作用域。<br>词法环境<br><br>组成<br><br>词法环境用来描述静态作用域的数据结构。它由环节记录和外部词法环境的引用组成。+<br><br>环境记录（record）（指形参，变量，函数等）<br>外部词法环境的引用（outer）<br>创建<br><br>在一段代码执行之前，先初始化词法环境。会被初始化的有：<br>形参<br>函数定义（创建函数对象，会保存当前作用域。见下图）<br>变量定义（所有初始化值均为&nbsp;undefined）<br><br>结构<br><br>var&nbsp;x&nbsp;=&nbsp;10;<br>function&nbsp;foo(y)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;z&nbsp;=&nbsp;30;<br>&nbsp;&nbsp;function&nbsp;bar(q)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y&nbsp;+&nbsp;z&nbsp;+&nbsp;q;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return&nbsp;bar;<br>}<br>var&nbsp;bar&nbsp;=&nbsp;foo(20);<br>bar(40);<br>全局词法作用域（初始化状态）<br><br>关于词法环境的问题<br><br>命名冲突<br><br>形参，函数定义，变量名称命名冲突。其中的优先级的排序如下：<br>函数定义&nbsp;&gt;&nbsp;形参&nbsp;&gt;&nbsp;变量<br>arguments&nbsp;的使用<br>为函数中定义好的变量。<br>函数表达式与函数定义的区别<br>函数表达式是在执行时才创建函数对象。<br>函数定义为在代码执行之前就进行创建的。<br>with&nbsp;语句<br><br>with&nbsp;会创造一个临时作用域。<br>var&nbsp;foo&nbsp;=&nbsp;&quot;abc&quot;;<br>with({<br>&nbsp;&nbsp;foo:&nbsp;&quot;bar&quot;;<br>})&nbsp;{<br>&nbsp;&nbsp;function&nbsp;f()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(foo);<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;(function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(foo);<br>&nbsp;&nbsp;})();<br>&nbsp;&nbsp;f();<br>}<br>try-catch&nbsp;句法<br><br>try&nbsp;{<br>&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;10;<br>&nbsp;&nbsp;throw&nbsp;new&nbsp;Error();<br>}&nbsp;catch&nbsp;(e)&nbsp;{<br>&nbsp;&nbsp;function&nbsp;f()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(e);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;(function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(e);<br>&nbsp;&nbsp;})();<br>&nbsp;&nbsp;f();<br>}<br>带名称的函数表达式<br><br>当一个函数表达式有了名称之后，JavaScript&nbsp;会创建一个新的词法环境。并在这个词法环境中用有一个属性&nbsp;A&nbsp;指向这个函数，同时这个属性&nbsp;A&nbsp;指向的函数是不可被修改的。<br>下面例子为不常规的写法<br>(function&nbsp;A(){<br>&nbsp;&nbsp;A&nbsp;=&nbsp;1;<br>&nbsp;&nbsp;alert(A);<br>})();","addLink":"","date":"2016-01-07 15:01","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":5},{"addArticleTtitle":"表达式与运算符","classify":"javascript","addarticleContent":"表达式<br><br>表达式为&nbsp;JavaScript&nbsp;的短语可执行并生成值。<br>1.7&nbsp;//&nbsp;字面量<br>&quot;1.7&quot;<br>var&nbsp;a&nbsp;=&nbsp;1;<br>var&nbsp;b&nbsp;=&nbsp;&quot;2&quot;;<br>var&nbsp;c&nbsp;=&nbsp;(1.7&nbsp;+&nbsp;a)&nbsp;*&nbsp;&quot;3&quot;&nbsp;-&nbsp;b<br>运算符<br><br>算数运算符&nbsp;（+&nbsp;-&nbsp;*&nbsp;/&nbsp;%）<br>关系运算符&nbsp;（&gt;&nbsp;&lt;&nbsp;==&nbsp;!=&nbsp;&gt;=&nbsp;&lt;=&nbsp;===&nbsp;!==)<br>逻辑运算符&nbsp;（!&nbsp;&&&nbsp;||）<br>位运算符&nbsp;（&&nbsp;|&nbsp;^&nbsp;~&nbsp;&lt;&lt;&nbsp;&gt;&gt;）<br>负值运算符&nbsp;（=）<br>条件运算符&nbsp;（?:）<br>逗号运算符&nbsp;（,）<br>对象运算符&nbsp;（new&nbsp;delete&nbsp;.&nbsp;[]&nbsp;instanceof）<br>===&nbsp;全等符号<br><br>全等运算符用于盘对左右两边的对象或值是否类型相同且值相等。<br>伪代码拆解<br>function&nbsp;totalEqual(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;类型相同)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;是引用类型)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;是同一引用)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;值类型<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;值相等)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;}<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;&quot;123&quot;;<br>var&nbsp;b&nbsp;=&nbsp;&quot;123&quot;;<br>var&nbsp;c&nbsp;=&nbsp;&quot;4&quot;;<br>var&nbsp;aObj&nbsp;=&nbsp;new&nbsp;String(&quot;123&quot;);<br>var&nbsp;bObj&nbsp;=&nbsp;new&nbsp;String(&quot;123&quot;);<br>var&nbsp;cObj&nbsp;=&nbsp;aObj;<br><br>a&nbsp;===&nbsp;aObj&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;false<br>aObj&nbsp;===&nbsp;bObj&nbsp;&nbsp;&nbsp;//&nbsp;false<br>aObj&nbsp;===&nbsp;cObj&nbsp;&nbsp;&nbsp;//&nbsp;true<br>a&nbsp;===&nbsp;b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;true<br>a&nbsp;===&nbsp;c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;false<br>==<br><br>==&nbsp;用于判断操作符两边的对象或值是否相等。<br>伪代码拆解<br>function&nbsp;equal(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;类型相同)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a&nbsp;===&nbsp;b;<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;类型不同<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Number(a)&nbsp;===&nbsp;Number(b);&nbsp;//&nbsp;优先转换数值类型<br>&nbsp;&nbsp;}<br>}<br>例子<br><br>&quot;99&quot;&nbsp;==&nbsp;99;&nbsp;//&nbsp;true<br>new&nbsp;String(&quot;99&quot;)&nbsp;==&nbsp;99;&nbsp;//&nbsp;true<br>true&nbsp;==&nbsp;1;&nbsp;//&nbsp;true<br>false&nbsp;==&nbsp;0;&nbsp;//&nbsp;true<br>&quot;&#92;n&#92;n&#92;n&quot;&nbsp;==&nbsp;//&nbsp;true<br>例外规则<br><br>null&nbsp;==&nbsp;undefined&nbsp;结果为真&nbsp;true<br>在有&nbsp;null/undefined&nbsp;参与的&nbsp;==&nbsp;运算是不进行隐式转换。<br>0&nbsp;==&nbsp;null;&nbsp;//&nbsp;false<br>null&nbsp;==&nbsp;false;&nbsp;//&nbsp;false<br>&quot;undefined&quot;&nbsp;==&nbsp;undefined;&nbsp;//&nbsp;false<br>!&nbsp;取反<br><br>!x&nbsp;用于表达&nbsp;x&nbsp;表达式的运行结果转换成布尔值（Boolean）之后取反的结果。!!x&nbsp;则表示取&nbsp;x&nbsp;表达式的运行结果的布尔值。<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>var&nbsp;a&nbsp;=&nbsp;!obj&nbsp;//&nbsp;false;<br>var&nbsp;a&nbsp;=&nbsp;!!obj&nbsp;//&nbsp;true;<br>&&&nbsp;逻辑与<br><br>x&nbsp;&&&nbsp;y&nbsp;如果&nbsp;x&nbsp;表达式的运行交过转换成&nbsp;Boolean&nbsp;值为&nbsp;false&nbsp;则不运行表达式&nbsp;y&nbsp;而直接返回&nbsp;x&nbsp;表达式的运行结果。相反，如果&nbsp;x&nbsp;表达式的运行交过转换成&nbsp;Boolean&nbsp;值为&nbsp;true&nbsp;则运行表达式&nbsp;y&nbsp;并返回&nbsp;y&nbsp;表达式的运行结果。<br>伪代码拆解<br>var&nbsp;ret&nbsp;=&nbsp;null;<br>if&nbsp;(!!(ret&nbsp;=&nbsp;x))&nbsp;{<br>&nbsp;&nbsp;return&nbsp;y;<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;return&nbsp;ret;<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;0&nbsp;&&&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;0<br>var&nbsp;b&nbsp;=&nbsp;1&nbsp;&&&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;2<br>||&nbsp;逻辑或<br><br>x&nbsp;||&nbsp;y&nbsp;如果&nbsp;x&nbsp;表达式的运行结果转换为&nbsp;Boolean&nbsp;值为&nbsp;true，则不运行&nbsp;表达式&nbsp;y&nbsp;而直接返回表达式&nbsp;x&nbsp;的运算结果。（与&nbsp;&&&nbsp;方式相反）<br>伪代码拆解<br>var&nbsp;ret&nbsp;=&nbsp;null;<br>if&nbsp;(!!(ret&nbsp;=&nbsp;x))&nbsp;{<br>&nbsp;&nbsp;return&nbsp;ret;<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;return&nbsp;y;<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;0&nbsp;||&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;2<br>var&nbsp;b&nbsp;=&nbsp;1&nbsp;||&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;1<br>元算符优先级（Operator&nbsp;Precedence）<br><br>+&nbsp;-&nbsp;*&nbsp;/&nbsp;高于&nbsp;&&<br>*&nbsp;/&nbsp;高于&nbsp;+&nbsp;-<br>&&&nbsp;高于&nbsp;?:<br>()&nbsp;内优先级高于之外<br>NOTE：和数学上的算术优先级类似，同级从左到右计算。如有疑问加上&nbsp;()&nbsp;既可解决优先级问题。<br>Precedence&nbsp;&nbsp;Operator&nbsp;type&nbsp;&nbsp;Associativity&nbsp;&nbsp;Individual&nbsp;operators<br>19&nbsp;&nbsp;Grouping&nbsp;&nbsp;n/a&nbsp;&nbsp;(&nbsp;…&nbsp;)<br>18&nbsp;&nbsp;Member&nbsp;Access&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;.&nbsp;…<br>Computed&nbsp;Member&nbsp;Access&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;[&nbsp;…&nbsp;]<br>new&nbsp;(with&nbsp;argument&nbsp;list)&nbsp;&nbsp;n/a&nbsp;&nbsp;new&nbsp;…&nbsp;(&nbsp;…&nbsp;)<br>17&nbsp;&nbsp;Function&nbsp;Call&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;(&nbsp;…&nbsp;)<br>new&nbsp;(without&nbsp;argument&nbsp;list)&nbsp;&nbsp;right-to-left&nbsp;&nbsp;new&nbsp;…<br>16&nbsp;&nbsp;Postfix&nbsp;Increment&nbsp;&nbsp;n/a&nbsp;&nbsp;…&nbsp;++<br>Postfix&nbsp;Decrement&nbsp;&nbsp;n/a&nbsp;&nbsp;…&nbsp;--<br>15&nbsp;&nbsp;Logical&nbsp;NOT&nbsp;&nbsp;right-to-left&nbsp;&nbsp;!&nbsp;…<br>Bitwise&nbsp;NOT&nbsp;&nbsp;right-to-left&nbsp;&nbsp;~&nbsp;…<br>Unary&nbsp;Plus&nbsp;&nbsp;right-to-left&nbsp;&nbsp;+&nbsp;…<br>Unary&nbsp;Negation&nbsp;&nbsp;right-to-left&nbsp;&nbsp;-&nbsp;…<br>Prefix&nbsp;Increment&nbsp;&nbsp;right-to-left&nbsp;&nbsp;++&nbsp;…<br>Prefix&nbsp;Decrement&nbsp;&nbsp;right-to-left&nbsp;&nbsp;--&nbsp;…<br>typeof&nbsp;&nbsp;right-to-left&nbsp;&nbsp;typeof&nbsp;…<br>void&nbsp;&nbsp;right-to-left&nbsp;&nbsp;void&nbsp;…<br>delete&nbsp;&nbsp;right-to-left&nbsp;&nbsp;delete&nbsp;…<br>14&nbsp;&nbsp;Multiplication&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;*&nbsp;…<br>Division&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;/&nbsp;…<br>Remainder&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;%&nbsp;…<br>13&nbsp;&nbsp;Addition&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;+&nbsp;…<br>Subtraction&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;-&nbsp;…<br>12&nbsp;&nbsp;Bitwise&nbsp;Left&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;&lt;&nbsp;…<br>Bitwise&nbsp;Right&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&gt;&nbsp;…<br>Bitwise&nbsp;Unsigned&nbsp;Right&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&gt;&gt;&nbsp;…<br>11&nbsp;&nbsp;Less&nbsp;Than&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;&nbsp;…<br>Less&nbsp;Than&nbsp;Or&nbsp;Equal&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;=&nbsp;…<br>Greater&nbsp;Than&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&nbsp;…<br>Greater&nbsp;Than&nbsp;Or&nbsp;Equal&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;=&nbsp;…<br>in&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;in&nbsp;…<br>instanceof&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;instanceof&nbsp;…<br>10&nbsp;&nbsp;Equality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;==&nbsp;…<br>Inequality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;!=&nbsp;…<br>Strict&nbsp;Equality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;===&nbsp;…<br>Strict&nbsp;Inequality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;!==&nbsp;…<br>9&nbsp;&nbsp;Bitwise&nbsp;AND&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&&nbsp;…<br>8&nbsp;&nbsp;Bitwise&nbsp;XOR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;^&nbsp;…<br>7&nbsp;&nbsp;Bitwise&nbsp;OR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;|&nbsp;…<br>6&nbsp;&nbsp;Logical&nbsp;AND&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&&&nbsp;…<br>5&nbsp;&nbsp;Logical&nbsp;OR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;||&nbsp;…<br>4&nbsp;&nbsp;Conditional&nbsp;&nbsp;right-to-left&nbsp;&nbsp;…&nbsp;?&nbsp;…&nbsp;:&nbsp;…<br>3&nbsp;&nbsp;Assignment&nbsp;&nbsp;right-to-left&nbsp;&nbsp;…&nbsp;=&nbsp;…<br>…&nbsp;+=&nbsp;…<br>…&nbsp;-=&nbsp;…<br>…&nbsp;*=&nbsp;…<br>…&nbsp;/=&nbsp;…<br>…&nbsp;%=&nbsp;…<br>…&nbsp;&lt;&lt;=&nbsp;…<br>…&nbsp;&gt;&gt;=&nbsp;…<br>…&nbsp;&gt;&gt;&gt;=&nbsp;…<br>…&nbsp;&=&nbsp;…<br>…&nbsp;^=&nbsp;…<br>…&nbsp;|=&nbsp;…<br>2&nbsp;&nbsp;yield&nbsp;&nbsp;right-to-left&nbsp;&nbsp;yield&nbsp;…<br>1&nbsp;&nbsp;Spread&nbsp;&nbsp;n/a&nbsp;&nbsp;...&nbsp;…<br>0&nbsp;&nbsp;Comma&nbsp;/&nbsp;Sequence&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;,&nbsp;…","addLink":"","date":"2016-01-07 15:04","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":6},{"addArticleTtitle":"语句","classify":"javascript","addarticleContent":"条件控制语句<br><br>其中expression可以使用整型，字符串，甚至表达式<br>if&nbsp;(expression0)&nbsp;{statement0}<br>else&nbsp;if&nbsp;(expression1)&nbsp;{statement1}<br>else&nbsp;{statement2}<br><br>//&nbsp;JavaScript&nbsp;中的&nbsp;case&nbsp;可以使用整型，字符串，甚至表达式<br>switch(persion.type)&nbsp;{<br>&nbsp;&nbsp;case&nbsp;&quot;teacher&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement1<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case&nbsp;&quot;student&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement2<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement3<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}<br>循环控制语句<br><br>while(expression)&nbsp;{statement}<br><br>//&nbsp;至少执行一次<br>do&nbsp;{statement}&nbsp;while(expression);<br><br>for&nbsp;(initialise;&nbsp;test_expresiion;&nbsp;increment)&nbsp;{statement}<br><br>//&nbsp;跳过下面代码并进入下一轮循环<br>continue;<br><br>//&nbsp;退出当前循环<br>break;<br>for-in<br><br>用于遍历对象的全部属性。<br>function&nbsp;Car(id,&nbsp;type,&nbsp;color)&nbsp;{<br>&nbsp;&nbsp;this.type&nbsp;=&nbsp;type;<br>&nbsp;&nbsp;this.color&nbsp;=&nbsp;color;<br>&nbsp;&nbsp;this.id&nbsp;=&nbsp;id;<br>}<br><br>var&nbsp;benz&nbsp;=&nbsp;new&nbsp;Car(&quot;benz&quot;,&nbsp;&quot;black&quot;,&nbsp;&quot;red&quot;);<br>Car.prototype.start&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.type&nbsp;+&nbsp;&quot;&nbsp;start&quot;);<br>}<br><br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>}<br><br>//&nbsp;输出结果<br>type:black<br>color:red<br>id:benz<br>start:function&nbsp;(){<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.type&nbsp;+&nbsp;&quot;&nbsp;start&quot;);<br>}<br><br>//&nbsp;-----------<br><br>//&nbsp;如不需原型对象上的属性可以使用&nbsp;hasOwnProperty<br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(benz.hasOwnProperty(key))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;输出结果<br>type:black<br>color:red<br>id:benz<br>如不需原型对象上的属性可以使用&nbsp;hasOwnProperty<br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(benz.hasOwnProperty(key))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>&nbsp;&nbsp;}<br>}<br>/*&nbsp;输出结果<br>type:black<br>color:red<br>id:benz&nbsp;*/<br>异常处理语句<br><br>try{<br>&nbsp;&nbsp;//&nbsp;statements<br>&nbsp;&nbsp;throw&nbsp;new&nbsp;Error();<br>catch(e){<br>&nbsp;&nbsp;//&nbsp;statements<br>}<br>finally{<br>&nbsp;&nbsp;//&nbsp;statements<br>}<br>with&nbsp;语句<br><br>with&nbsp;语句是&nbsp;JavaScript&nbsp;中特有的语句形式，它主要有两个作用：<br>其一，其用于缩短特定情况下必须书写的代码量。它可以暂时改变变量的作用域。<br>//&nbsp;使用&nbsp;with&nbsp;之前<br>(function(){<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;Math.cos(3&nbsp;*&nbsp;Math.PI)&nbsp;+&nbsp;Math.sin(Math.LN10);<br>&nbsp;&nbsp;var&nbsp;y&nbsp;=&nbsp;Math.tan(14&nbsp;*&nbsp;Math.E);<br>})();<br><br>//&nbsp;使用&nbsp;with<br>(function(){<br>&nbsp;&nbsp;with(Math)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;cos(3&nbsp;*&nbsp;PI)&nbsp;+&nbsp;sin(LN10);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;y&nbsp;=&nbsp;tan(14&nbsp;*&nbsp;E);<br>&nbsp;&nbsp;}<br>})();<br><br><br>其二，改变变量的作用域，将with语句中的对象添加至作用域链的头部。<br>frame[1].document.forms[0].name.value&nbsp;=&nbsp;&quot;&quot;;<br>frame[1].document.forms[0].address.value&nbsp;=&nbsp;&quot;&quot;;<br>frame[1].document.forms[0].email.value&nbsp;=&nbsp;&quot;&quot;;<br><br>with(frame[1].document.[0])&nbsp;{<br>&nbsp;&nbsp;name.value&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;address.value&nbsp;=&nbsp;&quot;&quot;<br>&nbsp;&nbsp;email.value&nbsp;=&nbsp;&quot;&quot;;<br>}<br>缺点就是导致&nbsp;JavaScript&nbsp;语句的可执行性下降，所以通常情况下因尽可能的避免使用。","addLink":"","date":"2016-01-07 15:08","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":7},{"addArticleTtitle":"闭包","classify":"javascript","addarticleContent":"闭包有函数和与其相关的引用环境的组合而成<br>闭包允许函数访问其引用环境中的变量（又称自由变量）<br>广义上来说，所有&nbsp;JavaScript&nbsp;的函数都可以成为闭包，因为&nbsp;JavaScript&nbsp;函数在创建时保存了当前的词法环境。<br>function&nbsp;add()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;i&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;return&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(i++);<br>&nbsp;&nbsp;}<br>}<br>var&nbsp;f&nbsp;=&nbsp;add();<br>f();<br>f();<br>闭包的应用<br><br>保存变量现场<br><br><br>//&nbsp;错误方法<br>var&nbsp;addHandlers&nbsp;=&nbsp;function(nodes)&nbsp;{<br>&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;len&nbsp;=&nbsp;nodes.length;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;nodes[i].onclick&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;正确方法<br>var&nbsp;addHandlers&nbsp;=&nbsp;function(nodes)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;helper&nbsp;=&nbsp;function(i)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;var&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;len&nbsp;=&nbsp;nodes.length;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;nodes[i].onclick&nbsp;=&nbsp;helper(i);<br>&nbsp;&nbsp;}<br>}<br>封装<br><br><br>//&nbsp;将&nbsp;observerList&nbsp;封装在&nbsp;observer&nbsp;中<br>var&nbsp;observer&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;observerList&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;function(obj)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observerList.push(obj);<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;empty:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observerList&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;getCount:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;observerList.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;get:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;observerList;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;};<br>})();","addLink":"","date":"2016-01-07 15:10","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":8},{"addArticleTtitle":"面向对象","classify":"javascript","addarticleContent":"程序设计方法<br><br>程序设计描述系统如何通过程序来实现的过程，其为一种设计方法与语言实现无关。常见的设计方法有面向流程与面向对象。<br>面向过程<br><br>以程序的过程为中心，采用自定而下逐步细化的方法来实现。常见的面向过程语言有&nbsp;C、Fortran、Pascall。<br><br>面向对象<br><br>将对象作为程序的基本单元，将程序分解为数据和操作的集合。常见的面向过程语言有&nbsp;smalltalk（也是&nbsp;Objective-C&nbsp;的父亲）、Java、C++。<br><br>概念<br><br>类（Class）、对象（Object）<br>属性（Property）、方法（Method）<br>基本特点<br><br>继承（Inheritance）<br>封装（Encapsulation）<br>多态（Polymorphism）<br>JavaScript&nbsp;面向对象<br><br>constructor<br><br>对象的构造器，也可称之为构造类型。<br>//&nbsp;使用&nbsp;new&nbsp;关键字创建<br>var&nbsp;o&nbsp;=&nbsp;new&nbsp;Object();<br>var&nbsp;a&nbsp;=&nbsp;new&nbsp;Array();<br>var&nbsp;d&nbsp;=&nbsp;new&nbsp;Date();<br>&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;object&nbsp;&nbsp;&nbsp;&nbsp;constructor<br><br>//&nbsp;使用直接量创建<br>var&nbsp;o&nbsp;=&nbsp;{name:&nbsp;&quot;Xinyang&quot;};<br>var&nbsp;a&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3];<br>自定义构造器<br><br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Person(&quot;Q&quot;,&nbsp;12,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>创建构造器的方法（3&nbsp;种）<br><br>function&nbsp;ClassName()&nbsp;{...}<br>var&nbsp;Class&nbsp;=&nbsp;function()&nbsp;{...}<br>var&nbsp;Class&nbsp;=&nbsp;new&nbsp;Function()<br>NOTE:&nbsp;并不是所有函数都可以被当成构造器，例如&nbsp;var&nbsp;o&nbsp;=&nbsp;new&nbsp;Math.min()。通常自定义的函数均可当做构造器来使用。内置对象的构造器也可被当做构造器。<br>NOTE+：如果构造器有返还值并为对象类型，则对象将被直接返回。<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;//&nbsp;!!!&nbsp;注意这里<br>&nbsp;&nbsp;return&nbsp;{};<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;X&quot;,&nbsp;13,&nbsp;new&nbsp;Date());<br>console.log(X.name);&nbsp;//&nbsp;undefined;<br>this<br><br>this&nbsp;在不同环境中指代的对象不同（this&nbsp;指代的值可在函数运行过程中发生改变）。<br>出现场景&nbsp;&nbsp;所指代值<br>全局环境&nbsp;&nbsp;全局对象（window&nbsp;在浏览器环境中时）<br>constructor&nbsp;&nbsp;创建的新实例对象<br>函数调用&nbsp;&nbsp;函数的调用者<br>new&nbsp;Function()&nbsp;&nbsp;全局对象<br>eval()&nbsp;&nbsp;调用上下文中的&nbsp;this<br>全局环境中<br><br>全局环境中&nbsp;this&nbsp;指代全局对象，既&nbsp;window&nbsp;在浏览器环境中。<br>//&nbsp;以下的所有&nbsp;this&nbsp;均指代全局对象<br>var&nbsp;a&nbsp;=&nbsp;10;<br>alert(this.a);<br><br>this.b&nbsp;=&nbsp;20;<br>alert(b);<br><br>c&nbsp;=&nbsp;30;<br>alert(this.c);<br>构造器中<br><br>构造器中的&nbsp;this&nbsp;指代的是即将被创建出的对象。<br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;下面的指代即将被创建的对象<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Person(&quot;Q&quot;,&nbsp;12,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>函数中<br><br>函数中的&nbsp;this&nbsp;指代函数的调用者。<br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;下面的指代即将被创建的对象<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;this.gretting&nbsp;=&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;!!!&nbsp;下面这个&nbsp;this&nbsp;指代调用它的对象，既上面的<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;上面的&nbsp;gretting&nbsp;左边的&nbsp;this，既为即将被创建的对象<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Hi,&nbsp;I&nbsp;am&nbsp;&quot;&nbsp;+&nbsp;this.name)<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>X.gretting();<br>NOTE:&nbsp;new&nbsp;Function(&quot;console.log(this)&quot;)&nbsp;中的&nbsp;this&nbsp;均指代全局对象。eval(&quot;console.log(this)&nbsp;则为调用上下文指代的&nbsp;this。<br>this&nbsp;实例<br><br>下面的例子使用&nbsp;apply&nbsp;与&nbsp;call。通过这两个方法来将一个对象中&nbsp;this&nbsp;指代的目标进行改变。<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>&nbsp;&nbsp;this.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>&nbsp;&nbsp;}<br>}<br><br>var&nbsp;point&nbsp;=&nbsp;new&nbsp;Point(0,&nbsp;0);<br>point.move(1,&nbsp;1);<br><br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;0,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br><br>//&nbsp;改变&nbsp;point&nbsp;中&nbsp;move&nbsp;方法&nbsp;this&nbsp;指代的对象至&nbsp;circle<br>point.move.apply(circle,&nbsp;[1,&nbsp;1]);<br>//&nbsp;同样可以用类似的&nbsp;call&nbsp;方法，区别为参数需依次传入<br>point.move.call(circle,&nbsp;1,&nbsp;1);<br><br>原型继承<br><br>使用原型（prototype）可以解决重复定义实例对象拥有的完全一致的属性或方法（既共享原型中的属性或方法）。<br>function&nbsp;Boss()&nbsp;{<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.tasks&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;this.title&nbsp;=&nbsp;&quot;Boss&quot;;<br>&nbsp;&nbsp;this.gretting&nbsp;=&nbsp;function()&nbsp;{console.log(&quot;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);};<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;中具有完全一致（不必唯一的属性或方法）<br>//&nbsp;并耗用内存的共享部分<br>//&nbsp;this.title&nbsp;与&nbsp;this.gretting<br>改造后的构造器<br>function&nbsp;Boss()&nbsp;{<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.tasks&nbsp;=&nbsp;[];<br>}<br>Boss.prototype&nbsp;=&nbsp;{<br>&nbsp;&nbsp;title:&nbsp;&quot;Boss&quot;,<br>&nbsp;&nbsp;gretting:&nbsp;function(){console.log(&quot;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);}<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;中具有完全一致（不必唯一的属性或方法）<br>//&nbsp;并耗用内存的共享部分<br>//&nbsp;this.title&nbsp;与&nbsp;this.gretting<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;拥有相同的原型&nbsp;Boss.prototype<br>原型链<br><br>使用原型继承的方法会产生原型链。JavaScript&nbsp;中对于对象的查找、修改和删除都是通过原型链来完成的。<br>判断属性是否为对象本身<br>objectName.hasOwnProperty(&quot;propertyName&quot;);<br>//&nbsp;返回布尔值&nbsp;true&nbsp;或&nbsp;false<br>属性查找<br><br>对象的属性查找会更随原型链依次查找，如果在当前环境中无法找到需要的属性则会继续向下一层原型中继续寻找。<br>属性修改<br><br>在&nbsp;JavaScript&nbsp;中对于对象属性的修改永远只修改对象自身的属性（不论是来源于对象本身还是对象的原型）。当创建当前对象不存在属性时（即便原型拥有此属性），也会为此对象增加改属性。<br>修改原型上的属性<br>修改原型属性会印象所有被创建出的对象现有的属性和方法。<br>ClassName.prototype.propertyName&nbsp;=&nbsp;&quot;new&nbsp;value&quot;;<br>ClassName.prototype.methodName&nbsp;=&nbsp;function(){...};<br>属性删除<br><br>delete&nbsp;objectName.propertyName&nbsp;只可删除对象自身的属性，无法删除对象的原型属性。<br>Object.create(proto[,&nbsp;propertiesObject])<br><br>其为ECMAScript&nbsp;5&nbsp;中提出的新建立对象的方式。在&nbsp;X&nbsp;中使用隐式的原型对象指向&nbsp;boss&nbsp;对象，并将其设为&nbsp;X&nbsp;对象的原型。<br>var&nbsp;boss&nbsp;=&nbsp;{<br>&nbsp;&nbsp;title:&nbsp;&quot;Boss&quot;,<br>&nbsp;&nbsp;gretting:&nbsp;function(){console.log(&quot;Hi,&nbsp;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);}<br>};<br><br>var&nbsp;X&nbsp;=&nbsp;Object.create(boss);<br>X.gretting();&nbsp;//&nbsp;Hi,&nbsp;I&nbsp;am&nbsp;a&nbsp;Boss!<br>低版本中实现&nbsp;Object.create&nbsp;功能<br>此种方式仍需使用&nbsp;ClassName.prototype&nbsp;的方式来实现。<br>var&nbsp;clone&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;F&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;return&nbsp;function(proto)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;F.prototype&nbsp;=&nbsp;proto;<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;F();<br>&nbsp;&nbsp;}<br>})();<br>面向对象的应用<br><br>全局变量<br><br>全局变量可在程序任意位置进行访问和修改的变量。滥用全局变量会导致，命名冲突，导致程序不稳定。<br>全局标量的三种定义方法：<br>var&nbsp;gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;。<br>window.gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;附加于&nbsp;window&nbsp;对象上<br>gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;不使用&nbsp;var&nbsp;关键字，也附加于&nbsp;windwo&nbsp;对象<br>NOTE：delete&nbsp;无法删除在代码最顶端定义的全局标量&nbsp;var&nbsp;globale<br>封装<br><br>信息隐藏可以保证程序的稳定，将内部信息进行隐藏。其他语言中可词用访问权限来实现封装的概念，像&nbsp;private、public。<br>JavaScript&nbsp;中的封装可使用函数的方法（闭包）。<br>//&nbsp;模拟&nbsp;private&nbsp;的属性<br>function&nbsp;ClassName(){<br>&nbsp;&nbsp;var&nbsp;_property&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.getProperty&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_property;<br>&nbsp;&nbsp;};<br>}<br><br>//&nbsp;模拟&nbsp;protected&nbsp;属性，使用人为约束规则<br>var&nbsp;pro&nbsp;=&nbsp;ClassName.prototype;<br>pro._protectedMethod&nbsp;=&nbsp;function(){...};<br>pro.publicMethod&nbsp;=&nbsp;function(){...};<br>继承<br><br>原型继承<br><br>原型继承的方式为&nbsp;JavaScript&nbsp;中固有的继承方式。<br>var&nbsp;proto&nbsp;=&nbsp;{<br>&nbsp;&nbsp;action1:&nbsp;function(){},<br>&nbsp;&nbsp;action2:&nbsp;function(){}<br>}<br><br>var&nbsp;obj&nbsp;=&nbsp;Object.create(proto);<br>在不支持&nbsp;EM5&nbsp;中的实现方法：<br>var&nbsp;clone&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;F&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;return&nbsp;function(proto)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;F.prototype&nbsp;=&nbsp;proto;<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;F();<br>&nbsp;&nbsp;}<br>})();<br>类继承<br><br>使用原型链继承的方式模拟其他语言类继承的特性。<br>function&nbsp;ClassA()&nbsp;{<br>&nbsp;&nbsp;ClassA.classMethod&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;ClassA.prototype.api&nbsp;=&nbsp;function(){};<br><br>&nbsp;&nbsp;function&nbsp;ClassB()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;ClassA.apply(this,&nbsp;argument);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;ClassB.prototype&nbsp;=&nbsp;new&nbsp;ClassA();<br>&nbsp;&nbsp;ClassB.prototype.constructor&nbsp;=&nbsp;ClassB;<br>&nbsp;&nbsp;ClassB.prototype.api&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;ClassA.prototype.api.apply(this,&nbsp;arguments);<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;ClassA&nbsp;为父类<br>//&nbsp;ClassB&nbsp;为子类<br><br>var&nbsp;b&nbsp;=&nbsp;new&nbsp;ClassB();<br>b.api();","addLink":"","date":"2016-01-07 15:13","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":9},{"addArticleTtitle":"正则表达式","classify":"javascript","addarticleContent":"正则表达式为标书字符串规则的表达式。下面为两个例子为在&nbsp;JavaScript&nbsp;中的使用，<br>/pattern/attrs<br>new&nbsp;RegExp(pattern,&nbsp;attrs)<br>锚点<br><br>锚点用于匹配一个位置，下列为常用的锚点<br>^&nbsp;起始的位置&nbsp;/^http/<br>$&nbsp;结尾的位置&nbsp;/&#92;.jpg$/<br>&#92;b&nbsp;单词边界<br>字符类<br><br>字符类用于匹配一类字符中的一个，下面为几个常用的例子，<br>[abc]&nbsp;可用于匹配&nbsp;a&nbsp;b&nbsp;还有&nbsp;c<br>[0-9]&nbsp;可用于匹配一个数字<br>[^0-9]&nbsp;可用于匹配一个非数字<br>[a-z]&nbsp;可用于匹配一个字母<br>.&nbsp;任意字符但换行符除外<br>元字符<br><br>元字符为具有特殊意义的字符。常见的有，<br>^,&nbsp;$,&nbsp;&#92;b<br>&#92;d&nbsp;用于匹配数字&nbsp;[0-9]<br>&#92;D&nbsp;用于匹配&nbsp;[^&#92;d]<br>&#92;s&nbsp;用于匹配空白符<br>&#92;S&nbsp;用于匹配非空白符&nbsp;[^&#92;s]<br>&#92;w&nbsp;用于匹配任意单词字符（例如程序中的变量字符）&nbsp;[A-Za-z0-9_]<br>&#92;W&nbsp;用于匹配非单词字符&nbsp;[^&#92;W]<br>量词<br><br>量词用于表现字符出现的次数。可用的连词如下，<br>{m,n}&nbsp;用于表示出现&nbsp;m&nbsp;到&nbsp;n&nbsp;次之间。<br>*&nbsp;用于表示出现&nbsp;0&nbsp;到无穷之间也就等同于&nbsp;{0,}<br>?&nbsp;用于表示出现&nbsp;0&nbsp;次到&nbsp;1&nbsp;次也等同于&nbsp;{0,1}<br>+&nbsp;用于表现出现&nbsp;1&nbsp;次以及一次以上也等同于&nbsp;{1,}<br>转移符<br><br>转义符需要在匹配的字符是元字符的时候使用。使用&nbsp;&#92;&nbsp;来进行转移即可。2<br><br>多选分支<br><br>多选分支用于表示或的概念。/thi(c|n)k/&nbsp;其又等同于&nbsp;/thi[cn]k/。其还可以用于匹配文件扩展名&nbsp;/&#92;.(png|jpg|jpeg|gif)$/&nbsp;。<br>常用方法<br><br>测试：regxObj.test(str)<br><br>其用于测试正则表达式与指定字符串是否匹配。<br>/123/.test(123);&nbsp;//&nbsp;true<br>/123/.test(111);&nbsp;//&nbsp;false<br>/123/.test(&quot;x123&quot;);&nbsp;//&nbsp;true<br>捕获<br><br>其用于保存所匹配到的字符串为后续开发所用。()&nbsp;可用于捕获，正则表达式再运行时会将其保存下来，(?:)&nbsp;则不予保存。<br>//&nbsp;str.match(regexp)<br>var&nbsp;url&nbsp;=&nbsp;&quot;http://www.google.com/query?test=li-xinyang#cool&quot;;<br>var&nbsp;reg&nbsp;=&nbsp;/(https?:)&#92;/&#92;/([^&#92;/]+)(&#92;/[^&#92;?]*)?(&#92;?[^#]*)?(#,*)?/;<br><br>var&nbsp;arr&nbsp;=&nbsp;url.match(reg);<br>var&nbsp;protocol&nbsp;=&nbsp;arr[1];<br>var&nbsp;host&nbsp;=&nbsp;arr[2];<br>var&nbsp;pathname&nbsp;=&nbsp;arr[3];<br>var&nbsp;search&nbsp;=&nbsp;arr[4];<br>var&nbsp;hash&nbsp;=&nbsp;arr[5];<br>搜索与替换<br><br>regexpObj.exec(str)&nbsp;可以提供更强大的检索，它可以提供更详尽的结果&nbsp;index&nbsp;也可以提供过程状态&nbsp;lastIndex。<br>str.replace(regex/substr,&nbsp;replacement)&nbsp;可以使用正则表达式来对字符串进行替换。","addLink":"","date":"2016-01-07 15:15","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":10}],"jquery":[{"addArticleTtitle":"特点：选择网页元素---模拟css选择元素","classify":"jquery","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;模拟css选择元素&lt;/title&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;src=&quot;jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;div1&quot;&nbsp;class=&quot;box&quot;&gt;div&lt;/div&gt;<br>&nbsp;&nbsp;&lt;span&nbsp;class=&quot;box&quot;&gt;span&lt;/span&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;div2&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;divdiv&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;pp&lt;/p&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#div1&quot;).css(&quot;background&quot;,&quot;red&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;div&quot;).css(&quot;background&quot;,&quot;green&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;.box&quot;).css(&quot;background&quot;,&quot;blue&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#div2&nbsp;p&quot;).css(&quot;background&quot;,&quot;red&quot;);<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>","addLink":"","date":"2016-01-06 23:07","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0}],"zepto":[],"git":[],"flex":[],"layout":[{"addArticleTtitle":"居中布局---实现父元素不定宽高、子元素水平居中的几种方法","classify":"layout","addarticleContent":"1.inline-block+text-align<br>特点：<br>&nbsp;&nbsp;兼容性好，给display:&nbsp;inline-block;做兼容（*display:inline;*zoom:1;）<br><br>后可以支持到IE6<br>实现方法：<br>&nbsp;&nbsp;.child1{display:&nbsp;inline-block;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.parent1{text-align:&nbsp;center;}<br><br>2.table+margin<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性：display:&nbsp;table&nbsp;IE8以上，如果想支持IE6、7可以把div换位table结<br><br>构<br>实现方法：<br>&nbsp;&nbsp;.child2{display:&nbsp;table;margin:&nbsp;0&nbsp;auto;&nbsp;background-color:&nbsp;black;}<br><br>3.absolute+transform&nbsp;<br>特点：<br>&nbsp;&nbsp;兼容性：transform&nbsp;IE9以上&nbsp;&nbsp;优点：设置position:&nbsp;absolute;的元素脱离文<br><br>档流，不影响其他子元素<br>实现方法：<br>&nbsp;&nbsp;.parent3{position:&nbsp;relative;}<br>&nbsp;&nbsp;.child3{position:&nbsp;absolute;left:&nbsp;50%;transform:translateX(-<br><br>50%);background-color:&nbsp;black;}<br><br>4.flex<br>特点：<br>&nbsp;&nbsp;兼容性：flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent4{display:&nbsp;flex;justify-content:center;}<br>&nbsp;&nbsp;.child4{background-color:&nbsp;black;}<br>","addLink":"<a href=&quot;./layout/demo1.html&quot;>以上实现方法Demo<a/>","date":"2016-01-05 00:14","author":"xxz","good":3,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"居中布局---实现父元素不定高度，子元素垂直居中的几种方法","classify":"layout","addarticleContent":"1.table-cell+vertical-align<br>特点：<br>&nbsp;&nbsp;兼容到IE8以上，如果想兼容IE6、7,把&nbsp;DIV改成table<br>实现方法：<br>&nbsp;&nbsp;.parent1{display:&nbsp;table-cell;vertical-align:&nbsp;middle;background-color:&nbsp;black;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child1{background-color:&nbsp;white;}&nbsp;<br><br>2.absolute+transform&nbsp;<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{position:&nbsp;relative;height:&nbsp;100px;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.child2{position:&nbsp;absolute;top:50%;&nbsp;transform:translateY(-50%);&nbsp;background-color:&nbsp;white;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;&nbsp;align-items:center;&nbsp;background-color:&nbsp;black;&nbsp;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child3{background-color:&nbsp;white;}<br>","addLink":"<a href=&quot;./layout/demo2.html&quot;>Demo<a/>","date":"2016-01-05 10:09","author":"xxz","good":1,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"居中布局---实现父元素不定宽高、子元素居中的几种方法","classify":"layout","addarticleContent":"1.inline-block+text-align+table-cell+vertical-align<br>特点：<br>&nbsp;&nbsp;兼容性好<br>实现方法：<br>&nbsp;&nbsp;.parent1{text-align:&nbsp;center;&nbsp;display:&nbsp;table-cell;vertical-align:&nbsp;middle;background-color:&nbsp;black;height:&nbsp;100px;width:&nbsp;100px;}<br>&nbsp;&nbsp;.child1{display:&nbsp;inline-block;&nbsp;background-color:&nbsp;white;}<br><br>2.absolute+transform<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{position:&nbsp;relative;height:&nbsp;100px;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.child2{position:&nbsp;absolute;top:50%;left:&nbsp;50%;&nbsp;transform:translate(-50%,-50%);&nbsp;background-color:&nbsp;white;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性：兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;justify-content:center;&nbsp;align-items:center;&nbsp;background-color:&nbsp;black;&nbsp;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child3{background-color:&nbsp;white;}","addLink":"<a href=&quot;./layout/demo3.html&quot;>Demo<a/>","date":"2016-01-05 10:19","author":"xxz","good":2,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"多列布局---实现一列定宽，一列自适应的几种方法","classify":"layout","addarticleContent":"1.float+margin<br>特点：<br>&nbsp;&nbsp;不足：当right中子元素有清除浮动时，会对布局有影响&nbsp;&nbsp;margin-right:&nbsp;-100px;兼容IE6<br>实现方法：<br>&nbsp;&nbsp;.left1{float:&nbsp;left;width:&nbsp;100px;&nbsp;background-color:&nbsp;#ccc;margin-right:&nbsp;-100px;}<br>&nbsp;&nbsp;.right1{margin-left:&nbsp;120px;&nbsp;background-color:&nbsp;#555;}<br><br>2.float+margin+(fix)<br>特点：&nbsp;<br>&nbsp;&nbsp;第一个方案的改进，right中有浮动子元素，不影响。兼容IE6<br>实现方法：<br>&nbsp;&nbsp;.left2{float:&nbsp;left;width:&nbsp;100px;position:&nbsp;relative;&nbsp;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right-fix{float:&nbsp;right;width:&nbsp;100%;margin-left:-100px;&nbsp;}<br>&nbsp;&nbsp;.right2{margin-left:&nbsp;120px;&nbsp;background-color:&nbsp;#555;}<br><br>3.float+hidden<br>特点：<br>&nbsp;&nbsp;不支持IE6<br>实现方法：<br>&nbsp;&nbsp;.left3{float:&nbsp;left;width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right3{overflow:&nbsp;hidden;&nbsp;background-color:&nbsp;#555;}<br><br>4.table<br>特点：<br>&nbsp;&nbsp;<br>实现方法：<br>&nbsp;&nbsp;.parent4{display:&nbsp;table;width:&nbsp;100%;}<br>&nbsp;&nbsp;.left4,.right4{display:&nbsp;table-cell;background-color:&nbsp;#555;}<br>&nbsp;&nbsp;.left4{width:&nbsp;100px;padding-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br><br>5.flex<br>特点：<br>&nbsp;&nbsp;兼容性：兼容性差，flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent5{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left5{width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right5{flex:1;background-color:&nbsp;#555;}<br><br>6.两列定宽+一列自适应，方法跟上面类似<br>float+margin实现方法：<br>&nbsp;&nbsp;.left6,.middle6{float:&nbsp;left;width:&nbsp;100px;&nbsp;background-color:&nbsp;#ccc;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.middle6{margin-right:&nbsp;-100px;}<br>&nbsp;&nbsp;.right6{margin-left:&nbsp;240px;&nbsp;background-color:&nbsp;#555;}<br><br><br><br><br>","addLink":"<a href=&quot;./layout/demo4.html&quot;>Demo<a/>","date":"2016-01-05 10:53","author":"xxz","good":2,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"多列布局---实现一列不定宽，一列自适应的几种方法","classify":"layout","addarticleContent":"1.float+overflow<br>特点：<br>&nbsp;&nbsp;兼容性好<br>实现方法：<br>&nbsp;&nbsp;.left1{float:&nbsp;left;background-color:&nbsp;#ddd;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.right1{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>2.table<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性好&nbsp;&nbsp;&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{display:&nbsp;table;width:&nbsp;100%;}<br>&nbsp;&nbsp;.left2,.right2{display:&nbsp;table-cell;}<br>&nbsp;&nbsp;.left2{width:&nbsp;0.1%;padding-right:&nbsp;20px;&nbsp;background-color:&nbsp;#ddd;}<br>&nbsp;&nbsp;.right2{background-color:&nbsp;#555;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性差<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left3{margin-right:&nbsp;20px;background-color:&nbsp;#ddd;}<br>&nbsp;&nbsp;.right3{flex:1;background-color:&nbsp;#555;}&nbsp;&nbsp;<br><br>4.两列不定宽+自适应<br>特点：<br>&nbsp;&nbsp;&nbsp;新增加的列和左列样式一样&nbsp;<br>实现方法：<br>&nbsp;&nbsp;.left4,.middle4{float:&nbsp;left;background-color:&nbsp;#ddd;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.right4{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>","addLink":"<a href=&quot;./layout/demo5.html&quot;>Demo<a/>","date":"2016-01-05 14:10","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4},{"addArticleTtitle":"多列等分布局---实现父元素不定宽度，子元素多列等分布局的几种方法","classify":"layout","addarticleContent":"1.float<br>特点：<br>&nbsp;&nbsp;兼容性好&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent1{margin-left:&nbsp;-20px;}<br>&nbsp;&nbsp;.column{float:&nbsp;left;width:&nbsp;25%;padding-left:&nbsp;20px;box-sizing:border-box;}<br>&nbsp;&nbsp;.div1&nbsp;p{background-color:&nbsp;red;}<br>&nbsp;&nbsp;.div2&nbsp;p{background-color:&nbsp;green;}<br>&nbsp;&nbsp;.div3&nbsp;p{background-color:&nbsp;blue;}<br>&nbsp;&nbsp;.div4&nbsp;p{background-color:&nbsp;black;}<br><br>2.table<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性好&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent-fix{margin-left:&nbsp;-20px;}<br>&nbsp;&nbsp;.parent2{display:&nbsp;table;width:&nbsp;100%;table-layout:&nbsp;fixed;}<br>&nbsp;&nbsp;.column2{display:&nbsp;table-cell;padding-left:&nbsp;20px;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性：flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;}<br>&nbsp;&nbsp;.column3{flex:1;}<br>&nbsp;&nbsp;.column3+.column3{margin-left:&nbsp;20px;}<br><br>","addLink":"<a href=&quot;./layout/demo6.html&quot;>Demo<a/>","date":"2016-01-05 14:23","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":5},{"addArticleTtitle":"多列等高布局---实现子元素多列等高布局的几种方法","classify":"layout","addarticleContent":"1.table<br>实现方法：<br>&nbsp;&nbsp;.parent1{display:&nbsp;table;width:&nbsp;100%;table-layout:&nbsp;fixed;}<br>&nbsp;&nbsp;.left1,.right1{display:&nbsp;table-cell;background-color:&nbsp;#555;}<br>&nbsp;&nbsp;.left1{width:&nbsp;100px;padding-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br><br>2.flex<br>实现方法：<br>&nbsp;&nbsp;.parent2{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left2{width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right2{flex:1;background-color:&nbsp;#555;}<br><br>3.float<br>实现方法：<br>&nbsp;&nbsp;.parent3{overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;.left3,.right3{padding-bottom:&nbsp;9999px;margin-bottom:&nbsp;-9999px;}<br>&nbsp;&nbsp;.left3{float:&nbsp;left;&nbsp;width:&nbsp;100px;&nbsp;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right3{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>","addLink":"<a href=&quot;./layout/demo7.html&quot;>Demo<a/>","date":"2016-01-05 14:42","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":6},{"addArticleTtitle":"全屏布局---position实现方案","classify":"layout","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;水平居中&lt;/title&gt;<br>&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*兼容性:IE6不兼容，可以用hash*/&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;html,body,.parent{height:&nbsp;100%;overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.top{position:&nbsp;absolute;top:0;left:&nbsp;0;right:&nbsp;0;height:&nbsp;100px;background-color:&nbsp;#222;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.left{position:&nbsp;absolute;top:&nbsp;100px;left:&nbsp;0;bottom:&nbsp;50px;width:&nbsp;200px;background-color:&nbsp;#444;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.right{position:&nbsp;absolute;top:&nbsp;100px;bottom:&nbsp;50px;left:&nbsp;200px;right:&nbsp;0;background-color:&nbsp;#666;overflow:&nbsp;auto;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.bottom{position:&nbsp;absolute;left:&nbsp;0;right:&nbsp;0;bottom:&nbsp;0;height:&nbsp;50px;background-color:&nbsp;#888;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.inner{min-height:&nbsp;1000px;}<br>&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;&nbsp;&nbsp;<br>&nbsp;&nbsp;&lt;div&nbsp;class=&quot;parent&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;top&quot;&gt;top&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;left&quot;&gt;left&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;right&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;inner&quot;&gt;inner&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"<a href=&quot;./layout/demo8.html&quot;>Demo<a/>","date":"2016-01-05 15:21","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":7},{"addArticleTtitle":"全屏布局---flex方案","classify":"layout","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;水平居中&lt;/title&gt;<br>&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*兼容性IE9以下不兼容，可以用hash*/&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;html,body,.parent{height:&nbsp;100%;overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.parent{display:&nbsp;flex;flex-direction:column;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.top{height:&nbsp;100px;background-color:&nbsp;#222;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.bottom{height:&nbsp;50px;background-color:&nbsp;#888;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.middle{flex:1;display:&nbsp;flex;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.left{width:&nbsp;200px;background-color:&nbsp;#444;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.right{flex:1;background-color:&nbsp;#666;overflow:&nbsp;auto;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.inner{min-height:&nbsp;1000px;}<br>&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;&nbsp;&nbsp;<br>&nbsp;&nbsp;&lt;div&nbsp;class=&quot;parent&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;top&quot;&gt;top&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;middle&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;left&quot;&gt;left&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;right&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;inner&quot;&gt;inner&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"<a href=&quot;./layout/demo9.html&quot;>Demo<a/>","date":"2016-01-05 15:43","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":8}],"buildWebsite":[],"resources":[],"encourage":[{"addArticleTtitle":"穷人思维","classify":"encourage","addarticleContent":"穷人为什么穷？无论中国美国，主流对此都有种没明说但心照不宣的观点：因为他们懒、酗酒、赌博……曾有条被疯转微博，一位妈妈卖盗版光盘被城管追赶跳入水中，当时，一位女博士点评说北京好月嫂都月入过万了，何必要选这么苦情的生活方式？此微博后被证实为谣言，但抱小孩卖毛片的中年女性的确曾是北京一景。中产阶级的眼界不是穷人的眼界，正如本书作者也苦苦思索，劳工为何不要求加薪，或寻找更高薪工作，甚至组织工会，维护自身权益？答案是，越贫困，越无力。<br><br>畅销书女作家芭芭拉•艾伦瑞克进入美国底层，体验在时薪6~8美元下，辛勤工作是否能生活下去，她的答案是：不能。除非你跟别人合租房子，或者打两份工。<br><br>她在三个城市当过餐厅服务员、旅馆服务员、清洁女工、看护护理及沃尔玛的售货员，她努力工作，也努力尝试收支平衡，为此她曾勇猛打两份工，一周工作七天，每周还能在打工的看护之家免费吃两三餐，这些都帮助了她。但到旅游旺季，房租将上涨三倍，身为女佣的她，只能再次破产。<br><br>作者有穷人没有的优势：在前面的几十年，她有高于一般水平的医疗照顾、良好饮食、她常年练举重，身体“是不寻常的结实”。并且，就这个实验来说，她作弊了，她给自己租车，用信用卡付费；每到一个城市，她备有一千多美元的起头基金；她开了外挂，却仍然没有打赢。<br><br>我一度觉得这本《我在底层的生活——当专栏作家化身女服务员》是来黑美国的，因为美剧、好莱坞电影不曾说过，还有这么个美国存在：低薪白人劳工，三四人挤在一个小房间里生活；怀孕的清洁工摔伤也不敢请假，一天没薪水，第二天就没钱买杂物；沃尔玛的员工付不起房租，住在收容所；背着十几磅重的吸尘器吸尘、跪在地上擦地，女佣们话题热点是哪个牌子的止痛药最好用；没有健康保险，因为太贵，这意味如果生病，你要比别人多花钱。<br><br>女招待考虑搬入每晚40~60美金的汽车旅馆（她每天才挣四十多美金），作家惊讶问她怎么想的，同事像看笨蛋一样看着女作家：我上哪儿弄一个月的租金跟押金去租公寓？而女作家，之所以能租到月租500的公寓，是拜她从自己的现实世界带来的1000美金付押金及头一月租金所赐。<br><br>不断上涨的房租是穷人的噩梦，作者发现，穷人越来越多住在汽车旅馆。后者可以按天结账，犹如鸦片，诱惑现金紧张的穷人陷进去，微薄的积蓄被烧光，更加不可能有钱租公寓。作者发现有两个男人轮流睡一张床，一个人睡觉时另一个在车上打盹。而我忽然明白卡佛小说里的那些穷人，那些卖掉农庄，揣着全部积蓄进城找工作的一家人，在一间汽车旅馆里住下去，某一天又一声不吭地走掉——他们就是汽车旅馆鸦片的受害者，他们不是走掉，是掉入地狱的更下一层。<br><br>作者认为，穷人破产，因为薪水太低，而房租太贵。这一点中国读者想必也深有共鸣。当房租犹如奥运会田径赛道上的博尔特般一路狂奔，穷人只能不停搬家，搬入一间又一间不带家具的公寓，锅碗瓢勺家具又是一笔钱；或入住汽车旅馆胶囊公寓，只剩一张床那么大小的房间，你证悟到睡觉和死亡何其相似。而无法做饭的后果，是你要花更多钱在吃饭上。最终，她，还有我们，均不难发现一条荒谬定律，如果你穷，你就得比不穷的人花更多的钱，才能活下去。这不是美剧中的美国，但它并不陌生。全世界的金钱流动法则相同：钱生育钱，贫困生育贫困。<br><br>作者有强烈的政治立场，而她真实凶残的打工经历平衡了她的倾向。说到底这并不是一本坐在空调房间凭政治理念写出来的书，她一天工作九小时，住在没有纱窗空调电扇的旅馆，因为锁不上门，不得不合衣而睡。而她的工作，是在35度高温下打扫“有五套浴厕的房子”，撅起屁股，跪于大理石地板，用抹布擦过每一寸地面，擦干净整排玻璃门上的每一个指纹，而且遵循女仆美德，不在主人家喝水；是每周六日服侍近四十名阿兹海默症老年病人吃三餐、清理餐具、擦桌吸地，“我只能全力跟上洗碗机吐出盘子和脏盘子涌进来的速度”；午饭是高速路上停车上厕所时的五分钟；上厕所要打卡。即使这样，仍有几次，她不得不求助于慈善机构，后者提供的免费食物，对没有冰箱的穷人来说并不实用；而一个“平价”通铺床位，每晚也要19美元，慈善机构的小姐建议她“搬进收容所”，以便存到足够的钱交第一个月的房租和押金。<br><br>她将自己奉献为小白鼠，而我们得以观察，贫穷是如何侵蚀一个人的精神。<br><br>作者自己能从时薪5.15美元的餐厅跳槽至时薪7.5，因为她有车，可四处应聘，上班范围更有弹性。她的同事若换工作，交通是大问题，甚至需更换住处。穷人比富人更保守，更不愿意改变，就像奴隶比奴隶主更保守。物质上的窘迫，使他们承受不起改变，冒不起一周没工作的风险。那意味着他们会挨饿，从现在的房子被赶出去，掉到地狱更可怕的下一层。<br><br>但作者在找工作时呈现的状态，她的精神活力、她的勇气才是她和她的同事们之最大区别。同样被羞辱及盘剥，她跃跃欲试组织工会，她的同事却只希望偶尔请一天假，第二天还能有钱买点杂货。这一部分也可用来解释教育的重要所在，作者隐瞒了博士学位，却拿不走自己的思维。精神的贫困是穷人解脱贫穷的最大障碍。<br><br>两个多月的底层生活后，作者的背伤复发、全身起了疱疹，并且，她身为“民主社会主义者”“女性主义者”，对底层人民抱有的博爱之情，慢慢变淡，代之以麻木，甚至仇恨。一个身高不到1米4的女售货员跟她起了纠纷，她看着后者踩着梯子才够得着高处衣服，一股恶意涌上，“希望能看到她啪地一声摔到地上”；而残疾员工忧伤地坐在轮椅里，她看到第一感觉是“至少你还坐着。”——她忽然意识到，如果自己的父亲没有脱离矿工身份，如果去掉自己的教育程度，也许自己就是现在这样：苛刻、狡猾、满怀怨恨。她没有强调，但读者可以自行总结：穷人仇恨穷人。这不是什么新鲜事，却让人难以面对——穷人不都是善良的么？法国作家塞利纳在他1935年的《长夜行》里写道：“我们之间有五个法郎的隔阂，就足以产生恨，希望他们统统死光。”“五个法郎”，可以换成小升初的一个名额、一个工作机会，甚至仅仅是高峰期公车上的一个座位、它仍然“足以产生恨，希望他们统统死光”。不信你看北京上海贴吧里，那些铺天盖地的“外地人滚出去”。<br><br>贫穷是一种专制，它培养自己的奴隶。当你习惯于被剥夺自尊，习惯于被当做一个小偷/懒虫/酒鬼对待，当你常年生活在社会边缘、你存在的意义被抹去，宛如你根本不存在。而打开电视——无论中美——都是老板，男女白领，即使是喊着奋斗的北漂，住的也是你这辈子都住不上的三室两厅，它会让你以为“只有我自己才是不正常的”。精神上的专制就此完成。穷奴大抵上有两种，一种借仇恨别人获得自己高人一等的存在价值感，一种则接受自己是最弱的，就像那些被迫在自己的社会体系中落入屈从位置的沮丧的猴子，它们变得焦虑而退缩，不再挣扎，甚至对自卫也毫无兴趣。<br><br>借助铁丝和剪刀，能培养出自然界不存在的侏儒松，定型成功，即使松开捆扎铁丝，那些松树也固定在扭曲的姿态。同样，精神上的专制，令你在内心相信自己就是个侏儒。芭芭拉•艾伦瑞克细腻雄辩地写出精神的毁灭之路，我却在其中看到熟悉的人脸，作为经历了大饥荒的幸存者的后代，她绘出的精神贫穷者的肖像我并不陌生。那些脸在我们周围漫游，如恒河河沙，又似幽灵。<br><br>怎么办？也许没有一个药方可以取消贫困，但至少下次看到一个走投无路的穷人，在指责他懒惰、酗酒之前还可以多想一秒钟；在大吼“外地人滚出去”之前，还可以思考一下这仇恨从何而来；即使我们的初始值是一棵被剪成侏儒的盆景，也可以在松绑后尝试站起来，笔直地站成一棵树。<br><br>开外挂的女作家，无论如何也做不到收支平衡。但实在要流浪街头时，她可以挖出自己的信用卡，大吃一顿。可是现实中真正的穷人，她的同事们呢？<br><br>我想起《没有人给他写信的上校》的最后一段：绝望的妻子揪着上校的领子，问这些天我们吃什么？<br><br>“上校活了七十五岁——用他一生中分分秒秒积累起来的七十五岁——才到了这个关头。他自觉心灵清透，坦坦荡荡，什么事也难不住他。他说：<br><br>‘吃屎’。”","date":"2016-01-04 20:15","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"行走，回首","classify":"encourage","addarticleContent":"&nbsp;&nbsp;人生路，漫漫而行。一阵秋雨洒落，驻足回首，秋叶纷飞。踩过一叠厚厚堆积的落叶，仿佛就像生命中一堆纠缠不清的人和事，渐渐遗忘，渐渐随风。<br>　　<br>　　往事过眼，便是回忆。你的呢喃，清晰在耳畔。但我的眼眸，已失去了你的色彩。人生这条路，走的越远，失去的就越多，想抓也抓不住，想停也只能一直走下去。<br>　　<br>　　昨日的温存，已成了今日的怀恋。依稀记得梦中的清风随了夜，划在心底的寒，淡淡的痛。你说的话语，凋零在上一个叶落，满地的残朵。我却傻傻祈求，时光捡起，成为我心中不忘的那朵。<br>　　<br>　　转眼间秋风舞动，一声呓语飘落清冷，像一场邂逅，一次回眸。记忆在残风中流逝，那样匆匆，那样落寞，连呼喊都来不及停留，便消散在天边不见。书刻思念的篇章，空白，黯淡，碎散一地无法拼凑。寥寥秋落，回忆是那么的无助，那么令人叹息，苍白的嘴唇自嘲苦笑，连握笔的手指都那么的无力，消瘦。<br>　　<br>　　告诉我什么是孤独？我们还会再见吗？最后的旅程擦肩而过，时光带走了一切，但我只求留下最后的思念。<br>　　<br>　　醉念红尘，抚桥流水。岁月铸就的青石板路，寸草难生，如同霜寒舞天的夜月，哀叹了生命的流逝。一曲残星滑落，蓦然回首。这条路，孤独的没有任何生命。<br>　　<br>　　时间匆忙，我们来不及休息。风景匆匆而来又匆匆而去，看到了风景却落下了脚程。人的使命就是在孤独寂寞中寻索，可人自己，却想看看尘世的美艳。这一世为使命，还是为自己？<br>　　<br>　　又是那条无人的街道，一个人漫步远去，莫名的情绪，莫名在颤动。眼神茫然地注视着前方，寒风带起的落叶，如思念般那么无助那么遥远，像根丝线般，缠绕着你绷紧的心弦，连雨落到脸上，还依旧倔强地走着。<br>　　<br>　　那些人再也不回来，那片天最后模糊了色彩。我们都是孤独的，都在黑夜中寻找被云雾遮掩的星空，却看到了流星失落的雨夜。期盼着刺目的阳光，却在逆光的地方，看着自己沉默的倒影。以为世界会关注自己，转过身看着消失的彼岸，却不得不为世界而哭泣。<br>　　<br>　　一条沉默的路，一个狼狈的背影。彷徨，无助。孤独的感觉似幽风徘徊在耳边，拉动了最后的心弦，凄厉地惨叫。奔跑，跌撞。无人的世界，无人的寂静。回首，期盼的眼眸望不到熟悉的轻语;行走，孤独的身影望不到漆黑的彼方。泪断的雨线，渐渐模糊了记忆的错觉……<br>　　<br>　　虚无的世界，虚无的路，孤独的人，孤独地走。耳边飘来了熟悉的话语:不是所有委屈都可以呐喊，不是所有心事都可以述说，有些事只有自己能做，别人帮不了你。这条路，注定是寂寞的。回首，充满了期待却是更残酷的等待。<br>　　<br>　　秋季，等待了一地叶落，像那些荒芜的岁月，像是旅人，望着沉默的斑驳古路，带着落寞，行走，回首……","date":"2016-01-04 20:24","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"一直努力，直至成功","classify":"encourage","addarticleContent":"&nbsp;&nbsp;所谓理想就是把我们的愿景放在一个价值观的尺度上度量，然后决定人生往哪里走？去哪里？走多远？和谁走？<br>　　<br>　　从民营企业角度看，我做生意是被迫的一个开始，但习惯于用自己的价值观来引导我做判断，因此一直把丧事当喜事办。因为我总觉得自己要去心中期待的某个地方，这时我会经常想起鲁迅的一个小说《过客》。这个过客腿脚不好，他一直不停地走，有天他到一个茶水摊和一个老人和小孩对话，询问前方的路该怎么走？老人告诉他：过了一个坟地，再往前一拐，差不多就到了。他又问那小孩儿，小孩告诉他，你看见那片鲜花了，再往前走就到了。同样一个地方，老人眼里看见的是坟墓，而年轻人眼里看见的是鲜花，可见视野和心态截然不同。而这个过客心里只有一句话，就是——我要走，我要走，我要走。<br>　　<br>　　我在创业和折腾的过程中经常会想起这个故事，我心里有两个地方可以去，一个是坟墓，一个是鲜花，不管是哪个，当下就是“我要走”这样一个状态，这种想法陪伴我，从开始很被动的创业，甚至到后来哪怕负债累累，人生已经到了最绝望的时候，始终没有放弃，仍然把丧事当喜事办，因为我意识到理想是希望的风，是黑暗尽头的那道光，有了它，我能驱走黑暗与恐惧，虽然不知道前方有多远，但是依然有坚持下去的力量。<br>　　<br>　　50岁生日前夕，我决定送给自己的一份特别、有纪念意义的生日礼物，去台湾骑自行车环岛旅行。那时正值酷暑，我每天骑行80多公里，总共环岛5500公里，路上看到一个老太太比我还猛，她磕头环岛。我问她，您怎么走？她说，我就拜拜拜拜，一直走没停过。我很是敬佩，送给她一瓶水，她接着继续走。真的很难想象一个瘦老太太单薄的身躯下，哪来这么大能量？只有一个答案：她心里有佛，有信念，有理想和快乐的天堂，所以才有如此的毅力和能量，不停地拜下去，也许有一天膝盖流血她却浑然不知，也许有一天她会劳累晕眩，但她心里追求的天堂不会坠落。<br>　　<br>　　我再说一个崔永元的故事，原来我们俩很不搭界，相信他对“黑心开发商”也抱有道德上的不满，而在央视看到的小崔似乎也有点装，老讲长征、理想什么的，后来我听一个朋友介绍说他在做一个口述历史的节目。某天，我们在一家酒店中见面，香格里拉见面，他送我一些小人书和他做的口述史的资料，我才发现原来屏幕以外的小崔很了不起。<br>　　<br>　　有个夏天我把这个故事讲给王石，带着王石去了小崔的工作室，到了工作室以后，我们看到崔永元花了十几、二十年的时间一直在做一件事情，就是记录当下中国人的状态，而且默默无闻地到处筹资。这让我看到了一个有责任感的男人，这个男人没事儿找事儿，把别人事儿当自己事儿，自己的事儿不当回事儿，自己都快抑郁了，还是操心民族的历史是不是能记录下来，着实感动了我，也感动了王石。后来，我们成了好朋友，也参与到了口述历史的项目中，共同记录这个时代以及这个时代中人们的想法和事迹。<br>　　<br>　　古人讲：势必有坚韧不拔之志，才有坚韧不拔之力。志向是带来毅力的事儿，就像磕头环岛的老太太，如果她心里没有佛，怎会有毅力去磕头环岛？毅力依附于信念和理想之上，不是欺骗也不是虚妄，理想除了让我们获得能量、财富外，还会在我们遭遇痛苦和不幸时支撑我们活下去。否则，当我们遇到巨大的困难时，很可能会选择逃避，甚至会在不为人知的时候选择死亡。在这个纷繁、价值观多元的时代，希望我们对“理想”这个词不再拒绝，不再隔膜，不再离它而去，而是从脚下做起，一天天努力，直到成功为止。","date":"2016-01-04 20:26","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2}],"noCategory":[],"dom":[{"addArticleTtitle":"文档树","classify":"dom","addarticleContent":"Document&nbsp;Object&nbsp;Model&nbsp;(DOM)&nbsp;为文档对象模型，&nbsp;它使用对象的表示方式来表示对应的文档结构及其中的内容。<br><br>下面为一个样例&nbsp;p&nbsp;元素在文档中的对象所包含的所有属性。<br>&lt;p&nbsp;id=&quot;target&quot;&gt;Hello,&nbsp;World!&lt;/p&gt;<br>p#targetaccessKey:&nbsp;&quot;&quot;<br>align:&nbsp;&quot;&quot;<br>attributes:&nbsp;Named<br>NodeMapbaseURI:&nbsp;&quot;&quot;<br>childElementCount:&nbsp;0<br>childNodes:&nbsp;NodeList[1]<br>children:&nbsp;HTMLCollection[0]<br>classList:&nbsp;DOMTokenList[0]<br>className:&nbsp;&quot;&quot;<br>clientHeight:&nbsp;0<br>clientLeft:&nbsp;0<br>clientTop:&nbsp;0<br>clientWidth:&nbsp;0<br>contentEditable:&nbsp;&quot;inherit&quot;<br>dataset:&nbsp;DOM<br>StringMapdir:&nbsp;&quot;&quot;<br>draggable:&nbsp;false<br>firstChild:&nbsp;text<br>firstElementChild:&nbsp;null<br>hidden:&nbsp;false<br>id:&nbsp;&quot;target&quot;<br>innerHTML:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>innerText:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>isContentEditable:&nbsp;false<br>lang:&nbsp;&quot;&quot;<br>lastChild:&nbsp;text<br>lastElementChild:&nbsp;null<br>localName:&nbsp;&quot;p&quot;<br>namespaceURI:&nbsp;&quot;http://www.w3.org/1999/xhtml&quot;<br>nextElementSibling:&nbsp;null<br>nextSibling:&nbsp;null<br>nodeName:&nbsp;&quot;P&quot;<br>nodeType:&nbsp;1<br>nodeValue:&nbsp;null<br>offsetHeight:&nbsp;0<br>offsetLeft:&nbsp;0<br>offsetParent:&nbsp;null<br>offsetTop:&nbsp;0<br>offsetWidth:&nbsp;0<br>onabort:&nbsp;null<br>onautocomplete:&nbsp;null<br>onautocompleteerror:&nbsp;null<br>onbeforecopy:&nbsp;null<br>onbeforecut:&nbsp;null<br>onbeforepaste:&nbsp;null<br>onblur:&nbsp;null<br>oncancel:&nbsp;null<br>oncanplay:&nbsp;null<br>oncanplaythrough:&nbsp;null<br>onchange:&nbsp;null<br>onclick:&nbsp;null<br>onclose:&nbsp;null<br>oncontextmenu:&nbsp;null<br>oncopy:&nbsp;null<br>oncuechange:&nbsp;null<br>oncut:&nbsp;null<br>ondblclick:&nbsp;null<br>ondrag:&nbsp;null<br>ondragend:&nbsp;null<br>ondragenter:&nbsp;null<br>ondragleave:&nbsp;null<br>ondragover:&nbsp;null<br>ondragstart:&nbsp;null<br>ondrop:&nbsp;null<br>ondurationchange:&nbsp;null<br>onemptied:&nbsp;null<br>onended:&nbsp;null<br>onerror:&nbsp;null<br>onfocus:&nbsp;null<br>oninput:&nbsp;null<br>oninvalid:&nbsp;null<br>onkeydown:&nbsp;null<br>onkeypress:&nbsp;null<br>onkeyup:&nbsp;null<br>onload:&nbsp;null<br>onloadeddata:&nbsp;null<br>onloadedmetadata:&nbsp;null<br>onloadstart:&nbsp;null<br>onmousedown:&nbsp;null<br>onmouseenter:&nbsp;null<br>onmouseleave:&nbsp;null<br>onmousemove:&nbsp;null<br>onmouseout:&nbsp;null<br>onmouseover:&nbsp;null<br>onmouseup:&nbsp;null<br>onmousewheel:&nbsp;null<br>onpaste:&nbsp;null<br>onpause:&nbsp;null<br>onplay:&nbsp;null<br>onplaying:&nbsp;null<br>onprogress:&nbsp;null<br>onratechange:&nbsp;null<br>onreset:&nbsp;null<br>onresize:&nbsp;null<br>onscroll:&nbsp;null<br>onsearch:&nbsp;null<br>onseeked:&nbsp;null<br>onseeking:&nbsp;null<br>onselect:&nbsp;null<br>onselectstart:&nbsp;null<br>onshow:&nbsp;null<br>onstalled:&nbsp;null<br>onsubmit:&nbsp;null<br>onsuspend:&nbsp;null<br>ontimeupdate:&nbsp;null<br>ontoggle:&nbsp;null<br>onvolumechange:&nbsp;null<br>onwaiting:&nbsp;null<br>onwebkitfullscreenchange:&nbsp;null<br>onwebkitfullscreenerror:&nbsp;null<br>onwheel:&nbsp;null<br>outerHTML:&nbsp;&quot;&lt;p&nbsp;id=&quot;target&quot;&gt;Hello,&nbsp;World!&lt;/p&gt;&quot;<br>outerText:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>ownerDocument:&nbsp;document<br>parentElement:&nbsp;null<br>parentNode:&nbsp;null<br>prefix:&nbsp;null<br>previousElementSibling:&nbsp;null<br>previousSibling:&nbsp;null<br>scrollHeight:&nbsp;0<br>scrollLeft:&nbsp;0<br>scrollTop:&nbsp;0<br>scrollWidth:&nbsp;0<br>shadowRoot:&nbsp;null<br>spellcheck:&nbsp;true<br>style:&nbsp;CSSStyle<br>DeclarationtabIndex:&nbsp;-1<br>tagName:&nbsp;&quot;P&quot;<br>textContent:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>title:&nbsp;&quot;&quot;<br>translate:&nbsp;true<br>webkitdropzone:&nbsp;&quot;&quot;<br>__proto__:&nbsp;HTMLParagraphElement<br><br>通过使用&nbsp;DOM&nbsp;提供的&nbsp;API&nbsp;(Application&nbsp;Program&nbsp;Interface)&nbsp;可以动态的修改节点（node），也就是对&nbsp;DOM&nbsp;树的直接操作。&nbsp;浏览器中通过使用&nbsp;JavaScript&nbsp;来实现对于&nbsp;DOM&nbsp;树的改动。<br><br>DOM&nbsp;包含<br><br>DOM&nbsp;Core<br>DOM&nbsp;HTML<br>DOM&nbsp;Style<br>DOM&nbsp;Event<br><br>HTML&nbsp;转换&nbsp;DOM&nbsp;树<br><br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&nbsp;&nbsp;&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;My&nbsp;title&lt;/title&gt;<br>&nbsp;&nbsp;&lt;/head&gt;<br>&nbsp;&nbsp;&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href=&quot;&quot;&gt;My&nbsp;Link&lt;/a&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;My&nbsp;header&lt;/h1&gt;<br>&nbsp;&nbsp;&lt;/body&gt;<br>&lt;/html&gt;<br><br><br>节点遍历<br><br>在元素节点中提取自己所需的节点，并予以操作。<br>//&nbsp;Document.getElementsByTagName()<br>//&nbsp;更具标签名找到目标节点的集合，此例中为&nbsp;&lt;h1&gt;My&nbsp;header&lt;/h1&gt;<br>var&nbsp;node&nbsp;=&nbsp;document.getElementsByTagName(&quot;h1&quot;)[0];<br><br>//&nbsp;Node.parentNode;<br>//&nbsp;获得目标节点的父节点，此例中为&nbsp;body&nbsp;元素<br>node.parentNode;<br><br>//&nbsp;Node.firstChild<br>//&nbsp;获得目标节点的第一个子节点，此例中为&nbsp;&quot;My&nbsp;header&quot;<br>node.firstChild;<br><br>//&nbsp;Node.lastChild<br>//&nbsp;获得目标节点的最后一个子节点，此例中为&nbsp;&quot;My&nbsp;header&quot;<br>node.lastChild;<br><br>//&nbsp;Node.previousSibling;<br>//&nbsp;获得目标节点的前一个相邻节点<br>node.previousSibling;<br><br>//&nbsp;Node.nextSibling;<br>//&nbsp;获得目标节点的下一个相邻节点<br>node.nextSibling;<br><br>节点类型<br><br>常用节点类型<br>ELEMENT_NODE&nbsp;可使用&nbsp;Document.createElement(&quot;elementName&quot;);&nbsp;创建<br>TEXT_NODE&nbsp;可使用&nbsp;Document.createTextNode(&quot;Text&nbsp;Value&quot;);&nbsp;创建<br><br>不常用节点类型<br>COMMENT_NODE<br>DOCUMENT_TYPE_NODE<br><br>不同节点对应的NodeType类型<br>此值可以通过&nbsp;Node.nodeType&nbsp;来获取。<br><br>节点编号&nbsp;&nbsp;节点名称<br>1&nbsp;&nbsp;Element<br>2&nbsp;&nbsp;Attribute<br>3&nbsp;&nbsp;Text<br>4&nbsp;&nbsp;CDATA&nbsp;Section<br>5&nbsp;&nbsp;Entity&nbsp;Reference<br>6&nbsp;&nbsp;Entity<br>7&nbsp;&nbsp;Processing&nbsp;Instrucion<br>8&nbsp;&nbsp;Comment<br>9&nbsp;&nbsp;Document<br>10&nbsp;&nbsp;Document&nbsp;Type<br>11&nbsp;&nbsp;Document&nbsp;Fragment<br>12&nbsp;&nbsp;Notation<br><br>NOTE：此处需要清楚节点和元素的区别。我们平常说的元素&nbsp;其实指的是节点中得元素节点，所以说节点包含元素，节点还包括文本节点、实体节点等。<br><br>元素遍历<br><br>元素节点符合&nbsp;HTML&nbsp;DOM&nbsp;树规则，所以它与&nbsp;DOM&nbsp;中存在的节点相似。<br>&lt;p&gt;<br>&nbsp;&nbsp;Hello,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;em&gt;Xinyang&lt;/em&gt;!<br>&nbsp;&nbsp;回到<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主页<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;<br>&nbsp;&nbsp;。<br>&lt;/p&gt;<br>//&nbsp;在选取元素节点后<br><br>p.firstElementChild;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;em&gt;Xinyang&lt;/em&gt;<br>p.lastElementChild;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;主页&lt;/a&gt;<br><br>em.nextElementSibling;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;主页&lt;/a&gt;<br>em.previousElementSibling;&nbsp;//&nbsp;&quot;Hello,&quot;","addLink":"","date":"2016-01-07 18:27","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"节点操作","classify":"dom","addarticleContent":"因为&nbsp;DOM&nbsp;的存在，这使我们可以通过&nbsp;JavaScript&nbsp;来获取、创建、修改、或删除节点。<br><br>NOTE：下面提供的例子中的&nbsp;element&nbsp;均为元素节点。<br><br>1、获取节点<br><br>父子关系<br><br>element.parentNode<br>element.firstChild/element.lastChild<br>element.childNodes/element.children<br><br>兄弟关系<br><br>element.previousSibling/element.nextSibling<br>element.previousElementSibling/element.nextElementSibling<br><br>通过节点直接的关系获取节点会导致代码维护性大大降低（节点之间的关系变化会直接影响到获取节点），而通过接口则可以有效的解决此问题。<br><br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;ELEMENT_NODE&nbsp;&&nbsp;TEXT_NODE&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;ul&nbsp;id=&quot;ul&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;First&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Second&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Third&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Fourth&lt;/li&gt;<br>&nbsp;&nbsp;&lt;/ul&gt;<br>&nbsp;&nbsp;&lt;p&gt;Hello&lt;/p&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;ulNode&nbsp;=&nbsp;document.getElementsByTagName(&quot;ul&quot;)[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.parentNode);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;body&gt;&lt;/body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.previousElementSibling);&nbsp;//null<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.nextElementSibling);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;p&gt;Hello&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.firstElementChild);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;li&gt;First&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.lastElementChild);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;li&gt;Fourth&lt;/li&gt;<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>NTOE：细心地人会发现，在节点遍历的例子中，body、ul、li、p节点之间是没有空格的，因为如果有空格，那么空格就会被当做一个TEXT节点，从而用ulNode.previousSibling获取到得就是一个空的文本节点，而不是&nbsp;&lt;li&gt;First&lt;/li&gt;&nbsp;节点了。即节点遍历的几个属性会得到所有的节点类型，而元素遍历只会得到相对应的元素节点。一般情况下，用得比较多得还是元素节点的遍历属性。<br><br>实现浏览器兼容版的element.children<br>有一些低版本的浏览器并不支持&nbsp;element.children&nbsp;方法，但我们可以用下面的方式来实现兼容。<br><br>&lt;html&nbsp;lang&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charest=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;Compatible&nbsp;Children&nbsp;Method&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&nbsp;id=&quot;body&quot;&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;item&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;123&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;ppp&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;h1&lt;/h1&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;getElementChildren(e){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(e.children){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;e.children;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;compatible&nbsp;other&nbsp;browse&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;i,&nbsp;len,&nbsp;children&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;child&nbsp;=&nbsp;element.firstChild;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(child&nbsp;!=&nbsp;element.lastChild){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(child&nbsp;!=&nbsp;null){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(child.nodeType&nbsp;==&nbsp;1){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children.push(child);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child&nbsp;=&nbsp;child.nextSibling;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children.push(child);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;children;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Test&nbsp;method&nbsp;getElementChildren(e)&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;item&nbsp;=&nbsp;document.getElementById(&quot;item&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;children&nbsp;=&nbsp;getElementChildren(item);<br>&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i&nbsp;=0;&nbsp;i&nbsp;&lt;&nbsp;children.length;&nbsp;i++){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(children[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>NOTE：此兼容方法为初稿，还未进行兼容性测试。<br><br><br><br>2、接口获取元素节点<br><br>getElementById<br>getElementsByTagName<br>getElementsByClassName<br>querySelector<br>querySelectorAll<br><br>API&nbsp;&nbsp;只作用于&nbsp;document&nbsp;&nbsp;唯一返回值&nbsp;&nbsp;live<br>getElementById&nbsp;&nbsp;√&nbsp;&nbsp;√&nbsp;&nbsp;<br>getElementsByTagName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;√<br>getElementsByClassName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;√<br>querySelectorAll&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>querySelector&nbsp;&nbsp;&nbsp;&nbsp;√&nbsp;&nbsp;<br>getElementById<br><br>获取文档中指定&nbsp;id&nbsp;的节点对象。<br>var&nbsp;element&nbsp;=&nbsp;document.getElementById(&quot;id&quot;);<br>getElementsByTagName<br><br>动态的获取具有指定标签元素节点的集合（其返回值会被&nbsp;DOM&nbsp;的变化所影响，其值会发生变化）。此接口可直接通过元素而获取，不必直接作用于&nbsp;document&nbsp;之上。<br>//&nbsp;示例<br>var&nbsp;collection&nbsp;=&nbsp;element.getElementsByTagName(&quot;tagName&quot;);<br><br>//&nbsp;获取指定元素的所有节点<br>var&nbsp;allNodes&nbsp;=&nbsp;document.getElementsByTagName(&quot;*&quot;);<br><br>//&nbsp;获取所有&nbsp;p&nbsp;元素的节点<br>var&nbsp;elements&nbsp;=&nbsp;document.getElementsByTagName(&quot;p&quot;);<br>//&nbsp;取出第一个&nbsp;p&nbsp;元素<br>var&nbsp;p&nbsp;=&nbsp;elements[0];<br>getElementsByClassName<br><br>获取指定元素中具有指定&nbsp;class&nbsp;的所有节点。多个&nbsp;class&nbsp;可的选择可使用空格分隔，与顺序无关。<br>var&nbsp;elements&nbsp;=&nbsp;element.getElementsByClassName(&quot;className&quot;);<br><br>NOTE：IE9&nbsp;及一下版本不支持&nbsp;getElementsByClassName<br>兼容方法<br><br>function&nbsp;getElementsByClassName(root,&nbsp;className)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;特性侦测<br>&nbsp;&nbsp;if&nbsp;(root.getElementsByClassName)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;优先使用&nbsp;W3C&nbsp;规范接口<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;root.getElementsByClassName(className);<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取所有后代节点<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;elements&nbsp;=&nbsp;root.getElementsByTagName(&quot;*&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;element&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;classNameStr&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;flag&nbsp;=&nbsp;null;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;className&nbsp;=&nbsp;className.split(&quot;&nbsp;&quot;);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;选择包含&nbsp;class&nbsp;的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;element;&nbsp;element&nbsp;=&nbsp;elements[i];&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;classNameStr&nbsp;=&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;element.getAttribute(&quot;class&quot;)&nbsp;+&nbsp;&quot;&nbsp;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag&nbsp;=&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;j&nbsp;=&nbsp;0,&nbsp;name;&nbsp;name&nbsp;=&nbsp;className[j];&nbsp;j++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(classNameStr.indexOf(&quot;&nbsp;&quot;&nbsp;+&nbsp;name&nbsp;+&nbsp;&quot;&nbsp;&quot;)&nbsp;===&nbsp;-1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag&nbsp;=&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(flag)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push(element);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result;<br>&nbsp;&nbsp;}<br>}<br><br>querySelector&nbsp;/&nbsp;querySelectorAll<br><br>获取一个&nbsp;list&nbsp;（其返回结果不会被之后&nbsp;DOM&nbsp;的修改所影响，获取后不会再变化）符合传入的&nbsp;CSS&nbsp;选择器的第一个元素或全部元素。<br>var&nbsp;listElementNode&nbsp;=&nbsp;element.querySelector(&quot;selector&quot;);<br>var&nbsp;listElementsNodes&nbsp;=&nbsp;element.querySelectorAll(&quot;selector&quot;);<br><br>var&nbsp;sampleSingleNode&nbsp;=&nbsp;element.querySelector(&quot;#className&quot;);<br>var&nbsp;sampleAllNodes&nbsp;=&nbsp;element.querySelectorAll(&quot;#className&quot;);<br>NOTE:&nbsp;IE9&nbsp;一下不支持&nbsp;querySelector&nbsp;与&nbsp;querySelectorAll<br><br><br>3、创建节点<br><br>创建节点&nbsp;-&gt;&nbsp;设置属性&nbsp;-&gt;&nbsp;插入节点<br>var&nbsp;element&nbsp;=&nbsp;document.createElement(&quot;tagName&quot;);<br><br><br>4、节点<br><br>textContent<br>获取或设置节点以及其后代节点的文本内容（对于节点中的所有文本内容）。<br>element.textContent;&nbsp;//&nbsp;获取<br>element.textContent&nbsp;=&nbsp;&quot;New&nbsp;Content&quot;;<br>NOTE：不支持&nbsp;IE&nbsp;9&nbsp;及其一下版本。<br><br>innerText&nbsp;（不符合&nbsp;W3C&nbsp;规范）<br>获取或设置节点以及节点后代的文本内容。其作用于&nbsp;textContent&nbsp;几乎一致。<br>element.innerText;<br><br>NOTE：不符合&nbsp;W3C&nbsp;规范，不支持&nbsp;FireFox&nbsp;浏览器。<br>FireFox&nbsp;兼容方案<br>if&nbsp;(!(&quot;innerText&quot;&nbsp;in&nbsp;document.body))&nbsp;{<br>&nbsp;&nbsp;HTMLElement.prototype.__defineGetter__(&quot;innerText&quot;,&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.textContent;<br>&nbsp;&nbsp;});<br>&nbsp;&nbsp;HTMLElement.prototype.__defineSetter__(&quot;innerText&quot;,&nbsp;function(s)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.textContent&nbsp;=&nbsp;s;<br>&nbsp;&nbsp;});<br>}<br><br><br>5、插入节点<br><br>appendChild<br><br>在指定的元素内追加一个元素节点。<br>var&nbsp;aChild&nbsp;=&nbsp;element.appendChild(aChild);<br>insertBefore<br><br>在指定元素的指定节点前插入指定的元素。<br>var&nbsp;aChild&nbsp;=&nbsp;element.insertBefore(aChild,&nbsp;referenceChild);<br><br><br>6、删除节点<br><br>删除指定的节点的子元素节点。<br>var&nbsp;child&nbsp;=&nbsp;element.removeChild(child);<br>innerHTML<br><br>获取或设置指定节点之中所有的&nbsp;HTML&nbsp;内容。替换之前内部所有的内容并创建全新的一批节点（去除之前添加的事件和样式）。innerHTML&nbsp;不检查内容，直接运行并替换原先的内容。<br><br>NOTE：只建议在创建全新的节点时使用。不可在用户可控的情况下使用。<br>var&nbsp;elementsHTML&nbsp;=&nbsp;element.innerHTML;<br>存在的问题<br>低版本&nbsp;IE&nbsp;存在内存泄露<br>安全问题（用户可以在名称中运行脚本代码）","addLink":"","date":"2016-01-07 18:32","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"属性操作","classify":"dom","addarticleContent":"1、HTML&nbsp;属性与&nbsp;DOM&nbsp;属性的对应<br><br>每个&nbsp;HTML&nbsp;属性都会对应相应的&nbsp;DOM&nbsp;对象属性。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;label&nbsp;for=&quot;username&quot;&gt;User&nbsp;Name:&nbsp;&lt;/label&gt;<br>&nbsp;&nbsp;&lt;input&nbsp;type=&quot;input&quot;&nbsp;name=&quot;username&quot;&nbsp;id=&quot;username&quot;&nbsp;class=&quot;text&quot;&nbsp;value=&quot;&quot;&gt;<br>&lt;/div&gt;<br>input.id;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br>input.type;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;text&quot;<br>input.className;&nbsp;//&nbsp;&quot;text&quot;<br><br>label.htmlFor;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br><br><br><br>2、属性操作方式<br><br>3、Property&nbsp;Accessor<br><br>通过属性方法符得到的属性为转换过的实例对象（并非全字符串）。<br>特点<br><br>X&nbsp;通用行差（命名异常，使用不同的命名方式进行访问）<br>X&nbsp;扩展性差<br>√&nbsp;实用对象（取出后可直接使用）<br><br>读取属性<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;label&nbsp;for=&quot;username&quot;&gt;User&nbsp;Name:&nbsp;&lt;/label&gt;<br>&nbsp;&nbsp;&lt;input&nbsp;type=&quot;input&quot;&nbsp;name=&quot;username&quot;&nbsp;id=&quot;username&quot;&nbsp;class=&quot;text&quot;&nbsp;value=&quot;&quot;&gt;<br>&lt;/div&gt;<br>input.className;&nbsp;//&nbsp;&quot;text&quot;<br>input[id];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br><br>写入属性<br><br>可增加新的属性或改写已有属性。<br>input.value&nbsp;=&nbsp;&quot;new&nbsp;value&quot;;<br>input[id]&nbsp;=&nbsp;&quot;new-id&quot;;<br><br><br><br>4、getAttribute&nbsp;/&nbsp;setAttribute<br><br>特点<br><br>X&nbsp;仅可获取字符串（使用时需转换）<br>√&nbsp;通用性强<br><br>读取属性<br><br>获取到的均为属性的字符串。<br>var&nbsp;attribtue&nbsp;=&nbsp;element.getAttribute(&quot;attributeName&quot;);<br><br>写入属性<br><br>可增加新的属性或改写已有属性。<br>element.setAttribute(&quot;attributeName&quot;,&nbsp;value);<br>dataset<br><br>自定义属性，其为&nbsp;HTMLElement&nbsp;上的属性也是&nbsp;data-*&nbsp;的属性集。主要用于在元素上保存数据。获取的均为属性字符串。数据通常使用&nbsp;AJAX&nbsp;获取并存储在节点之上。<br>&lt;div&nbsp;id=&quot;user&quot;&nbsp;data-id=&quot;1234&quot;&nbsp;data-username=&quot;x&quot;&nbsp;data-email=&quot;mail@gmail.com&quot;&gt;&lt;/div&gt;<br>div.dataset.id;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;1234&quot;<br>div.dataset.username;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;x&quot;<br>div.dataset.email;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;mail@gmail.com&quot;<br>NOTE：dataset&nbsp;在低版本&nbsp;IE&nbsp;不可使用，但可通过&nbsp;getAttribute&nbsp;与&nbsp;setAttribute&nbsp;来做兼容。","addLink":"","date":"2016-01-07 19:19","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"样式操作","classify":"dom","addarticleContent":"通过&nbsp;JavaScript&nbsp;动态修改页面样式。<br>CSS&nbsp;对应&nbsp;DOM&nbsp;对象<br><br><br><br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;sample.css&quot;&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;link&quot;);<br>//&nbsp;对应于&nbsp;element.sheet<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&nbsp;media=&quot;screen&quot;&gt;<br>&nbsp;&nbsp;body&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;30px<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;style&quot;);<br>//&nbsp;对应于&nbsp;element.sheet<br><br>//&nbsp;整个页面的全部样式（不包括行内样式）<br>document.styleSheets<br><br>&lt;p&nbsp;style=&quot;color:red&quot;&gt;Text&nbsp;Color&lt;/p&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;p&quot;);<br>//&nbsp;对应于&nbsp;element.style<br>内部样式表<br><br>&lt;style&gt;<br>&nbsp;&nbsp;body{margin:30;}<br>&nbsp;&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>&lt;/style&gt;<br><br>//&nbsp;1.对应所有样式的列表<br>//&nbsp;body{margin:30;}<br>//&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>element.sheet.cssRules;<br><br>//&nbsp;2.对应相应的&nbsp;CSS&nbsp;选择器<br>//&nbsp;p<br>element.sheet.cssRules[1].selectorText;<br><br>//&nbsp;3.对应一个样式<br>//&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>element.sheet.cssRules[1]<br><br>//&nbsp;4.对应所有样式的键值对<br>//&nbsp;color:&nbsp;#aaa;&nbsp;line-height:20px<br>element.sheet.cssRules[1].style;<br><br>//&nbsp;5.对应的属性值<br>//&nbsp;#aaa<br>element.sheet.cssRules[1].stlye.color;<br>element.sheet.cssRules[1].lineHeight;<br>行内样式<br><br>其对应于&nbsp;CSSStyleDeclaration&nbsp;的对象。<br>element.style.color;<br>//&nbsp;获取行内样式的键值对<br>更新样式<br><br>element.style<br><br>element.style.color&nbsp;=&nbsp;&quot;red&quot;;<br>element.style.background&nbsp;=&nbsp;&quot;black&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;style=&quot;color:&nbsp;red;&nbsp;background:&nbsp;black;&quot;&gt;&lt;/div&gt;<br>缺点<br><br>每个属性的更新都需要一个命令<br>命名异常（以驼峰命名法命名属性）<br>element.style.cssText<br><br>一次同时设置多个行内样式，其结果同&nbsp;element.style&nbsp;单独设置相同。<br>element.style.cssText&nbsp;=&nbsp;&quot;color:&nbsp;red;&nbsp;background:&nbsp;black&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;style=&quot;color:&nbsp;red;&nbsp;background:&nbsp;black;&quot;&gt;&lt;/div&gt;<br>以上两种方式均将样式混合在逻辑当中。<br>更新&nbsp;class<br><br>首先需要创建对应样式的&nbsp;CSS&nbsp;样式。<br>.angry&nbsp;{<br>&nbsp;&nbsp;color:&nbsp;red;<br>&nbsp;&nbsp;background:&nbsp;black;<br>}<br>然后再在&nbsp;JavaScript&nbsp;中，在对应的事件中给元素添加需要的类即可。<br>element.className&nbsp;+=&nbsp;&quot;&nbsp;angry&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;class=&quot;angry&quot;&gt;&lt;/div&gt;<br>统一更新多个元素样式<br><br>以上方法均不适合同时更新多个样式，通过更换样式表的方式则可同时更改多个页面中的样式。将需要的大量样式也在一个皮肤样式表中，通过&nbsp;JavaScript&nbsp;来直接更换样式表来进行样式改变。（此方法也可用于批量删除样式）<br><br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;base.css&quot;&gt;<br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;style1.css&quot;&gt;<br>element.setAttribute(&quot;href&quot;,&nbsp;&quot;style2.css&quot;);<br>获取样式<br><br>element.style<br><br>其对应的为元素的行内样式表而不是实际样式表。<br>&lt;input&nbsp;type=&quot;checkbox&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;<br>element.style.color;&nbsp;//&nbsp;&quot;&quot;<br>line-height:&nbsp;200px<br>window.getComputedStyle()<br><br>将需要取出样式的目标元素传入&nbsp;window.getComputedStyle()&nbsp;函数中，即可得到对应元素的实际样式。注意的是这里获取到的样式值为只读属性不可修改！<br>NOTE：获取的实际为&nbsp;CSSStyleDeclaration&nbsp;的实例对象。&nbsp;NOTE+：此方法不支持&nbsp;IE9&nbsp;以下版本，IE9&nbsp;中需使用&nbsp;element.currentStyle&nbsp;来做兼容。<br>var&nbsp;style&nbsp;=&nbsp;window.getComputedStyle(element[,&nbsp;pseudoEle]);<br>&lt;input&nbsp;type=&quot;checkbox&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;<br>window.getComputedStyle(element).color;&nbsp;//&nbsp;&quot;rgb(0,0,0)&quot;","addLink":"","date":"2016-01-07 19:38","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"DOM 事件","classify":"dom","addarticleContent":"何为&nbsp;DOM&nbsp;事件，HTML&nbsp;DOM&nbsp;使JavaScript&nbsp;有能力对&nbsp;HTML&nbsp;事件做出反应。（例如，点击&nbsp;DOM&nbsp;元素，键盘被按，输入框输入内容以及页面加载完毕等）<br>事件流<br><br>一个&nbsp;DOM&nbsp;事件可以分为捕获过程、触发过程、冒泡过程。&nbsp;DOM&nbsp;事件流为&nbsp;DOM&nbsp;事件的处理及执行的过程。<br><br>事件注册<br><br>事件注册，取消以及触发其作用对象均为一个&nbsp;DOM&nbsp;元素。<br>注册事件<br><br>eventTarget.addEventListener(type,&nbsp;listener[,useCapture])<br>evenTarget&nbsp;表示要绑定事件的DOM元素<br>type&nbsp;表示要绑定的事件，如：&quot;click&quot;<br>listener&nbsp;表示要绑定的函数<br>useCapture&nbsp;可选参数，表示是否捕获过程<br>NOTE：useCapture&nbsp;为设定是否为捕获过程，默认事件均为冒泡过程，只有&nbsp;useCapture&nbsp;为&nbsp;true&nbsp;时才会启用捕获过程。<br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;事件处理函数<br>var&nbsp;clickHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;statements<br>};<br><br>//&nbsp;注册事件<br>elem.addEventListener(&quot;click&quot;,&nbsp;clickHandler,&nbsp;false);<br><br>//&nbsp;第二种方式，不建议使用<br>elem.onclick&nbsp;=&nbsp;clickHandler;<br>//&nbsp;或者来弥补只可触发一个处理函数的缺陷<br>elem.onclick&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;clickHandler();<br>&nbsp;&nbsp;func();<br>&nbsp;&nbsp;//&nbsp;其他处理函数<br>};<br><br>取消事件<br><br>eventTarget.removeEventListener(type,&nbsp;listener[,useCapture]);<br>evenTarget&nbsp;表示要绑定事件的DOM元素<br>type&nbsp;表示要绑定的事件，如：&quot;click&quot;<br>listener&nbsp;表示要绑定的函数<br>useCapture&nbsp;可选参数，表示是否捕获过程<br><br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;取消事件<br>elem.removeEventListener(&quot;click&quot;,&nbsp;clickHandler,&nbsp;false);<br><br>//&nbsp;第二种方式。不建议使用<br>elem.onclick&nbsp;=&nbsp;null;<br><br>触发事件<br><br>点击元素，按下按键均会触发&nbsp;DOM&nbsp;事件，当然也可以以通过代码来触发事件。<br>eventTarget.dispatchEvent(type);<br><br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;触发事件<br>elem.dispatchEvent(&quot;click&quot;);<br><br>浏览器兼容型<br><br>以上均为&nbsp;W3C定义的标准定义，但早期浏览器&nbsp;IE8&nbsp;及其以下版本，均没有采用标准的实现方式。不过这些低版本浏览器也提供了对于&nbsp;DOM&nbsp;事件的注册、取消以及触发的实现。<br>事件注册与取消，attchEvent/detachEvent。事件触发，fireEvent(e)，其也不存在捕获阶段（Capture&nbsp;Phase）。<br>兼容低版本代码实现<br><br>注册事件<br><br>var&nbsp;addEvent&nbsp;=&nbsp;document.addEventListener&nbsp;?<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.addEventListener(type,&nbsp;listener,&nbsp;useCapture);<br>&nbsp;&nbsp;}&nbsp;:<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.attachEvent(&quot;on&quot;&nbsp;+&nbsp;type,&nbsp;listener);<br>&nbsp;&nbsp;}<br><br>取消事件<br><br>var&nbsp;addEvent&nbsp;=&nbsp;document.removeElementListener&nbsp;?<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.removeElementListener(type,&nbsp;listener,&nbsp;useCapture);<br>&nbsp;&nbsp;}&nbsp;:<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.detachEvent(&quot;on&quot;&nbsp;+&nbsp;type,&nbsp;listener);<br>&nbsp;&nbsp;}<br><br>事件对象<br><br>调用事件处理函数时传入的信息对象，这个对象中含有关于这个事件的详细状态和信息，它就是事件对象&nbsp;event。其中可能包含鼠标的位置，键盘信息等。<br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;事件处理函数<br>var&nbsp;clickHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;statements<br>};<br><br>//&nbsp;注册事件<br>elem.addEventListener(&quot;click&quot;,&nbsp;clickHandler,&nbsp;false);<br><br>NOTE：在低版本&nbsp;IE&nbsp;中事件对象是被注册在&nbsp;window&nbsp;之上而非目标对象上。使用下面的兼容代码既可解决。<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;事件处理函数<br>var&nbsp;clickHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;event&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;//&nbsp;statements<br>};<br><br>属性和方法<br><br>通用属性和方法<br><br>属性<br><br>type&nbsp;事件类型<br>target(srcElement&nbsp;IE&nbsp;低版本)&nbsp;事件触发节点<br>currentTarget&nbsp;处理事件的节点<br>方法<br><br>stopPropagation&nbsp;阻止事件冒泡传播<br>preventDefault&nbsp;阻止默认行为<br>stopImmediatePropagation&nbsp;阻止冒泡传播<br><br>阻止事件传播<br><br>event.stopPropagation()（W3C规范方法），如果在当前节点已经处理了事件，则可以阻止事件被冒泡传播至&nbsp;DOM&nbsp;树最顶端即&nbsp;window&nbsp;对象。<br>event.stopImmediatePropagation()&nbsp;此方法同上面的方法类似，除了阻止将事件冒泡传播值最高的&nbsp;DOM&nbsp;元素外，还会阻止在此事件后的事件的触发。<br>event.cancelBubble=true&nbsp;为&nbsp;IE&nbsp;低版本中中对于阻止冒泡传播的实现。<br><br>阻止默认行为<br><br>默认行为是指浏览器定义的默认行为（点击一个链接的时候，链接默认就会打开。当我们双击文字的时候，文字就会被选中），比如单击链接可以打开新窗口。<br>Event.preventDefault()&nbsp;为&nbsp;W3C&nbsp;规范方法，在&nbsp;IE&nbsp;中的实现方法为&nbsp;Event.returnValue=false。<br><br>事件分类<br><br>Event<br><br><br><br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>load&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Document,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;image,&nbsp;iframe<br>unload&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Document,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window<br>error&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;image<br>select&nbsp;&nbsp;NO&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;input,&nbsp;textarea<br>abort&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;image<br>window<br><br>load&nbsp;页面全部加载完毕<br>unload&nbsp;离开本页之前的卸载<br>error&nbsp;页面异常<br>abort&nbsp;取消加载<br>image<br><br>load&nbsp;图片加载完毕<br>error&nbsp;图标加载错误<br>abort&nbsp;取消图标加载<br>在目标图标不能正常载入时，载入备份替代图来提供用户体验。<br>&lt;img&nbsp;src=&quot;http://sample.com/img.png&quot;&nbsp;onerror=&quot;this.src=&quot;http://sample.com/default.png&quot;&quot;&gt;<br>UIEvent<br><br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>resize&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;iframe<br>scroll&nbsp;&nbsp;NO/YES&nbsp;&nbsp;Document,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;document,&nbsp;div<br>NOTE：resize&nbsp;为改变浏览器或iframe的窗体大小时会触发事件，scroll&nbsp;则会在滑动内容时触发，作用于&nbsp;Document&nbsp;则不会冒泡，作用于内部元素则会冒泡。<br>MouseEvent<br><br>DOM&nbsp;事件中最常见的事件之一。<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>click&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;focus/activation&nbsp;&nbsp;div<br>dbclick&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;focus/activation/select&nbsp;&nbsp;div<br>mousedown&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;drag/scroll/text&nbsp;selection&nbsp;&nbsp;div<br>mosuemove&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseout&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseover&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseup&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;context&nbsp;menu&nbsp;&nbsp;div<br>mouseenter&nbsp;&nbsp;NO&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseleave&nbsp;&nbsp;NO&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>NOTE：mouseenter&nbsp;与&nbsp;mouseover&nbsp;的区别为前者在鼠标在子元素直接移动不会触发事件，而后者会触发。&nbsp;mouseleave&nbsp;与&nbsp;mouseout&nbsp;同上相似。<br>属性<br><br>clientX,&nbsp;clientX<br>screenX,&nbsp;screenY<br>ctrlKey,&nbsp;shiftKey,&nbsp;altKey,&nbsp;metaKey&nbsp;如果被按下则为真（true）<br>button(0,&nbsp;1,&nbsp;2)&nbsp;鼠标的间位<br><br><br>MouseEvent&nbsp;顺序<br><br>鼠标的移动过程中会产生很多事件。事件的监察频率又浏览器决定。<br>例子：从元素&nbsp;A&nbsp;上方移动过<br>mousemove&nbsp;-&gt;&nbsp;mouseover(A)&nbsp;-&gt;&nbsp;mouseenter(A)&nbsp;-&gt;&nbsp;mousemove(A)&nbsp;-&gt;&nbsp;mouseout(A)&nbsp;-&gt;&nbsp;mouseleave(A)<br>例子：点击元素<br>mousedown&nbsp;-&gt;&nbsp;[mousemove]&nbsp;-&gt;&nbsp;mouseup&nbsp;-&gt;&nbsp;click<br>实例：拖动元素<br><br>&lt;div&nbsp;id=&quot;div0&quot;&gt;&lt;/div&gt;<br>&lt;style&nbsp;media=&quot;screen&quot;&gt;<br>&nbsp;&nbsp;#div0&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;absolute;<br>&nbsp;&nbsp;&nbsp;&nbsp;top:&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;left:&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100px;<br>&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100px;<br>&nbsp;&nbsp;&nbsp;&nbsp;border:&nbsp;1px&nbsp;solid&nbsp;black;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;div0&quot;);<br>var&nbsp;clientX,&nbsp;clientY,&nbsp;isMoving;<br>var&nbsp;mouseDownHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;event&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;clientX&nbsp;=&nbsp;event.clientX;<br>&nbsp;&nbsp;clientY&nbsp;=&nbsp;event.clientY;<br>&nbsp;&nbsp;isMoving&nbsp;=&nbsp;true;<br>}<br><br>var&nbsp;mouseMoveHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(!isMoving)&nbsp;return;<br>&nbsp;&nbsp;event&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;var&nbsp;newClientX&nbsp;=&nbsp;event.clientX,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newClientY&nbsp;=&nbsp;event.clientY;<br>&nbsp;&nbsp;var&nbsp;left&nbsp;=&nbsp;parseInt(elem.style.left)&nbsp;||&nbsp;0,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top&nbsp;=&nbsp;parseInt(elem.style.top)&nbsp;||&nbsp;0;<br>&nbsp;&nbsp;elem.style.left&nbsp;=&nbsp;left&nbsp;+&nbsp;(newClientX&nbsp;-&nbsp;clientX)&nbsp;+&nbsp;&quot;px&quot;;<br>&nbsp;&nbsp;elem.style.top&nbsp;=&nbsp;top&nbsp;+&nbsp;(newClientY&nbsp;-&nbsp;clientY)&nbsp;+&nbsp;&quot;px&quot;;<br>&nbsp;&nbsp;clientX&nbsp;=&nbsp;newClientX;<br>&nbsp;&nbsp;clientY&nbsp;=&nbsp;newClientY;<br>}<br><br>var&nbsp;mouseUpHandler&nbsp;=&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;isMoving&nbsp;=&nbsp;false;<br>}<br><br>addEvent(elem,&nbsp;&quot;mousedown&quot;,&nbsp;mouseDownHandler);<br>addEvent(elem,&nbsp;&quot;mouseup&quot;,&nbsp;mouseUpHandler);<br>addEvent(elem,&nbsp;&quot;mousemove&quot;,&nbsp;mouseMoveHandler);<br>滚轮事件（Wheel）<br><br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>wheel&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;scroll&nbsp;or&nbsp;zoom&nbsp;document&nbsp;&nbsp;div<br>属性<br><br>deltaMode&nbsp;鼠标滚轮偏移量的单位<br>deltaX<br>deltaY<br>deltaZ<br>FocusEvent<br><br>其用于处理元素获得或失去焦点的事件。（例如输入框的可输入状态则为获得焦点，点击外部则失去焦点）<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>blur&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>focus&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>focusin&nbsp;&nbsp;NO&nbsp;&nbsp;window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>focusout&nbsp;&nbsp;NO&nbsp;&nbsp;window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>NOTE：blur&nbsp;失去焦点时，focus&nbsp;获得焦点时，focusin&nbsp;即将获得焦点，focusout即将失去焦点。<br>属性<br><br>一个元素失去，既另一个元素获得焦点。这里的&nbsp;relatedTarget&nbsp;则为相对的那个元素。<br>relatedTarget<br>InputEvent<br><br>输入框输入内容则会触发输入事件。<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>beforeInput&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;update&nbsp;DOM&nbsp;Element&nbsp;&nbsp;input<br>input&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;input<br>NOTE：beforeInput&nbsp;为在按键按下后即将将输入字符显示之前生成的事件。<br>NOTE+：IE&nbsp;并没有&nbsp;InputEvent&nbsp;则需使用&nbsp;onpropertychange(IE)&nbsp;来代替。<br>KeyboardEvent<br><br>其用于处理键盘事件。<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>keydown&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;beforeInput/input/focus/blur/activation&nbsp;&nbsp;div,&nbsp;input<br>keyup&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div,&nbsp;input<br>属性<br><br>key&nbsp;按下的键字符串<br>code<br>ctrlKey,&nbsp;shiftKey,&nbsp;altKey,&nbsp;metaKey<br>repeat&nbsp;代表按键不松开为&nbsp;true<br>keyCode<br>charCode<br>which<br>事件代理<br><br>事件代理是指在父节点上（可为元素最近的父节点也可为上层的其他节点）处理子元素上触发的事件，其原理是通过事件流机制而完成的。可以通过事件对象中获取到触发事件的对象（如下所示）。<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br>elem.addEventListener(&quot;click&quot;,&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;var&nbsp;target&nbsp;=&nbsp;e.target&nbsp;||&nbsp;e.srcElement;<br>&nbsp;&nbsp;//&nbsp;statements<br>});<br>优点<br><br>需要管理的事件处理函数更少<br>内存分配更少，更高效<br>增加与删除子节点可以不额外处理事件<br>缺点<br><br>事件管理的逻辑变的复杂（因为冒泡机制）<br><br>","addLink":"","date":"2016-01-07 20:29","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4}]} ';
var dataJsonStr='{"html":[{"addArticleTtitle":"HTML简介","classify":"html","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;keywords&quot;&nbsp;content=&quot;音乐。。。&quot;&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;description&quot;&nbsp;content=&quot;网易。。。&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;网易云音乐&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;div&gt;222&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>&lt;!DOCTYPE&nbsp;html&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----------文档声明<br>&lt;head&gt;.....&lt;head&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----------文档头部<br>&lt;body&gt;......&lt;/body&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-----------文档主体<br><br>注意事项：<br>&lt;!DOCTYPE&nbsp;html&gt;&nbsp;必须首行定格<br>&lt;title&gt;&nbsp;为文档标题<br>&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;&nbsp;文档编码格式<br>&lt;meta&nbsp;name=&quot;keywords&quot;&nbsp;content=&quot;...&quot;&gt;&nbsp;和&nbsp;&lt;meta&nbsp;name=&quot;description&quot;&nbsp;content=&quot;...&quot;&gt;&nbsp;提供给搜索引擎使用<br>&lt;meta&nbsp;name=&quot;viewport&quot;&nbsp;content=&quot;width=device-width,&nbsp;initial-scale=1.0&quot;&gt;&nbsp;移动端浏览器的宽高与缩放<br>&lt;link&gt;&nbsp;标签可以引入&nbsp;favicon&nbsp;和样式表&nbsp;CSS&nbsp;文件","addLink":"","date":"2016-01-06 19:43","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"HTML标签","classify":"html","addarticleContent":"1、文档章节<br><br>&lt;body&gt;&nbsp;页面内容&nbsp;&lt;header&gt;&nbsp;文档头部&nbsp;&lt;nav&gt;&nbsp;导航&nbsp;&lt;aside&gt;&nbsp;侧边栏&nbsp;&lt;article&gt;&nbsp;定义外部内容（如外部引用的文章）&nbsp;&lt;section&gt;&nbsp;一个独立的块&nbsp;&lt;footer&gt;&nbsp;尾部<br><br><br><br>2、文本标签<br><br>&lt;!--&nbsp;默认超链接&nbsp;&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;当前窗口显示&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;_self&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;新窗口显示&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;_blacnk&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;iframe&nbsp;中打开链接&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;iframe-name&quot;&gt;Sample&lt;/a&gt;<br>&lt;iframe&nbsp;name=&quot;iframe-name&quot;&nbsp;frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;<br><br>&lt;!--&nbsp;页面中的锚点&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;#achor&quot;&gt;Achor&nbsp;Point&lt;/a&gt;<br>&lt;section&nbsp;id=&quot;achor&quot;&gt;Achor&nbsp;Content&lt;/section&gt;<br><br>&lt;!--&nbsp;邮箱及电话需系统支持&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br>&lt;!--&nbsp;多个邮箱地址&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com,&nbsp;sample-address0@me.com&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br>&lt;!--&nbsp;添加抄送，主题和内容&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com?cc=admin@me.com&subject=Help&body=sample-body-text&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br><br>&lt;!--&nbsp;电话示例&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;tel:99999999&quot;&nbsp;title=&quot;Phone&quot;&gt;Ring&nbsp;Us&lt;/a&gt;<br><br><br><br>3、组合内容标签<br><br>&lt;div&gt;<br>&lt;p&gt;<br>&lt;ol&gt;<br>&lt;ul&gt;<br>&lt;dl&gt;<br>&lt;pre&gt;<br>&lt;blockquote&gt;<br><br><br><br>4、引用<br><br>&lt;cite&gt;&nbsp;引用作品的名字、作者的名字等<br>&lt;q&gt;&nbsp;引用一小段文字（大段文字引用用&lt;blockquote&gt;）<br>&lt;blockquote&gt;&nbsp;引用大块文字<br>&lt;pre&gt;&nbsp;保存格式化的内容（其空格、换行等格式不会丢失）<br>&lt;pre&gt;<br>&nbsp;&nbsp;<br>&lt;/pre&gt;<br><br><br><br>5、代码<br>&lt;code&gt;&nbsp;引用代码<br><br><br><br>6、格式化<br><br>&lt;b&gt;&nbsp;加粗&nbsp;&lt;i&gt;&nbsp;斜体<br><br><br><br>7、强调<br><br>&lt;em&gt;&nbsp;斜体。着重于强调内容，会改变语义的强调&nbsp;&lt;strong&gt;&nbsp;粗体。着重于强调内容的重要性<br><br><br><br>8、换行<br><br>&lt;br&gt;&nbsp;换行<br><br><br><br>9、列表<br><br>无序列表<br>&lt;ul&gt;<br>&nbsp;&nbsp;&lt;li&gt;标题&lt;/li&gt;<br>&nbsp;&nbsp;&lt;li&gt;结论&lt;/li&gt;<br>&lt;/ul&gt;<br><br>有序列表<br>&lt;ol&gt;<br>&nbsp;&nbsp;&lt;li&gt;第一&lt;/li&gt;<br>&nbsp;&nbsp;&lt;li&gt;第二&lt;/li&gt;<br>&lt;/ol&gt;<br><br>自定义列表<br>&lt;dl&gt;<br>&nbsp;&nbsp;&lt;dt&gt;作者&lt;/dt&gt;<br>&nbsp;&nbsp;&lt;dd&gt;爱因斯坦&lt;/dd&gt;<br>&nbsp;&nbsp;&lt;dt&gt;作品&lt;/dt&gt;<br>&nbsp;&nbsp;&lt;dd&gt;《相对论》&lt;/dd&gt;<br>&nbsp;&nbsp;&lt;dd&gt;《时间与空间》&lt;/dd&gt;<br>&lt;/dl&gt;<br><br>一个&lt;dt&gt;可以对应多个&lt;dd&gt;<br>NOTE:&nbsp;&lt;dl&gt;&nbsp;为自定义列表，其中包含一个或多个&nbsp;&lt;dt&gt;&nbsp;及&nbsp;一个或多个&nbsp;&lt;dd&gt;，并且dt&nbsp;与&nbsp;dl列表会有缩进的效果。&lt;pre&gt;&nbsp;会保留换行和空格，通常与&nbsp;&lt;code&gt;&nbsp;一同使用。<br><br>&lt;pre&gt;<br>&nbsp;&nbsp;&lt;code&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;main(void)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&lt;/code&gt;<br>&lt;/pre&gt;<br><br>&lt;blockquote&gt;&nbsp;拥有&nbsp;cite&nbsp;属性，它包含引用文本的出处，示例如下所示：<br>&lt;blockquote&nbsp;cite=&quot;http://example.com/facts&quot;&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Quote...&lt;/p&gt;<br>&lt;/blockquote&gt;<br><br><br><br>10、嵌入<br><br>&lt;iframe&nbsp;src=&quot;&quot;&gt;&lt;/iframe&gt;&nbsp;页面操作可以不影响到iframe的内容<br><br>&lt;!--object&nbsp;embed通常用来嵌入外部资源&nbsp;--&gt;<br>&lt;object&nbsp;type=&quot;application/x-shockwave-player&quot;&gt;<br>&nbsp;&nbsp;&lt;param&nbsp;name=&quot;movie&quot;&nbsp;value=&quot;book.pdf&quot;&gt;<br>&lt;/object&gt;<br><br>&lt;!--视频&nbsp;track可以引入字幕&nbsp;autoplay可以使视频加载后自动播放，loop可以使其循环播放&nbsp;--&gt;<br>&lt;video&nbsp;autoplay&nbsp;loop&nbsp;controls=&quot;controls&quot;&nbsp;poster=&quot;poster.jpg&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.mp4&quot;&nbsp;type=&quot;video/mp4&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.webm&quot;&nbsp;type=&quot;video/webm&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.ogg&quot;&nbsp;type=&quot;video/ogg&quot;&gt;<br>&nbsp;&nbsp;&lt;track&nbsp;kind=&quot;subtitles&quot;&nbsp;src=&quot;video.vtt&quot;&nbsp;srclang=&quot;cn&quot;&nbsp;label=&quot;cn&quot;&gt;<br>&lt;/video&gt;<br><br><br><br>11、资源标签<br><br>图标签<br><br>canvas&nbsp;基于像素，性能要求比较高，可用于实时数据展示。svg&nbsp;为矢量图形图像。<br>热点区域标签<br><br>img中套用map以及area可以实现点击某部分图片触发一个链接，点击另一部分触发另一个链接<br>&lt;img&nbsp;src=&quot;mama.jpg&quot;&nbsp;width=100&nbsp;height=100&nbsp;usemap=&quot;#map&quot;&nbsp;/&gt;<br>&lt;map&nbsp;name=&quot;map&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;area&nbsp;shap=&quot;rect&quot;&nbsp;coords=&quot;0,0,50,50&quot;&nbsp;href=&quot;&quot;&nbsp;alt=&quot;&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;area&nbsp;shap=&quot;circle&quot;&nbsp;coords=&quot;75,75,25&quot;&nbsp;href=&quot;&quot;&nbsp;alt=&quot;&quot;&gt;<br>&lt;/map&gt;<br><br><br><br>12、表格<br><br>表格代码示例<br>&lt;table&gt;<br>&nbsp;&nbsp;&lt;caption&gt;table&nbsp;title&nbsp;and/or&nbsp;explanatory&nbsp;text&lt;/caption&gt;<br>&nbsp;&nbsp;&lt;thead&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;header&lt;/th&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&lt;/thead&gt;<br>&nbsp;&nbsp;&lt;tbody&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;data&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&lt;/tbody&gt;<br>&lt;/table&gt;<br>使用&nbsp;colspan=val&nbsp;进行跨列，使用&nbsp;rowspan=val&nbsp;进行跨行。<br><br><br><br>13、表单<br><br>&lt;form&nbsp;action=&quot;WebCreation_submit&quot;&nbsp;method=&quot;get&quot;&nbsp;accept-charset=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&lt;fieldset&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;legend&gt;title&nbsp;or&nbsp;explanatory&nbsp;caption&lt;/legend&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;第一种添加标签的方法&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;&lt;input&nbsp;type=&quot;text/submit/hidden/button/etc&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;第二种添加标签的方法&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for=&quot;input-id&quot;&gt;Sample&nbsp;Label&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;id=&quot;input-id&quot;&gt;<br>&nbsp;&nbsp;&lt;/fieldset&gt;<br>&nbsp;&nbsp;&lt;fieldset&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;legend&gt;title&nbsp;or&nbsp;explanatory&nbsp;caption&lt;/legend&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;只读文本框&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;readonly&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;隐藏文本框，可提交影藏数据&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;hidden-info&quot;&nbsp;value=&quot;hiden-info-value&quot;&nbsp;hidden&gt;<br>&nbsp;&nbsp;&lt;/fieldset&gt;<br>&nbsp;&nbsp;&lt;button&nbsp;type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>&nbsp;&nbsp;&lt;button&nbsp;type=&quot;reset&quot;&gt;Reset&lt;/button&gt;<br>&lt;/form&gt;<br>使用fieldset可用于对表单进行分区<br>表单中的其他控件类型：<br>textarea&nbsp;（文本框）<br>select&nbsp;与&nbsp;option&nbsp;（下拉菜单可多选）<br><br><br><br><br>14、语义化<br><br>语义化（Semantic&nbsp;Tag）是指用合适的标签标识适当的内容，它可以起到搜索引擎优化（Search&nbsp;Engine&nbsp;Optimization），提高可访问性（例如盲人使用的屏幕阅读器），与此同时还可以提高代码的可读性。简而言之也就是在正确的地方使用正确的标签<br><br>","addLink":"","date":"2016-01-06 20:07","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1}],"css":[{"addArticleTtitle":"CSS语法","classify":"css","addarticleContent":"1、语法<br><br>/*&nbsp;选择器&nbsp;*/<br>.m-userlist&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;属性声明&nbsp;*/<br>&nbsp;&nbsp;margin:&nbsp;0&nbsp;0&nbsp;30px;<br>&nbsp;&nbsp;/*&nbsp;属性名:属性值;&nbsp;*/<br>}<br>.m-userlist&nbsp;.list&nbsp;{<br>&nbsp;&nbsp;position:&nbsp;relative;<br>&nbsp;&nbsp;height:&nbsp;100px;<br>&nbsp;&nbsp;overflow:&nbsp;hidden;<br>}<br><br><br>2、浏览器私有属性<br><br>Google&nbsp;Chrome,&nbsp;Safari&nbsp;(-webkit)<br>Firefox&nbsp;(-moz-)<br>IE&nbsp;(-ms-)<br>Opera&nbsp;(-o-)<br>.pic&nbsp;{<br>&nbsp;&nbsp;-webkit-transform:&nbsp;rotate(-3deg);<br>&nbsp;&nbsp;-ms-transform:&nbsp;rotate(-3deg);<br>&nbsp;&nbsp;transform:&nbsp;rotate(-3deg);<br>}<br><br>NOTE:&nbsp;使用&nbsp;http://pleeease.io/play/&nbsp;，CSS&nbsp;预处理器（Sass，Less，Stylus）或编辑器插件可自动添加浏览器厂商的私有属性前缀。<br><br><br>3、属性值语法<br><br>margin:&nbsp;[&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;auto&nbsp;]{1,4}<br>/*&nbsp;基本元素：&lt;length&gt;,&nbsp;&lt;percentage&gt;,&nbsp;auto*/<br>/*&nbsp;组合符号：[],&nbsp;|&nbsp;*/<br>/*&nbsp;数量符号：{1,4}&nbsp;*/<br><br>基本元素<br><br>关键字<br><br>auto<br>solid<br>bold<br>...<br>类型<br><br>基本类型<br>&lt;length&gt;<br>&lt;percentage&gt;<br>&lt;color&gt;<br>...<br><br>其他类型<br>&lt;padding-width&gt;<br>&lt;color-stop&gt;<br><br>符号<br>/<br>,<br>inherit,&nbsp;initial<br><br>组合符号<br><br>&lt;font-size&gt;&nbsp;&lt;font-family&gt;&nbsp;（&nbsp;&nbsp;两项必存，顺序毕遵）<br>合法：12px&nbsp;arial<br>不合法：2em<br>不合法：arial&nbsp;14px<br>&lt;length&gt;&&&lt;color&gt;&nbsp;(&&&nbsp;两项必存，顺序无碍)<br>合法：green&nbsp;2px<br>合法：1em&nbsp;orange<br>不合法：blue<br>underline&nbsp;||&nbsp;overline&nbsp;||&nbsp;line-through&nbsp;||&nbsp;blink&nbsp;(||&nbsp;至少选一，顺序无碍)<br>合法：underline<br>合法：overline&nbsp;underline<br>&lt;color&gt;&nbsp;|&nbsp;transparent（|&nbsp;只可选一，不可共存）<br>合法：orange<br>合法：transparent<br>不合法：orange&nbsp;transparent<br>bold&nbsp;[thin&nbsp;||&nbsp;&lt;length&gt;]（[]&nbsp;分组之用，视为整体）<br>合法：bold&nbsp;thin<br>合法：bold&nbsp;2em<br><br>数量符号<br><br>&lt;length&gt;（无则表示仅可出现一次）<br>合法：1px<br>合法：10em<br>不合法：1px&nbsp;2px<br>&lt;color-stop&gt;[,&nbsp;&lt;color-stop&gt;]+&nbsp;(+&nbsp;可出现一次或多次)<br>合法：#fff,&nbsp;red<br>合法：blue,&nbsp;green&nbsp;50%,&nbsp;gray<br>不合法：red<br>inset?&&&lt;color&gt;&nbsp;(?&nbsp;表示可选)<br>合法：inset&nbsp;orange<br>合法：red<br>&lt;length&gt;{2,4}&nbsp;({2,4}&nbsp;可出现次数和最少最多出现次数)<br>合法：1px&nbsp;2px<br>合法：1px&nbsp;2px&nbsp;3px<br>不合法:&nbsp;1px<br>不合法：1px&nbsp;2px&nbsp;3px&nbsp;4px&nbsp;5px<br>&lt;time&gt;[,&nbsp;&lt;time&gt;]*（*&nbsp;出现&nbsp;0&nbsp;次或多次）<br>合法：1s<br>合法：1s,4ms<br>&lt;time&gt;#（#&nbsp;出现一次或者多次，用,分隔）<br>合法：2s,&nbsp;4s<br>不合法：1s&nbsp;2s<br><br><br><br>4、@规则语法<br><br>@import&nbsp;&quot;subs.css&quot;;<br>@charset&nbsp;&quot;utf-8&quot;;<br>@media&nbsp;print&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;property:&nbsp;value&nbsp;*/<br>}<br>@keyframes&nbsp;fadein&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;property:&nbsp;value&nbsp;*/<br>}<br>@标示符&nbsp;内容;<br>@标示符&nbsp;内容{}<br>@规则<br><br>常用的规则<br>@media&nbsp;（用于响应式布局）<br>@keyframes&nbsp;（CSS&nbsp;动画的中间步骤）<br>@font-face&nbsp;（引入外部字体）<br><br>其他规则（不常用）<br>@import<br>@charset<br>@namespace<br>@page<br>@supports<br>@document","addLink":"","date":"2016-01-06 21:03","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"CSS选择器","classify":"css","addarticleContent":"选择器可被看做表达式，通过它可以选择相应的元素并应用不同的样式。<br>简单选择器<br>元素选择器<br>组合选择器<br>简单选择器<br><br>简单选择器可组合使用。<br><br><br>1、标签选择器<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;p&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>2、类选择器<br><br>.className&nbsp;以&nbsp;.&nbsp;开头，名称可包含字母，数字，-，_，但必须以字母开头。它区分大小写并可出现多次。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&nbsp;class=&quot;special&nbsp;bold&quot;&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;p&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;.special&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;orange;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;.bold&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;font-weight:&nbsp;bold;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>3、id&nbsp;选择器<br><br>#idName&nbsp;以&nbsp;#&nbsp;开头且只可出现一次，其命名要求于&nbsp;.className&nbsp;相同。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&nbsp;id=&quot;special&quot;&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;#special&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;red;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>4、通配符选择器<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;*&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>5、属性选择器<br><br>[attr]&nbsp;或&nbsp;[attr=val]&nbsp;来选择相应的元素。#nav{...}&nbsp;既等同于&nbsp;[id=nav]{...}。IE7+<br>[attr~=val]&nbsp;可选用与选择包含&nbsp;val&nbsp;属性值的元素，像class=&quot;title&nbsp;sports&quot;&nbsp;与&nbsp;class=&quot;sports&quot;。.sports{...}&nbsp;既等同于&nbsp;[class~=sports]{...}&nbsp;IE7+<br>[attr|=val]&nbsp;可以选择val开头及开头紧接-的属性值。IE7+<br>[attr^=val]&nbsp;可选择以val开头的属性值对应的元素，如果值为符号或空格则需要使用引号&nbsp;&quot;&quot;。IE7+<br>[attr$=val]&nbsp;可选择以val结尾的属性值对应的元素。IE7+<br>[attr*=val]&nbsp;可选择以包含val属性值对应的元素。IE7+<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;form&nbsp;action=&quot;&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;value=&quot;Xinyang&quot;&nbsp;disabled&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;password&quot;&nbsp;placeholder=&quot;Password&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;button&quot;&nbsp;value=&quot;Button&quot;&gt;<br>&nbsp;&nbsp;&lt;/form&gt;<br>&lt;/div&gt;<br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;[disabled]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color:&nbsp;orange;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;[type=button]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>6、伪类选择器<br><br>常用伪类选择器：<br>:link&nbsp;IE6+<br>:visited&nbsp;IE7+<br>:hover&nbsp;IE6中仅可用于链接<br>:active&nbsp;IE6/7中仅可用于链接<br>:enabled&nbsp;IE9+<br>:disabled&nbsp;IE9+<br>:checked&nbsp;IE9+<br>:first-child&nbsp;IE8+<br>:last-child&nbsp;IE9+<br>:nth-child(even)&nbsp;可为&nbsp;odd&nbsp;even&nbsp;或数字&nbsp;IE9+<br>:nth-last-child(n)&nbsp;n从&nbsp;0&nbsp;开始计算&nbsp;IE9+<br>:only-child&nbsp;仅选择唯一的元素&nbsp;IE9+<br>:only-of-type&nbsp;IE9+<br>:first-of-type&nbsp;IE9+<br>:last-of-type&nbsp;IE9+<br>:nth-of-type(even)&nbsp;IE9+<br>:nth-last-of-type(2n)&nbsp;IE9+<br><br>不常用伪类选择器：<br>:empty&nbsp;选中页面中无子元素的标签&nbsp;IE9+<br>:root&nbsp;选择&nbsp;HTML&nbsp;根标签&nbsp;IE9+<br>:not()&nbsp;参数为一般选择器&nbsp;IE9+<br>:target&nbsp;被锚点选中的目标元素&nbsp;IE9+<br>:lang()&nbsp;选中语言值为某类特殊值的元素&nbsp;IE7+<br><br>NOTE：element:nth-of-type(n)&nbsp;指父元素下第&nbsp;n&nbsp;个&nbsp;element&nbsp;元素，element:nth-child(n)&nbsp;指父元素下第&nbsp;n&nbsp;个元素且元素为&nbsp;element，若不是，选择失败。具体细节请在使用时查找文档。<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;a&nbsp;href=&quot;http://sample-site.com&quot;&nbsp;title=&quot;Sample&nbsp;Site&quot;&gt;Sample&nbsp;Site&lt;/a&gt;<br>&lt;/div&gt;<br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;/*&nbsp;伪类属性定义有顺序要求！&nbsp;*/<br>&nbsp;&nbsp;a:link&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;gray;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:visited&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:red;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:hover&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;green;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;鼠标悬停&nbsp;*/<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:active&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;orange;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;鼠标点击&nbsp;*/<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>7、其他选择器<br><br>伪元素选择器<br><br>注意与伪类学则器的区分。<br>::first-letter&nbsp;IE6+<br>::first-line&nbsp;IE6+<br>::before{content:&nbsp;&quot;before&quot;}&nbsp;需与&nbsp;content&nbsp;一同使用&nbsp;IE8+<br>::after{content:&nbsp;&quot;after&quot;}&nbsp;需与&nbsp;content&nbsp;一同使用&nbsp;IE8+<br>::selection&nbsp;被用户选中的内容（鼠标选择高亮属性）IE9+&nbsp;Firefox需用&nbsp;-moz&nbsp;前缀<br><br>组合选择器<br><br>后代选择器&nbsp;.main&nbsp;h2&nbsp;{...}，使用&nbsp;表示&nbsp;IE6+<br>子选择器&nbsp;.main&gt;h2&nbsp;{...}，使用&gt;表示&nbsp;IE7+<br>兄弟选择器&nbsp;h2+p&nbsp;{...}，使用+表示&nbsp;IE7+<br>h2~p&nbsp;{...}，使用~表示（此标签无需紧邻）IE7+<br><br>选择器分组<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>/*&nbsp;下面两组样式声明效果一致&nbsp;*/<br>h1&nbsp;{color:&nbsp;red;}<br>h2&nbsp;{color:&nbsp;red;}<br>h3&nbsp;{color:&nbsp;red;}<br><br>h1,&nbsp;h2,&nbsp;h3&nbsp;{color:&nbsp;red;}<br>&lt;/style&gt;<br><br><br>8、继承、优先、层级<br><br>9、继承<br><br>子元素继承父元素的样式，但并不是所有属性都是默认继承的。通过文档中的&nbsp;inherited:&nbsp;yes&nbsp;来判断属性是否可以自动继承。<br><br><br>自动继承属性：<br>color<br>font<br>text-align<br>list-style<br>...<br>非继承属性：<br>background<br>border<br>position<br>...<br><br><br>10、优先<br><br>CSS&nbsp;Specificity&nbsp;Calculator&nbsp;可以在这里找到。更多关于&nbsp;CSS&nbsp;优先级别的信息可以在这里找到（英文）。<br>计算方法：<br>a&nbsp;=&nbsp;行内样式<br>b&nbsp;=&nbsp;id&nbsp;选择器的数量<br>c&nbsp;=&nbsp;类、伪类的属性选择器的数量<br>d&nbsp;=&nbsp;标签选择器和伪元素选择器的数量<br><br>NOTE：从上到下优先级一次降低，且优先级高的样式会将优先级低的样式覆盖。大致公式（并不准确）如下。<br>value&nbsp;=&nbsp;a&nbsp;*&nbsp;1000&nbsp;+&nbsp;b&nbsp;*&nbsp;100&nbsp;+&nbsp;c&nbsp;*&nbsp;10&nbsp;+&nbsp;d<br><br>改变优先级<br><br>改变样式声明先后顺序<br>提升选择器优先级<br>!important（慎用）<br><br><br>11、层叠<br><br>层叠为相同属性根据优先级覆盖，如优先级相同则后面会覆盖前面的属性，而不同属性则会合并<br><br>","addLink":"","date":"2016-01-06 21:22","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"CSS样式---文本相关","classify":"css","addarticleContent":"1、字体<br><br>改变字号<br><br>font-size:&nbsp;&lt;absolute-size&gt;&nbsp;|&nbsp;&lt;relative-size&gt;&nbsp;|&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;inherit<br>&lt;absolute-size&gt;&nbsp;有&nbsp;small&nbsp;large&nbsp;medium<br>&lt;relative-size&gt;&nbsp;有&nbsp;smaller&nbsp;larger<br>div<br>&nbsp;&nbsp;font-size&nbsp;12px<br>&nbsp;&nbsp;p#sample0<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;16px<br>&nbsp;&nbsp;p#sample1<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;2em<br>&nbsp;&nbsp;p#sample2<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;200%<br><br>NOTE：以上两值在开发中并不常用。2em&nbsp;与&nbsp;200%&nbsp;都为父元素默认大小的两倍（参照物为父元素的字体大小&nbsp;12px）。<br><br>改变字体<br><br>font-family:&nbsp;[&nbsp;&lt;family-name&gt;&nbsp;|&nbsp;&lt;generic-family&gt;&nbsp;]#<br>&lt;generic-family&gt;&nbsp;可选选项，但具体使用字体由浏览器决定<br>serif<br>sans-serif<br>cursive<br>fantasy<br>monospace<br>font-family:&nbsp;arial,&nbsp;Verdana,&nbsp;sans-serif;<br><br>NOTE：优先使用靠前的字体<br><br>加粗字体<br><br>font-weight:&nbsp;normal&nbsp;|&nbsp;bold&nbsp;|&nbsp;bolder&nbsp;|&nbsp;lighter&nbsp;|&nbsp;100&nbsp;|&nbsp;200&nbsp;|&nbsp;300&nbsp;|&nbsp;400&nbsp;|&nbsp;500&nbsp;|&nbsp;600&nbsp;|&nbsp;700&nbsp;|&nbsp;800&nbsp;|&nbsp;900<br>font-weight:&nbsp;normal;<br>font-weight:&nbsp;bold;<br><br>倾斜字体<br><br>font-style:&nbsp;normal&nbsp;|&nbsp;italic&nbsp;|&nbsp;oblique&nbsp;|&nbsp;inherit<br>italic&nbsp;使用字体中的斜体，而&nbsp;oblique&nbsp;在没有斜体字体时强制倾斜字体。<br><br>更改行距<br><br>line-height:&nbsp;normal&nbsp;|&nbsp;&lt;number&gt;&nbsp;|&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;<br>normal&nbsp;值为浏览器决定，在1.1至1.2之间（通常设置值为1.14左右）<br>/*&nbsp;length&nbsp;类型&nbsp;*/<br>line-height:&nbsp;40px;<br>line-height:&nbsp;3em;<br>/*&nbsp;percentage&nbsp;类型&nbsp;*/<br>line-height:&nbsp;300%;<br>/*&nbsp;number&nbsp;类型&nbsp;*/<br>line-height:&nbsp;3;<br><br>NOTE：当line-height为&nbsp;number&nbsp;类型时，子类直接继承其数值（不计算直接继承）。&nbsp;而当为&nbsp;percentage&nbsp;类型时，子类则会先计算再显示（先计算后继承）。<br><br>字间距（字母间距）<br><br>letter-spacing:&nbsp;normal&nbsp;|&nbsp;&lt;length&gt;<br>其用于设置字间距或者字母间距，此属性适用于中文或西文中的字母。&nbsp;如果需要设置西文中词与词的间距或标签直接的距离则需要使用&nbsp;word-spacing。<br>word-spacing:&nbsp;normal&nbsp;|&nbsp;&lt;length&gt;<br>font&nbsp;shorthand<br><br>font:&nbsp;[&nbsp;[&nbsp;&lt;‘font-style’&gt;&nbsp;||&nbsp;&lt;font-variant-css21&gt;&nbsp;||&nbsp;&lt;‘font-weight’&gt;&nbsp;||&nbsp;&lt;‘font-stretch’&gt;&nbsp;]?&nbsp;&lt;‘font-size’&gt;&nbsp;[&nbsp;/&nbsp;&lt;‘line-height’&gt;&nbsp;]?&nbsp;&lt;‘font-family’&gt;&nbsp;]&nbsp;|&nbsp;caption&nbsp;|&nbsp;icon&nbsp;|&nbsp;menu&nbsp;|&nbsp;message-box&nbsp;|&nbsp;small-caption&nbsp;|&nbsp;status-bar<br>font:&nbsp;30px/2&nbsp;&quot;Consolas&quot;,&nbsp;monospace;<br>font:&nbsp;italic&nbsp;bold&nbsp;20px/1.5&nbsp;arial,&nbsp;serif;<br>font:&nbsp;20px&nbsp;arial,&nbsp;serif;<br><br>NOTE：当其他值为空时，均被设置为默认值。<br><br>改变文字颜色<br><br>color:&nbsp;&lt;color&gt;<br>element&nbsp;{&nbsp;color:&nbsp;red;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;#f00;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;#ff0000;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgb(255,0,0);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgb(100%,&nbsp;0%,&nbsp;0%);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;hsl(0,&nbsp;100%,&nbsp;50%);&nbsp;}<br><br>/*&nbsp;50%&nbsp;translucent&nbsp;*/<br>element&nbsp;{&nbsp;color:&nbsp;rgba(255,&nbsp;0,&nbsp;0,&nbsp;0.5);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;hsla(0,&nbsp;100%,&nbsp;50%,&nbsp;0.5);&nbsp;}<br><br>/*&nbsp;全透明&nbsp;*/<br>element&nbsp;{&nbsp;color:&nbsp;transparent&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgba(0,&nbsp;0,&nbsp;0,&nbsp;0);&nbsp;}<br><br><br><br>2、对齐方式<br><br>文字居中<br><br>text-align:&nbsp;start&nbsp;|&nbsp;end&nbsp;|&nbsp;left&nbsp;|&nbsp;right&nbsp;|&nbsp;center&nbsp;|&nbsp;justify&nbsp;|&nbsp;match-parent&nbsp;|&nbsp;start&nbsp;end<br><br>NOTE：默认为文本左对齐。<br><br>文本垂直对齐<br><br>vertical-align:&nbsp;baseline&nbsp;|&nbsp;sub&nbsp;|&nbsp;super&nbsp;|&nbsp;text-top&nbsp;|&nbsp;text-bottom&nbsp;|&nbsp;middle&nbsp;|&nbsp;top&nbsp;|&nbsp;bottom&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;&lt;length&gt;<br>NOTE：&lt;percentage&gt;的参照物为line-height<br><br>文本缩进<br><br>text-indent:&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;&&&nbsp;[&nbsp;hanging&nbsp;||&nbsp;each-line&nbsp;]<br>NOTE：缩进两个字可使用&nbsp;text-indent:&nbsp;2em;<br><br><br><br>3、格式处理<br><br>保留空格格式<br><br>white-space:&nbsp;normal&nbsp;|&nbsp;pre&nbsp;|&nbsp;nowrap&nbsp;|&nbsp;pre-wrap&nbsp;|&nbsp;pre-line<br>pre&nbsp;行为同&nbsp;&lt;pre&gt;&nbsp;一致。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;New&nbsp;lines&nbsp;&nbsp;Spaces&nbsp;and&nbsp;tabs&nbsp;&nbsp;Text&nbsp;wrapping<br>normal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>nowrap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No&nbsp;wrap<br>pre&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No&nbsp;wrap<br>pre-wrap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>pre-line&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>文字换行<br><br>word-wrap:&nbsp;normal&nbsp;|&nbsp;break-word<br><br>NOTE：允许长单词自动换行。<br><br>word-break:&nbsp;normal&nbsp;|&nbsp;break-all&nbsp;|&nbsp;keep-all<br><br>NOTE：break-all&nbsp;单词中的任意字母间都可以换行。<br><br><br><br>4、文本装饰<br><br>文字阴影<br><br>text-shadow:none&nbsp;|&nbsp;&lt;shadow-t&gt;#&nbsp;或&nbsp;text-shadow:none&nbsp;|&nbsp;[&lt;length&gt;{2,3}&&&lt;color&gt;?]#<br>p&nbsp;{<br>&nbsp;&nbsp;text-shadow:&nbsp;1px&nbsp;1px&nbsp;1px&nbsp;#000,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3px&nbsp;3px&nbsp;5px&nbsp;blue;<br>}<br>value&nbsp;=&nbsp;The&nbsp;X-coordinate&nbsp;X&nbsp;轴偏移像素<br>value&nbsp;=&nbsp;The&nbsp;Y-coordinate&nbsp;Y&nbsp;轴偏移像素<br>value&nbsp;=&nbsp;The&nbsp;blur&nbsp;radius&nbsp;阴影模糊半径<br>value&nbsp;=&nbsp;The&nbsp;color&nbsp;of&nbsp;the&nbsp;shadow&nbsp;阴影颜色（默认为文字颜色）<br><br>文本装饰（下划线等）<br><br>text-decoration:&nbsp;&lt;text-decoration-line&gt;&nbsp;||&nbsp;&lt;text-decoration-style&gt;&nbsp;||&nbsp;&lt;text-decoration-color&gt;<br>h1.under&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;underline;<br>}<br>h1.over&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;overline;<br>}<br>p.line&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;line-through;<br>}<br>p.blink&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;blink;<br>}<br>a.none&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;none;<br>}<br>p.underover&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;underline&nbsp;overline;<br>}<br><br><br><br>5、高级设置<br><br>省略字符<br><br>text-overflow:&nbsp;[&nbsp;clip&nbsp;|&nbsp;ellipsis&nbsp;|&nbsp;&lt;string&gt;&nbsp;]{1,2}<br>/*&nbsp;常用配合&nbsp;*/<br>text-overflow:&nbsp;ellipsis;<br>overflow:&nbsp;hidden;&nbsp;/*&nbsp;溢出截取&nbsp;*/<br>white-space:&nbsp;nowrap;&nbsp;/*&nbsp;禁止换行&nbsp;*/<br><br>更换鼠标形状<br><br>cursor:&nbsp;[[&lt;funciri&gt;,]*&nbsp;[&nbsp;auto&nbsp;|&nbsp;crosshair&nbsp;|&nbsp;default&nbsp;|&nbsp;pointer&nbsp;|&nbsp;move&nbsp;|&nbsp;e-resize&nbsp;|&nbsp;ne-resize&nbsp;|&nbsp;nw-resize&nbsp;|&nbsp;n-resize&nbsp;|&nbsp;se-resize&nbsp;|&nbsp;sw-resize&nbsp;|&nbsp;s-resize&nbsp;|&nbsp;w-resize|&nbsp;text&nbsp;|&nbsp;wait&nbsp;|&nbsp;help&nbsp;]]&nbsp;|&nbsp;inherit<br><br>常用属性<br><br>cursor:&nbsp;[&lt;uri&gt;,]*[auto&nbsp;|&nbsp;default&nbsp;|&nbsp;none&nbsp;|&nbsp;help&nbsp;|&nbsp;pointer&nbsp;|&nbsp;zoom-in&nbsp;|&nbsp;zoom-out&nbsp;|&nbsp;move]<br>&lt;uri&gt;&nbsp;图片资源地址代替鼠标默认形状<br>&lt;default&gt;&nbsp;默认光标<br>&lt;none&gt;&nbsp;隐藏光标<br>&lt;pointer&gt;&nbsp;手型光标<br>&lt;zoom-in&gt;<br>&lt;zoom-out&gt;<br>&lt;move&gt;<br>cursor:&nbsp;pointer;<br>cursor:&nbsp;url(image-name.cur),&nbsp;pointer;<br>/*&nbsp;当&nbsp;uri&nbsp;失效时或者则会起作用&nbsp;*/<br><br>强制继承<br><br>inherit&nbsp;会强制继承父元素的属性值。<br>font-size:&nbsp;inherit;<br>font-family:&nbsp;inherit;<br>font-weight:&nbsp;inherit;<br>...<br>word-wrap:&nbsp;inherit;<br>work-break:&nbsp;inherit<br>text-showdow:&nbsp;inherit<br><br>NOTE：具体在使用时可查询文档","addLink":"","date":"2016-01-07 10:30","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2}],"javascript":[{"addArticleTtitle":"JavaScript 介绍","classify":"javascript","addarticleContent":"前端开发三要素，HTML（描述网页内容），CSS（描述样式），JavaScript（控制网页行为）。JavaScript&nbsp;为解释型编程语（程序不需要编译，程序在运行时才翻译成机器语言，每执&nbsp;行一次都要翻译一次)，运行环境也很广泛（浏览器或操作系统中&nbsp;NodeJS）。<br>JavaScript&nbsp;又分为两部分，ECMAScript&nbsp;和&nbsp;DOM。其中&nbsp;JavaScript&nbsp;的基本的语言属性（例如，变量，作用域等）都在&nbsp;ECMAScript&nbsp;中有详细的定义好比汉子在字典中的定义。DOM&nbsp;中则定义如何修改文档结构（HTML&nbsp;或&nbsp;XML&nbsp;等）。<br>JavaScript的引入方法如下：<br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;title&gt;Demo&nbsp;Page&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;以上代码忽略&nbsp;--&gt;<br><br>&nbsp;&nbsp;&lt;!--&nbsp;为性能优化需将&nbsp;javascript&nbsp;代码放置在&nbsp;body&nbsp;标签的最末端&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;外联文件&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;src=&quot;/javascripts/application.js&quot;&nbsp;type=&quot;text/javascript&quot;&nbsp;charset=&quot;utf-8&quot;&nbsp;async&nbsp;defer&gt;&lt;/script&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;内嵌代码&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;document.write(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"","date":"2016-01-06 22:54","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"基础语法","classify":"javascript","addarticleContent":"1、变量标示符<br><br>变量的命名<br><br>var&nbsp;_name&nbsp;=&nbsp;null;<br>var&nbsp;$name&nbsp;=&nbsp;null;<br>var&nbsp;name0&nbsp;=&nbsp;null;<br><br><br><br>2、关键字与保留字<br><br>JavaScript&nbsp;在语言定义中保留的字段，这些字段在语言使用中存在特殊意义或功能，在程序编写的过程中不可以当做变量或函数名称使用。无需记忆，报错修改即可。<br>关键字与保留字可以在&nbsp;Mozilla&nbsp;开发者站点找到。<br><br><br><br>3、字符敏感<br><br>字符串的大小写是有所区分的，不同字符指代不同的变量。<br><br><br><br>4、严格模式<br><br>增益<br><br>消除语法中不合理与不安全的问题，保证代码正常运行<br>提高编译效率，增加运行速度<br><br>使用方法<br><br>&lt;!--&nbsp;全局使用&nbsp;严格&nbsp;模式&nbsp;--&gt;<br>&quot;use&nbsp;strict&quot;;<br>(function(){<br>&nbsp;&nbsp;console.log(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>})()<br><br>&lt;!--&nbsp;或者在函数内部声明使用&nbsp;严格&nbsp;模式&nbsp;--&gt;<br>(function(){<br>&nbsp;&nbsp;&quot;use&nbsp;strict&quot;;<br>&nbsp;&nbsp;console.log(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>})()<br><br>严格模式与标准模式的区别：<br><br>严格模式下隐式声明或定义变量被静止<br>严格模式下对象重名的属性在严格模式下被静止<br>严格模式下&nbsp;arguments.callee()&nbsp;被禁用<br>严格模式下&nbsp;with()&nbsp;语句<br>更多限制<br><br><br><br>5、注释<br><br>/*<br>&nbsp;&nbsp;多行注释，不可嵌套<br>&nbsp;*/<br><br>//&nbsp;单行注释","addLink":"","date":"2016-01-07 11:23","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"类型","classify":"javascript","addarticleContent":"1、javascript&nbsp;类型系统可以分为标准类型和对象类型，进一步标准类型又可以分为原始类型和引用类型，而对象类型又可以分为内置对象类型、普通对象类型、自定义对象类型。<br><br><br><br>2、标准类型<br><br>标准类型共包括了6个分别是：<br>原始类型（值类型）：<br>Undefined&nbsp;undefined<br>Null&nbsp;null<br>Boolean&nbsp;true<br>String&nbsp;&quot;hello&quot;<br>Number&nbsp;123<br><br><br><br>3、引用类型（对象类型）：<br><br>Object<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>&lt;!--&nbsp;原始类型变量的包装类型如下&nbsp;--&gt;<br>var&nbsp;bool&nbsp;=&nbsp;new&nbsp;Boolean(true);<br>var&nbsp;str&nbsp;=&nbsp;new&nbsp;String(&quot;hello&quot;);<br>var&nbsp;num&nbsp;=&nbsp;new&nbsp;Number(1);<br>var&nbsp;obj0&nbsp;=&nbsp;new&nbsp;Object();<br><br><br><br>4、原始类型和引用类型的区别：<br><br>原始类型储存在栈（Stack）中储存变量的值，而引用类型在栈中保存的是所引用内容储存在堆（Heap）中的值。类似于指针的概念，引用类型并非储存变量真实数值而是地址，所以对已引用类型的复制其实只是复制了相同的地址而非实际的变量值。<br><br>Undefined&nbsp;值：undefined&nbsp;出现场景：<br><br>以声明为赋值的变量&nbsp;var&nbsp;obj;<br>获取对象不存在的属性&nbsp;var&nbsp;obj&nbsp;=&nbsp;{x:&nbsp;0};&nbsp;obj.y;<br>无返回值函数的执行结果&nbsp;function&nbsp;f(){};&nbsp;var&nbsp;obj&nbsp;=&nbsp;f();<br>函数参数没有传入&nbsp;function&nbsp;f(i){console.log(i)};&nbsp;f();<br>void(expression)<br><br>Null&nbsp;值：null&nbsp;出现场景：<br><br>获取不存在的对象&nbsp;document.getElementById(&quot;not-exist-element&quot;)<br><br>Boolean&nbsp;值：true,&nbsp;false&nbsp;出现场景：<br><br>条件语句导致的系统执行的隐式类型转换&nbsp;if(隐式转换){}<br>字面量或变量定义&nbsp;var&nbsp;bool&nbsp;=&nbsp;true;<br><br>String&nbsp;值：字符串&nbsp;出现场景：<br><br>var&nbsp;str&nbsp;=&nbsp;&quot;Hello,&nbsp;world!&quot;;<br><br>Number&nbsp;值：整型直接量，八进制直接量（0-），十六进制直接量（0x-)，浮点型直接量&nbsp;出现场景：<br><br>1026<br>3.14<br>1.2e5<br>0x10<br><br>Object&nbsp;值：属性集合&nbsp;出现场景：<br><br>var&nbsp;obj&nbsp;=&nbsp;{name:&nbsp;&quot;Xinyang&quot;};<br><br><br><br>5、变量转换表<br><br>Value&nbsp;&nbsp;Boolean&nbsp;&nbsp;Number&nbsp;&nbsp;String<br>undefined&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;undefined&quot;<br>null&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;null&quot;<br>true&nbsp;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;1&nbsp;&nbsp;&quot;true&quot;<br>false&nbsp;&nbsp;f&nbsp;alse&nbsp;&nbsp;0&nbsp;&nbsp;&quot;false&quot;<br>&quot;&quot;&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;&quot;<br>&quot;123&quot;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;123&nbsp;&nbsp;&quot;123&quot;<br>&quot;1a&quot;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;1a&quot;<br>0&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;0&quot;<br>1&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;1&nbsp;&nbsp;&quot;1&quot;<br>Infinity&nbsp;&nbsp;true&nbsp;&nbsp;Infinity&nbsp;&nbsp;&quot;Infinity&quot;<br>NaN&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;NaN&quot;<br>{}&nbsp;&nbsp;true&nbsp;&nbsp;NaN&nbsp;&nbsp;&nbsp;&nbsp;&quot;[object&nbsp;Object]&quot;<br><br><br><br>6、类型识别<br><br>typeof<br>Object.prototype.toString<br>constructor<br>instanceof<br><br>typeof：<br>可以是标准类型（Null&nbsp;除外）<br>不可识别具体的对象类型（Function&nbsp;除外）<br>Object.prototype.toString：<br>可是识别标准类型及内置对象类型（例如，Object,&nbsp;Date,&nbsp;Array）<br>不能识别自定义对象类型<br><br>constructor：<br>可以识别标准类型（Undefined/Null&nbsp;除外）<br>可识别内置对象类型<br>可识别自定义对象类型<br>function&nbsp;getConstructiorName(obj)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;obj&nbsp;&&&nbsp;obj.constructor&nbsp;&&&nbsp;obj.constructor.toString().match(/function&#92;s*([^(]*)/)[1];<br>}<br>getConstructiorName([])&nbsp;===&nbsp;&quot;Array&quot;;&nbsp;//&nbsp;true<br><br>instanceof：<br>不可判别原始类型<br>可判别内置对象类型<br>可判别自定义对象类型<br>","addLink":"","date":"2016-01-07 11:34","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"类型识别","classify":"javascript","addarticleContent":"1、类型识别<br><br>typeof<br>Object.prototype.toString<br>constructor<br>instanceof<br><br>2、typeof：<br>可以是标准类型（Null&nbsp;除外）<br>不可识别具体的对象类型（Function&nbsp;除外）<br>Object.prototype.toString：<br>可是识别标准类型及内置对象类型（例如，Object,&nbsp;Date,&nbsp;Array）<br>不能识别自定义对象类型<br><br>3、constructor：<br>可以识别标准类型（Undefined/Null&nbsp;除外）<br>可识别内置对象类型<br>可识别自定义对象类型<br><br>4、function&nbsp;getConstructiorName(obj)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;obj&nbsp;&&&nbsp;obj.constructor&nbsp;&&&nbsp;obj.constructor.toString().match(/function&#92;s*([^(]*)/)[1];<br>}<br>getConstructiorName([])&nbsp;===&nbsp;&quot;Array&quot;;&nbsp;//&nbsp;true<br><br>5、instanceof：<br>不可判别原始类型<br>可判别内置对象类型<br>可判别自定义对象类型<br>JavaScript的数据类型可以分为：标准类型和对象类型。<br>标准类型有：undefined&nbsp;Null&nbsp;Boolean&nbsp;Date&nbsp;Number&nbsp;Object<br>对象类型（构造器类型）：Boolean&nbsp;Date&nbsp;Number&nbsp;Object&nbsp;Array&nbsp;Date&nbsp;Error&nbsp;Function&nbsp;RegExp<br><br>6、用来判断数据类型的一般有四种方式，分别是：<br>typeof<br>Prototype.toString()<br>constructor<br>instanceof<br><br>7、下面我们写一个HTML来检验一下：<br><br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;JavaScript类型判断&lt;/title&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.red{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color:red;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Standard&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;a;&nbsp;&nbsp;&nbsp;&nbsp;//undefined<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;b&nbsp;=&nbsp;document.getElementById(&quot;no_exist_element&quot;);&nbsp;//null<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;c&nbsp;=&nbsp;true;&nbsp;&nbsp;&nbsp;&nbsp;//Boolean<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;d&nbsp;=&nbsp;1;&nbsp;&nbsp;&nbsp;&nbsp;//Number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;&quot;str&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//String<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;f&nbsp;=&nbsp;{name&nbsp;:&nbsp;&quot;Tom&quot;};&nbsp;&nbsp;&nbsp;&nbsp;//Object<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Object&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;g&nbsp;=&nbsp;new&nbsp;Boolean(true);&nbsp;&nbsp;&nbsp;&nbsp;//Boolean&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;h&nbsp;=&nbsp;new&nbsp;Number(1);&nbsp;&nbsp;&nbsp;&nbsp;//Number&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;i&nbsp;=&nbsp;new&nbsp;String(&quot;str&quot;);&nbsp;&nbsp;&nbsp;&nbsp;//String&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;j&nbsp;=&nbsp;new&nbsp;Object({name&nbsp;:&nbsp;&quot;Tom&quot;});&nbsp;//Object&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;k&nbsp;=&nbsp;new&nbsp;Array([1,&nbsp;2,&nbsp;3,&nbsp;4]);&nbsp;&nbsp;&nbsp;&nbsp;//Array&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;l&nbsp;=&nbsp;new&nbsp;Date();&nbsp;&nbsp;&nbsp;&nbsp;//Date&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;m&nbsp;=&nbsp;new&nbsp;Error();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;n&nbsp;=&nbsp;new&nbsp;Function();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;o&nbsp;=&nbsp;new&nbsp;RegExp(&quot;&#92;&#92;d&quot;);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Self-Defined&nbsp;Object&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Use&nbsp;the&nbsp;Prototype.toString()&nbsp;to&nbsp;judge&nbsp;the&nbsp;type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;type(obj){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Object.prototype.toString.call(obj).slice(8,&nbsp;-1).toLowerCase();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&nbsp;border=&quot;1&quot;&nbsp;cellspacing=&quot;0&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;typeof&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;toString&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;constructor&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;instanceof&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;undefined&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;a)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(a))&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(a.constructor)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(a&nbsp;instanceof&nbsp;&quot;undefined&quot;)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Null&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;b);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(b));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(b.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(b&nbsp;instanceof&nbsp;&quot;null&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Boolean&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;c);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(c));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(c.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(c&nbsp;instanceof&nbsp;&quot;boolean&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Number&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;d);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(d));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(d.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(d&nbsp;instanceof&nbsp;&quot;number&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;String&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;e);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(e));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(e.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(e&nbsp;instanceof&nbsp;&quot;string&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;f);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(f));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(f.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(f&nbsp;instanceof&nbsp;&quot;object&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&lt;td&nbsp;colspan=&quot;5&quot;&gt;-----------------------&lt;/td&gt;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Boolean&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;g);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(g));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(g.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(g&nbsp;instanceof&nbsp;Boolean);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Number&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;h);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(h));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(h.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(h&nbsp;instanceof&nbsp;Number);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;String&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;i);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(i));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(i.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(i&nbsp;instanceof&nbsp;String);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Object&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;j);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(j));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(j.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(j&nbsp;instanceof&nbsp;Object);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Array&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;k);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(k));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(k.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(k&nbsp;instanceof&nbsp;Array);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Date&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;l);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(l));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(l.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(l&nbsp;instanceof&nbsp;Date);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Error&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;m);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(m));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(m.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(m&nbsp;instanceof&nbsp;Error);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Function&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;n);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(n));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(n.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(n&nbsp;instanceof&nbsp;Function);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;RegExp&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;o);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(o));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(o.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(o&nbsp;instanceof&nbsp;RegExp);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&lt;td&nbsp;colspan=&quot;5&quot;&gt;-----------------------&lt;/td&gt;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Point&nbsp;Objct&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;p);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(p));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(p.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(p&nbsp;instanceof&nbsp;Point);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>","addLink":"","date":"2016-01-07 12:32","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"内置对象","classify":"javascript","addarticleContent":"通常情况下只有对象才存在方法，但&nbsp;JavaScript&nbsp;不同它具有12种内置对象。内置对象又分为两类，普通对象（属性和方法）与构造器对象（可用于实例化普通对象，它还包含原型对象属性和方法，及实例对象属性和方法）。<br><br>1、JavaScript&nbsp;对象原型链的简要说明<br><br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>p.move(2,2);<br><br>__proto__&nbsp;称之为原型链，有如下特点：<br>__proto__&nbsp;为对象内部的隐藏属性<br>__proto__&nbsp;为实例化该对象的构造器的&nbsp;prototype&nbsp;对象的引用，因此可以直接方法&nbsp;prototype&nbsp;的所有属性和方法<br>除了&nbsp;Object&nbsp;每个对象都有一个&nbsp;__proto__&nbsp;属性且逐级增长形成一个链，原型链顶端是一个&nbsp;Object&nbsp;对象。<br>在调用属性或方法时，引擎会查找自身的属性如果没有则会继续沿着原型链逐级向上查找，直到找到该方法并调用。<br>__proto__&nbsp;跟浏览器引擎实现相关，不同的引擎中名字和实现不尽相同(chrome、firefox中名称是&nbsp;__proto__&nbsp;，并且可以被访问到，IE中无法访问)。基于代码兼容性、可读性等方面的考虑，不建议开发者显式访问&nbsp;__proto__&nbsp;属性或通过&nbsp;__proto__更改原型链上的属性和方法，可以通过更改构造器prototype&nbsp;对象来更改对象的&nbsp;__proto__&nbsp;属性。<br><br><br><br>2、构造器对象与普通对象的区别<br><br>1、构造器对象原型链中的&nbsp;__proto__&nbsp;是一个&nbsp;Function.prototype&nbsp;对象的引用，因此可以调用&nbsp;Function.prototype的属性及方法<br>2、构造器对象本身有一个&nbsp;prototype&nbsp;属性，用该构造器实例化对象时该&nbsp;prototype&nbsp;会被实例对象的&nbsp;__proto__&nbsp;所引用<br>3、构造器对象本身是一个&nbsp;function&nbsp;对象，因此也会有自身属性<br><br><br><br>3、标准内置对象<br><br>构造器对象<br>Object<br>Boolean<br>String<br>Number<br>Function<br>Array<br>RegExp<br>Date<br>Error<br><br>其他对象<br><br>Math<br>JSON<br><br>全局对象<br><br>内置对象，其实也叫内置构造器，它们可以通过&nbsp;new&nbsp;的方式创建一个新的实例对象。内置对象所属的类型就叫内置对象类型。其声明方式如下：<br>var&nbsp;i&nbsp;=&nbsp;new&nbsp;String(&quot;str&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;String&nbsp;Object<br>var&nbsp;h&nbsp;=&nbsp;new&nbsp;Number(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Number&nbsp;Object<br>var&nbsp;g&nbsp;=&nbsp;new&nbsp;Boolean(true);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Boolean&nbsp;Object<br>var&nbsp;j&nbsp;=&nbsp;new&nbsp;Object({name&nbsp;:&nbsp;&quot;Tom&quot;});&nbsp;//&nbsp;Object&nbsp;Object<br>var&nbsp;k&nbsp;=&nbsp;new&nbsp;Array([1,&nbsp;2,&nbsp;3,&nbsp;4]);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Array&nbsp;Object<br>var&nbsp;l&nbsp;=&nbsp;new&nbsp;Date();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Date&nbsp;Object<br>var&nbsp;m&nbsp;=&nbsp;new&nbsp;Error();<br>var&nbsp;n&nbsp;=&nbsp;new&nbsp;Function();<br>var&nbsp;o&nbsp;=&nbsp;new&nbsp;RegExp(&quot;&#92;&#92;d&quot;);<br><br>注意：虽然标准类型中有Boolean&nbsp;String&nbsp;Number&nbsp;Object，内置对象类型中也有Boolean&nbsp;String&nbsp;Number&nbsp;Object，但它们其实是通过不同的声明方式来进行区别的。标准类型通过直接赋值，而对象类型则是通过构造器实现初始化。<br><br><br><br>4、Object<br><br>构造器的原型对象在对象实例化时将会被添加到实例对象的原型链当中。&nbsp;__proto__&nbsp;为原型链属性，编码时不可被显像调用。但是实例化对象可以调用原型链上的方法。<br>用&nbsp;String/Number&nbsp;等构造器创建的对象原型链顶端对象始终是一个Object对象，因此这些对象可以调用Object的原型对象属性和方法。所以&nbsp;String/Number&nbsp;等构造器是&nbsp;Object&nbsp;的子类。<br>更多关于&nbsp;Object&nbsp;的内容可以在这里找到。<br><br>构造器说明：<br>Object&nbsp;是属性和方法的集合<br>String/Number/Boolean/Array/Date/Error&nbsp;构造器均为&nbsp;Object&nbsp;的子类并集成&nbsp;Object&nbsp;原型对象的属性及方法。<br>实例化方法<br>var&nbsp;obj0&nbsp;=&nbsp;new&nbsp;Object({name:&nbsp;&quot;X&quot;,&nbsp;age:&nbsp;13});<br>//&nbsp;常用方法<br>var&nbsp;obj1&nbsp;=&nbsp;{name:&nbsp;&quot;Q&quot;,&nbsp;age:&nbsp;14};<br>属性及方法<br>prototype<br>create<br>keys<br>...<br>**原型对象属性及其方法<br>constructor<br>toString<br>valueOf<br>hasOwnProperty<br>...<br>实例对象属性及方法<br>无<br><br>Object.create<br><br>功能：基于原型对象创造新对象<br>//&nbsp;Object.create(prototype[,&nbsp;propertiesObject])<br>var&nbsp;prototype&nbsp;=&nbsp;{name:&nbsp;&quot;X&quot;,&nbsp;age:&nbsp;13};<br>var&nbsp;obj&nbsp;=&nbsp;Object.create(proto);<br>Object.prototype.toString<br><br>功能：获取方法调用者的标准类型<br>//&nbsp;objectInstance.toString()<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>obj.toString();&nbsp;//&nbsp;Object<br>Object.prototype.hasOwnProperty<br><br>功能：判断一个属性是否是一个对象的自身属性<br>//&nbsp;objectInstance.hasOwnProperty(&quot;propertyName&quot;)<br>var&nbsp;obj&nbsp;=&nbsp;Object.create({a:&nbsp;1,&nbsp;b:&nbsp;2});<br>obj.c&nbsp;=&nbsp;3;<br>obj.hasOwnProperty(&quot;a&quot;);&nbsp;//&nbsp;false<br>obj.hasOwnProperty(&quot;c&quot;);&nbsp;//&nbsp;true<br>Boolean<br><br>构造器说明：值为&nbsp;true&nbsp;与&nbsp;false<br>属性及方法<br>prototype<br>**原型对象属性及其方法<br>constructor,&nbsp;toString,&nbsp;valueOf<br>String<br><br>构造器说明：单双引号内的字符串<br>实例化方法<br>&quot;Hello,&nbsp;world!&quot;<br>var&nbsp;str0&nbsp;=&nbsp;&quot;Xinyang&quot;;<br>var&nbsp;str1&nbsp;=&nbsp;new&nbsp;String(&quot;Xinyang&quot;);<br>属性及方法<br>prototype<br>fromCharCode（转换&nbsp;ASCII&nbsp;代码为字符）<br>原型对象属性及其方法<br>constructor<br>indexOf<br>replace<br>slice<br>split<br>charCodeAt<br>toLowerCase<br>...<br>String.prototype.indexOf<br><br>功能：获取子字符串在字符串中的索引<br>//&nbsp;stringObject.indexOf(searchValue,&nbsp;fromIndex)<br>var&nbsp;str&nbsp;=&nbsp;&quot;I&nbsp;am&nbsp;X.&nbsp;From&nbsp;China!&quot;;<br>var&nbsp;index&nbsp;=&nbsp;str.indexOf(&quot;a&quot;);&nbsp;//&nbsp;2<br>str.indexOf(&quot;a&quot;,&nbsp;index&nbsp;+&nbsp;1);&nbsp;//&nbsp;16<br>str.indexOf(&quot;Stupid&quot;);&nbsp;//&nbsp;-1&nbsp;字符串不存在<br>String.prototype.replace<br><br>功能：查找字符串替换成目标文字<br>//&nbsp;stringObject.replace(regexp/substr,&nbsp;replacement)<br>var&nbsp;str&nbsp;=&nbsp;&quot;apple&nbsp;is&nbsp;bad&quot;;<br>str&nbsp;=&nbsp;str.replace(&quot;bad&quot;,&nbsp;&quot;awesome&quot;);<br>String.prototype.split<br><br>功能：按分隔符将分隔符分成字符串数组<br>//&nbsp;stringObject.split(separator,&nbsp;arrayLength)<br>var&nbsp;str&nbsp;=&nbsp;&quot;1&nbsp;2&nbsp;3&nbsp;4&quot;;<br>str.split(&quot;&nbsp;&quot;);&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;];<br>str.split(&quot;&nbsp;&quot;,&nbsp;3);&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;];<br>str.split(/&#92;d+/);&nbsp;//&nbsp;[&quot;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&quot;]<br>Number<br><br>构造器说明：整型直接量，八进制直接量（0-），十六进制直接量（0x-)，浮点型直接量<br>实例化方法<br>10<br>1.2e5<br>var&nbsp;count&nbsp;=&nbsp;0x10;<br>var&nbsp;pi&nbsp;=&nbsp;new&nbsp;Number(3.1415);<br>属性及方法<br>prototype<br>MAX_VALUE<br>MIN_VALUE<br>NaN<br>NEGATIVE_INFINITY<br>POSITIVE_INFINITY<br>原型对象属性及其方法<br>constructor<br>toFixed<br>toExponential<br>...<br>Number.prototype.toFixed<br><br>功能：四舍五入至指定小数位<br>//&nbsp;numberObject.toFixed(num)<br>var&nbsp;num0&nbsp;=&nbsp;3.14;<br>num0.toFixed(1);&nbsp;//&nbsp;3.1<br>var&nbsp;num1&nbsp;=&nbsp;3.35;<br>num1.toFixed(1);&nbsp;//&nbsp;3.4<br>Array<br><br>构造器说明：定义数组对象<br>实例化方法<br>var&nbsp;a0&nbsp;=&nbsp;[1,&nbsp;&quot;abc&quot;,&nbsp;true,&nbsp;function(){}];<br>var&nbsp;a1&nbsp;=&nbsp;new&nbsp;Array();<br>var&nbsp;a2&nbsp;=&nbsp;new&nbsp;Array(1,&nbsp;&quot;abc&quot;,&nbsp;true);<br>属性及方法<br>prototype<br>isArray<br>原型对象属性及其方法<br>constructor<br>splice<br>forEach<br>find<br>concat<br>pop<br>push<br>reverse<br>shift<br>slice<br>...<br>Array.prototype.splice<br><br>功能：从数组中删除或添加元素，返回被删除的元素列表（作用域原有数组）<br>//&nbsp;arrayObject.splice(start,&nbsp;deleteCount[,&nbsp;item1[,&nbsp;item2[,&nbsp;...]]])<br>var&nbsp;arr&nbsp;=&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;a&quot;,&nbsp;&quot;b&quot;,&nbsp;&quot;6&quot;];<br>var&nbsp;ret&nbsp;=&nbsp;arr.splice(2,&nbsp;2,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;,&nbsp;&quot;5&quot;);&nbsp;//&nbsp;[&quot;a&quot;,&nbsp;&quot;b&quot;]<br>arr;&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;,&nbsp;5&quot;,&nbsp;&quot;6&quot;]<br>Array.prototype.forEach<br><br>功能：遍历元素组并调用回调函数<br>//&nbsp;arrayObject.forEach(callback[,&nbsp;thisArg])<br>//&nbsp;回调函数<br>//&nbsp;function&nbsp;callback(value,&nbsp;index,&nbsp;arrayObject)&nbsp;{...}<br>//&nbsp;value&nbsp;-&nbsp;当前值&nbsp;index&nbsp;-&nbsp;当前索引&nbsp;arrayObject&nbsp;-&nbsp;数组本身<br>function&nbsp;logArray(value,&nbsp;index,&nbsp;arrayObject)&nbsp;{<br>&nbsp;&nbsp;console.log(value);<br>&nbsp;&nbsp;console.log(value&nbsp;===&nbsp;array[index]);<br>}<br>[2,&nbsp;5,&nbsp;6,&nbsp;9].forEach(logArray);<br>Function<br><br>构造器说明：定义函数或新增对象构造器<br>实例化方法<br>//&nbsp;对象实例化<br>var&nbsp;f0&nbsp;=&nbsp;new&nbsp;Function(&quot;i&quot;,&nbsp;&quot;j&quot;,&nbsp;&quot;return&nbsp;(i&nbsp;+&nbsp;j)&quot;);<br>//&nbsp;函数关键字语句<br>function&nbsp;f1(i,&nbsp;j){return&nbsp;i&nbsp;+&nbsp;j;}<br>//&nbsp;函数表达式<br>var&nbsp;f3&nbsp;=&nbsp;function(i,&nbsp;j){return&nbsp;i&nbsp;+&nbsp;j;};<br>属性及方法<br>prototype<br>原型对象属性及其方法<br>constructor<br>apply<br>call<br>bind<br>实例对象属性和方法<br>length<br>prototype<br>arguments<br>caller<br>自定义对象构造器<br><br>下面的代码声明一个&nbsp;Point&nbsp;增加了一个move方法，最后创建了一个&nbsp;Point&nbsp;的实例对象。<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;2);<br>Function.prototype.apply<br><br>功能：通过参数指定调用者和函数参数并执行该函数<br>//&nbsp;functionObj.apply(thisArg[,&nbsp;argsArray])<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;1,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br>p.move.apply(circle,&nbsp;[2,&nbsp;1]);&nbsp;//&nbsp;{x:&nbsp;3,&nbsp;y:&nbsp;2,&nbsp;r:&nbsp;1}<br>Function.prototype.bind<br><br>功能：通过参数指定函数调用者和函数参数并返回该函数的引用<br>//&nbsp;functionObj.bind(thisArg[,&nbsp;arg1[,&nbsp;arg2[,&nbsp;...]]])<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;1,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br>var&nbsp;circleMoveRef&nbsp;=&nbsp;p.move.bind(circle,&nbsp;2,&nbsp;1);<br>setTimeout(circleMoveRef,&nbsp;1000);&nbsp;//&nbsp;{x:&nbsp;3,&nbsp;y:&nbsp;2,&nbsp;r:&nbsp;1}<br><br>//&nbsp;之间使用&nbsp;circleMoveRef()&nbsp;效果等同于&nbsp;apply()<br>circleMoveRef();<br>子类构造器<br><br>function&nbsp;Circle(x,&nbsp;y,&nbsp;r)&nbsp;{<br>&nbsp;&nbsp;Point.apply(this,&nbsp;[x,&nbsp;y]);<br>&nbsp;&nbsp;this.radius&nbsp;=&nbsp;r;<br>}<br>Circle.prototype&nbsp;=&nbsp;Object.create(Point.prototype);<br>Circle.prototype.constructor&nbsp;=&nbsp;Circle;<br>Circle.prototype.area&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;return&nbsp;Math.PI&nbsp;*&nbsp;this.radius&nbsp;*&nbsp;this.radius;<br>}<br><br>var&nbsp;c&nbsp;=&nbsp;new&nbsp;Circle(1,&nbsp;2,&nbsp;3);<br>c.move(2,&nbsp;2);<br>c.area();<br>函数调用<br><br>()<br>apply<br>call<br>函数参数<br><br>形参个数不一定等于实参个数<br>值专递<br>通过参数类型检查实现函数重载<br>arguments<br><br>arguments&nbsp;的常用属性<br>length&nbsp;实参个数<br>0...arguments.length-1&nbsp;实参属性名称（key）<br>callee&nbsp;函数本身<br>function&nbsp;max(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(max.length&nbsp;===&nbsp;arguments.length)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a&gt;b?a:b;<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;_max&nbsp;=&nbsp;arguments[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;arguments.length;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(_max&nbsp;&lt;&nbsp;arguments[i])&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_max&nbsp;=&nbsp;arguments[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_max;<br>&nbsp;&nbsp;}<br>}<br>值专递<br><br>函数参数的值专递是参数复制都是栈内存中的复制。<br><br>//&nbsp;原始类型<br>function&nbsp;plusplus(num)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;num++;<br>}<br>var&nbsp;count&nbsp;=&nbsp;0;<br>var&nbsp;result&nbsp;=&nbsp;plusplus(count);&nbsp;//&nbsp;result&nbsp;=&nbsp;1;&nbsp;count&nbsp;=&nbsp;0;<br><br>//&nbsp;引用类型<br>function&nbsp;setName(obj)&nbsp;{<br>&nbsp;&nbsp;obj.name&nbsp;=&nbsp;&quot;obama&quot;;<br>}<br>var&nbsp;president&nbsp;=&nbsp;{name:&nbsp;&quot;bush&quot;};<br>setName(president);&nbsp;//&nbsp;{name:&nbsp;&quot;obama&quot;};<br>函数重载<br><br>以&nbsp;Require.JS&nbsp;中的&nbsp;define()&nbsp;为例：<br>define(function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>define([&quot;lib&quot;],&nbsp;function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>define(&quot;math&quot;,&nbsp;[&quot;lib&quot;],&nbsp;function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>//&nbsp;define&nbsp;的实现代码<br>/**<br>&nbsp;*&nbsp;The&nbsp;function&nbsp;that&nbsp;handles&nbsp;definitions&nbsp;of&nbsp;modules.&nbsp;Differs&nbsp;from<br>&nbsp;*&nbsp;require()&nbsp;in&nbsp;that&nbsp;a&nbsp;string&nbsp;for&nbsp;the&nbsp;module&nbsp;should&nbsp;be&nbsp;the&nbsp;first&nbsp;argument,<br>&nbsp;*&nbsp;and&nbsp;the&nbsp;function&nbsp;to&nbsp;execute&nbsp;after&nbsp;dependencies&nbsp;are&nbsp;loaded&nbsp;should<br>&nbsp;*&nbsp;return&nbsp;a&nbsp;value&nbsp;to&nbsp;define&nbsp;the&nbsp;module&nbsp;corresponding&nbsp;to&nbsp;the&nbsp;first&nbsp;argument&quot;s<br>&nbsp;*&nbsp;name.<br>&nbsp;*/<br>define&nbsp;=&nbsp;function&nbsp;(name,&nbsp;deps,&nbsp;callback)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;node,&nbsp;context;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//Allow&nbsp;for&nbsp;anonymous&nbsp;modules<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(typeof&nbsp;name&nbsp;!==&nbsp;&quot;string&quot;)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Adjust&nbsp;args&nbsp;appropriately<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback&nbsp;=&nbsp;deps;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deps&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//This&nbsp;module&nbsp;may&nbsp;not&nbsp;have&nbsp;dependencies<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!isArray(deps))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback&nbsp;=&nbsp;deps;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deps&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;省略以下代码<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...<br>};<br>RegExp<br><br>构造器说明：用于定义正则表达式，一个&nbsp;RegExp&nbsp;对象包含一个正则表达式和关联的标志<br>定义方法<br><br>/pattern/flags<br>new&nbsp;RegExp(pattern[,&nbsp;flags]);<br>属性及方法<br>prototype<br>原型对象属性及其方法<br>constructor<br>test<br>exec<br>...<br>RegExp.prototype.test<br><br>功能：使用正则表达式对字符串进行测试，并返回测试结果<br>//&nbsp;regexObj.text(str)<br>var&nbsp;reg&nbsp;=&nbsp;/^abc/i;<br>reg.test(&quot;Abc123&quot;);&nbsp;//&nbsp;true<br>reg.test(&quot;1Abc1234&quot;);&nbsp;//&nbsp;false<br>Date<br><br>构造器说明：用于定义日期对象<br>定义方法<br><br>var&nbsp;date0&nbsp;=&nbsp;new&nbsp;Date();<br>var&nbsp;date1&nbsp;=&nbsp;new&nbsp;Date(2014,&nbsp;3,&nbsp;1,&nbsp;7,&nbsp;1,&nbsp;1,&nbsp;100);<br>属性及方法<br>prototype<br>parse<br>now<br>...<br>原型对象属性及其方法<br>constructor<br>Date<br>getDate<br>getHours<br>setDate<br>setHours<br>...<br>标准内置对象<br><br>Math<br><br>对象说明：拥有属性和方法的单一对象主要用于数字计算<br>对象属性：<br>E<br>PI<br>SQRT2<br>...<br>对象方法：<br>floor<br>random<br>abs<br>max<br>cos<br>ceil<br>Math.floor<br><br>功能：向下取整<br>//&nbsp;Math.floor(num)<br>Math.floor(0.97);&nbsp;//&nbsp;0<br>Math.floor(5.1);&nbsp;//&nbsp;5<br>Math.floor(-5.1);&nbsp;//6<br>相似方法：ceil，round<br>Math.random<br><br>功能：返回&nbsp;0~1&nbsp;之间的浮点数<br>//&nbsp;Math.random()<br>Math.random();&nbsp;//&nbsp;0.14523562323461<br>JSON<br><br>对象说明：用于存储和交换文本信息<br>对象方法：<br>parse<br>stringify<br>JSON.stringify<br><br>功能：将&nbsp;JSON&nbsp;对象转换为字符转<br>//&nbsp;JSON.stringify(value[,&nbsp;replacer[,&nbsp;space]])<br>var&nbsp;json&nbsp;=&nbsp;{&quot;name&quot;:&nbsp;&quot;X&quot;};<br>JSON.stringify(json);&nbsp;//&nbsp;&quot;{&quot;name&quot;:&quot;X&quot;}&quot;<br>JSON.parse<br><br>功能：将&nbsp;JSON&nbsp;字符转转换为对象<br>//&nbsp;JSON.parse(text[,&nbsp;reviver])<br>var&nbsp;jsonStr&nbsp;=&nbsp;&quot;{&quot;name&quot;:&quot;X&quot;}&quot;;<br>JSON.parse(jsonStr);&nbsp;//&nbsp;{name:&nbsp;&quot;X&quot;}<br>全局对象<br><br>全局对象定义了一系列的属性和方法在编程过程中可以被之间调用。<br>属性：NaN，Infinity，undefined<br>方法：<br><br>parseInt<br>parseFloat<br>isNaN<br>isFinite<br>eval<br>处理&nbsp;URI&nbsp;方法：<br>encodedURIComponent<br>decodeURIComponent<br>encodedURI<br>decodeURI<br>构造器属性：<br>Boolean<br>String<br>Number<br>Object<br>Function<br>Array<br>Date<br>Error<br>...<br>对象属性：<br>Math<br>JSON<br>NaA<br><br>非数字值：表示错误或无意义的运算结果，NaN&nbsp;参与运算仍会返回&nbsp;NaA，且&nbsp;NaN&nbsp;不等于任何值，包括它本身。可以使用&nbsp;isNaN()&nbsp;判断运算结果的类型是否为&nbsp;NaN。<br>isNaN(NaN);&nbsp;//&nbsp;true<br>isNaN(4&nbsp;-&nbsp;&quot;2a&quot;);&nbsp;//&nbsp;true;<br>parseInt<br><br>功能：转换字符串成数字<br>//&nbsp;parseInt(string[,&nbsp;radix])<br>//&nbsp;radix&nbsp;-&nbsp;为进制数<br>parseInt(&quot;010&quot;);&nbsp;//&nbsp;10<br>parseInt(&quot;010&quot;,&nbsp;8)&nbsp;//&nbsp;8<br>parseInt(&quot;010&quot;,&nbsp;16)&nbsp;//&nbsp;16<br><br>parseInt(&quot;0x1f&quot;);&nbsp;//&nbsp;31<br>parseInt(&quot;0x1f&quot;,&nbsp;16);&nbsp;//&nbsp;31<br>parseInt(&quot;1f&quot;);&nbsp;//&nbsp;1<br>parseInt(&quot;1f&quot;,&nbsp;16);&nbsp;//&nbsp;31<br>eval<br><br>功能：计算字符串并执行其中的&nbsp;JavaScript&nbsp;代码（会带来安全性和代码逻辑问题，通常不建议使用）<br>//&nbsp;eval(string)<br>var&nbsp;res&nbsp;=&nbsp;&quot;{&quot;error&quot;:&nbsp;&quot;0&quot;,&nbsp;&quot;msg&quot;:&nbsp;&quot;OK&quot;};<br>var&nbsp;obj;<br>if&nbsp;(!JSON)&nbsp;{<br>&nbsp;&nbsp;obj&nbsp;=&nbsp;eval(&quot;(&quot;&nbsp;+&nbsp;res&nbsp;+&nbsp;&quot;)&quot;);<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;obj&nbsp;=&nbsp;JSON.parse(res);<br>}<br>encodedURIComponent<br><br>功能：将&nbsp;URI&nbsp;参数中的特殊字符，中文等作为&nbsp;URI&nbsp;的一部分进行编码<br>var&nbsp;uri&nbsp;=&nbsp;&quot;http://w3schools.com/my&nbsp;test.asp?name=ståle&car=saab&quot;;<br>var&nbsp;res&nbsp;=&nbsp;encodeURIComponent(uri);<br><br>//&nbsp;结果<br>//&nbsp;http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst%C3%A5le%26car%3Dsaab","addLink":"","date":"2016-01-07 14:58","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4},{"addArticleTtitle":"变量作用域","classify":"javascript","addarticleContent":"变量的作用域值的是变量的生命周期和作用范围（全局与局部作用域的区别）。<br>作用域介绍<br><br>静态作用域<br><br>静态作用域有称为词法作用域，即指其在编译的阶段就可以决定变量的引用。静态作用域只更变量定义的位置有关与代码执行的顺序无关。<br>var&nbsp;x&nbsp;=&nbsp;0;<br>function&nbsp;foo()&nbsp;{<br>&nbsp;&nbsp;alert(x);<br>}<br><br>function&nbsp;bar()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;20;<br>&nbsp;&nbsp;foo();<br>}<br><br>foo();<br><br><br>动态作用域<br><br>动态作用域的变量引用只可在程序运行时刻决定（其通常通过动态栈来进行管理）。<br>var&nbsp;x&nbsp;=&nbsp;0;<br>function&nbsp;foo()&nbsp;{<br>&nbsp;&nbsp;alert(x);<br>}<br><br>function&nbsp;bar()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;20;<br>&nbsp;&nbsp;foo();<br>}<br><br>foo();<br><br><br>JavaScript&nbsp;变量作用域<br><br>JavaScript&nbsp;（1）使用静态作用域，（2）其没有块级作用域（只有函数作用域，就是只有&nbsp;function&nbsp;用于可以定义作用域），（3）在&nbsp;ES5&nbsp;之作使用词法环境来管理作用域。<br>词法环境<br><br>组成<br><br>词法环境用来描述静态作用域的数据结构。它由环节记录和外部词法环境的引用组成。+<br><br>环境记录（record）（指形参，变量，函数等）<br>外部词法环境的引用（outer）<br>创建<br><br>在一段代码执行之前，先初始化词法环境。会被初始化的有：<br>形参<br>函数定义（创建函数对象，会保存当前作用域。见下图）<br>变量定义（所有初始化值均为&nbsp;undefined）<br><br>结构<br><br>var&nbsp;x&nbsp;=&nbsp;10;<br>function&nbsp;foo(y)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;z&nbsp;=&nbsp;30;<br>&nbsp;&nbsp;function&nbsp;bar(q)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y&nbsp;+&nbsp;z&nbsp;+&nbsp;q;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return&nbsp;bar;<br>}<br>var&nbsp;bar&nbsp;=&nbsp;foo(20);<br>bar(40);<br>全局词法作用域（初始化状态）<br><br>关于词法环境的问题<br><br>命名冲突<br><br>形参，函数定义，变量名称命名冲突。其中的优先级的排序如下：<br>函数定义&nbsp;&gt;&nbsp;形参&nbsp;&gt;&nbsp;变量<br>arguments&nbsp;的使用<br>为函数中定义好的变量。<br>函数表达式与函数定义的区别<br>函数表达式是在执行时才创建函数对象。<br>函数定义为在代码执行之前就进行创建的。<br>with&nbsp;语句<br><br>with&nbsp;会创造一个临时作用域。<br>var&nbsp;foo&nbsp;=&nbsp;&quot;abc&quot;;<br>with({<br>&nbsp;&nbsp;foo:&nbsp;&quot;bar&quot;;<br>})&nbsp;{<br>&nbsp;&nbsp;function&nbsp;f()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(foo);<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;(function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(foo);<br>&nbsp;&nbsp;})();<br>&nbsp;&nbsp;f();<br>}<br>try-catch&nbsp;句法<br><br>try&nbsp;{<br>&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;10;<br>&nbsp;&nbsp;throw&nbsp;new&nbsp;Error();<br>}&nbsp;catch&nbsp;(e)&nbsp;{<br>&nbsp;&nbsp;function&nbsp;f()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(e);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;(function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(e);<br>&nbsp;&nbsp;})();<br>&nbsp;&nbsp;f();<br>}<br>带名称的函数表达式<br><br>当一个函数表达式有了名称之后，JavaScript&nbsp;会创建一个新的词法环境。并在这个词法环境中用有一个属性&nbsp;A&nbsp;指向这个函数，同时这个属性&nbsp;A&nbsp;指向的函数是不可被修改的。<br>下面例子为不常规的写法<br>(function&nbsp;A(){<br>&nbsp;&nbsp;A&nbsp;=&nbsp;1;<br>&nbsp;&nbsp;alert(A);<br>})();","addLink":"","date":"2016-01-07 15:01","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":5},{"addArticleTtitle":"表达式与运算符","classify":"javascript","addarticleContent":"表达式<br><br>表达式为&nbsp;JavaScript&nbsp;的短语可执行并生成值。<br>1.7&nbsp;//&nbsp;字面量<br>&quot;1.7&quot;<br>var&nbsp;a&nbsp;=&nbsp;1;<br>var&nbsp;b&nbsp;=&nbsp;&quot;2&quot;;<br>var&nbsp;c&nbsp;=&nbsp;(1.7&nbsp;+&nbsp;a)&nbsp;*&nbsp;&quot;3&quot;&nbsp;-&nbsp;b<br>运算符<br><br>算数运算符&nbsp;（+&nbsp;-&nbsp;*&nbsp;/&nbsp;%）<br>关系运算符&nbsp;（&gt;&nbsp;&lt;&nbsp;==&nbsp;!=&nbsp;&gt;=&nbsp;&lt;=&nbsp;===&nbsp;!==)<br>逻辑运算符&nbsp;（!&nbsp;&&&nbsp;||）<br>位运算符&nbsp;（&&nbsp;|&nbsp;^&nbsp;~&nbsp;&lt;&lt;&nbsp;&gt;&gt;）<br>负值运算符&nbsp;（=）<br>条件运算符&nbsp;（?:）<br>逗号运算符&nbsp;（,）<br>对象运算符&nbsp;（new&nbsp;delete&nbsp;.&nbsp;[]&nbsp;instanceof）<br>===&nbsp;全等符号<br><br>全等运算符用于盘对左右两边的对象或值是否类型相同且值相等。<br>伪代码拆解<br>function&nbsp;totalEqual(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;类型相同)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;是引用类型)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;是同一引用)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;值类型<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;值相等)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;}<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;&quot;123&quot;;<br>var&nbsp;b&nbsp;=&nbsp;&quot;123&quot;;<br>var&nbsp;c&nbsp;=&nbsp;&quot;4&quot;;<br>var&nbsp;aObj&nbsp;=&nbsp;new&nbsp;String(&quot;123&quot;);<br>var&nbsp;bObj&nbsp;=&nbsp;new&nbsp;String(&quot;123&quot;);<br>var&nbsp;cObj&nbsp;=&nbsp;aObj;<br><br>a&nbsp;===&nbsp;aObj&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;false<br>aObj&nbsp;===&nbsp;bObj&nbsp;&nbsp;&nbsp;//&nbsp;false<br>aObj&nbsp;===&nbsp;cObj&nbsp;&nbsp;&nbsp;//&nbsp;true<br>a&nbsp;===&nbsp;b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;true<br>a&nbsp;===&nbsp;c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;false<br>==<br><br>==&nbsp;用于判断操作符两边的对象或值是否相等。<br>伪代码拆解<br>function&nbsp;equal(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;类型相同)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a&nbsp;===&nbsp;b;<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;类型不同<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Number(a)&nbsp;===&nbsp;Number(b);&nbsp;//&nbsp;优先转换数值类型<br>&nbsp;&nbsp;}<br>}<br>例子<br><br>&quot;99&quot;&nbsp;==&nbsp;99;&nbsp;//&nbsp;true<br>new&nbsp;String(&quot;99&quot;)&nbsp;==&nbsp;99;&nbsp;//&nbsp;true<br>true&nbsp;==&nbsp;1;&nbsp;//&nbsp;true<br>false&nbsp;==&nbsp;0;&nbsp;//&nbsp;true<br>&quot;&#92;n&#92;n&#92;n&quot;&nbsp;==&nbsp;//&nbsp;true<br>例外规则<br><br>null&nbsp;==&nbsp;undefined&nbsp;结果为真&nbsp;true<br>在有&nbsp;null/undefined&nbsp;参与的&nbsp;==&nbsp;运算是不进行隐式转换。<br>0&nbsp;==&nbsp;null;&nbsp;//&nbsp;false<br>null&nbsp;==&nbsp;false;&nbsp;//&nbsp;false<br>&quot;undefined&quot;&nbsp;==&nbsp;undefined;&nbsp;//&nbsp;false<br>!&nbsp;取反<br><br>!x&nbsp;用于表达&nbsp;x&nbsp;表达式的运行结果转换成布尔值（Boolean）之后取反的结果。!!x&nbsp;则表示取&nbsp;x&nbsp;表达式的运行结果的布尔值。<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>var&nbsp;a&nbsp;=&nbsp;!obj&nbsp;//&nbsp;false;<br>var&nbsp;a&nbsp;=&nbsp;!!obj&nbsp;//&nbsp;true;<br>&&&nbsp;逻辑与<br><br>x&nbsp;&&&nbsp;y&nbsp;如果&nbsp;x&nbsp;表达式的运行交过转换成&nbsp;Boolean&nbsp;值为&nbsp;false&nbsp;则不运行表达式&nbsp;y&nbsp;而直接返回&nbsp;x&nbsp;表达式的运行结果。相反，如果&nbsp;x&nbsp;表达式的运行交过转换成&nbsp;Boolean&nbsp;值为&nbsp;true&nbsp;则运行表达式&nbsp;y&nbsp;并返回&nbsp;y&nbsp;表达式的运行结果。<br>伪代码拆解<br>var&nbsp;ret&nbsp;=&nbsp;null;<br>if&nbsp;(!!(ret&nbsp;=&nbsp;x))&nbsp;{<br>&nbsp;&nbsp;return&nbsp;y;<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;return&nbsp;ret;<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;0&nbsp;&&&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;0<br>var&nbsp;b&nbsp;=&nbsp;1&nbsp;&&&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;2<br>||&nbsp;逻辑或<br><br>x&nbsp;||&nbsp;y&nbsp;如果&nbsp;x&nbsp;表达式的运行结果转换为&nbsp;Boolean&nbsp;值为&nbsp;true，则不运行&nbsp;表达式&nbsp;y&nbsp;而直接返回表达式&nbsp;x&nbsp;的运算结果。（与&nbsp;&&&nbsp;方式相反）<br>伪代码拆解<br>var&nbsp;ret&nbsp;=&nbsp;null;<br>if&nbsp;(!!(ret&nbsp;=&nbsp;x))&nbsp;{<br>&nbsp;&nbsp;return&nbsp;ret;<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;return&nbsp;y;<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;0&nbsp;||&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;2<br>var&nbsp;b&nbsp;=&nbsp;1&nbsp;||&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;1<br>元算符优先级（Operator&nbsp;Precedence）<br><br>+&nbsp;-&nbsp;*&nbsp;/&nbsp;高于&nbsp;&&<br>*&nbsp;/&nbsp;高于&nbsp;+&nbsp;-<br>&&&nbsp;高于&nbsp;?:<br>()&nbsp;内优先级高于之外<br>NOTE：和数学上的算术优先级类似，同级从左到右计算。如有疑问加上&nbsp;()&nbsp;既可解决优先级问题。<br>Precedence&nbsp;&nbsp;Operator&nbsp;type&nbsp;&nbsp;Associativity&nbsp;&nbsp;Individual&nbsp;operators<br>19&nbsp;&nbsp;Grouping&nbsp;&nbsp;n/a&nbsp;&nbsp;(&nbsp;…&nbsp;)<br>18&nbsp;&nbsp;Member&nbsp;Access&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;.&nbsp;…<br>Computed&nbsp;Member&nbsp;Access&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;[&nbsp;…&nbsp;]<br>new&nbsp;(with&nbsp;argument&nbsp;list)&nbsp;&nbsp;n/a&nbsp;&nbsp;new&nbsp;…&nbsp;(&nbsp;…&nbsp;)<br>17&nbsp;&nbsp;Function&nbsp;Call&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;(&nbsp;…&nbsp;)<br>new&nbsp;(without&nbsp;argument&nbsp;list)&nbsp;&nbsp;right-to-left&nbsp;&nbsp;new&nbsp;…<br>16&nbsp;&nbsp;Postfix&nbsp;Increment&nbsp;&nbsp;n/a&nbsp;&nbsp;…&nbsp;++<br>Postfix&nbsp;Decrement&nbsp;&nbsp;n/a&nbsp;&nbsp;…&nbsp;--<br>15&nbsp;&nbsp;Logical&nbsp;NOT&nbsp;&nbsp;right-to-left&nbsp;&nbsp;!&nbsp;…<br>Bitwise&nbsp;NOT&nbsp;&nbsp;right-to-left&nbsp;&nbsp;~&nbsp;…<br>Unary&nbsp;Plus&nbsp;&nbsp;right-to-left&nbsp;&nbsp;+&nbsp;…<br>Unary&nbsp;Negation&nbsp;&nbsp;right-to-left&nbsp;&nbsp;-&nbsp;…<br>Prefix&nbsp;Increment&nbsp;&nbsp;right-to-left&nbsp;&nbsp;++&nbsp;…<br>Prefix&nbsp;Decrement&nbsp;&nbsp;right-to-left&nbsp;&nbsp;--&nbsp;…<br>typeof&nbsp;&nbsp;right-to-left&nbsp;&nbsp;typeof&nbsp;…<br>void&nbsp;&nbsp;right-to-left&nbsp;&nbsp;void&nbsp;…<br>delete&nbsp;&nbsp;right-to-left&nbsp;&nbsp;delete&nbsp;…<br>14&nbsp;&nbsp;Multiplication&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;*&nbsp;…<br>Division&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;/&nbsp;…<br>Remainder&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;%&nbsp;…<br>13&nbsp;&nbsp;Addition&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;+&nbsp;…<br>Subtraction&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;-&nbsp;…<br>12&nbsp;&nbsp;Bitwise&nbsp;Left&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;&lt;&nbsp;…<br>Bitwise&nbsp;Right&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&gt;&nbsp;…<br>Bitwise&nbsp;Unsigned&nbsp;Right&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&gt;&gt;&nbsp;…<br>11&nbsp;&nbsp;Less&nbsp;Than&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;&nbsp;…<br>Less&nbsp;Than&nbsp;Or&nbsp;Equal&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;=&nbsp;…<br>Greater&nbsp;Than&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&nbsp;…<br>Greater&nbsp;Than&nbsp;Or&nbsp;Equal&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;=&nbsp;…<br>in&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;in&nbsp;…<br>instanceof&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;instanceof&nbsp;…<br>10&nbsp;&nbsp;Equality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;==&nbsp;…<br>Inequality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;!=&nbsp;…<br>Strict&nbsp;Equality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;===&nbsp;…<br>Strict&nbsp;Inequality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;!==&nbsp;…<br>9&nbsp;&nbsp;Bitwise&nbsp;AND&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&&nbsp;…<br>8&nbsp;&nbsp;Bitwise&nbsp;XOR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;^&nbsp;…<br>7&nbsp;&nbsp;Bitwise&nbsp;OR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;|&nbsp;…<br>6&nbsp;&nbsp;Logical&nbsp;AND&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&&&nbsp;…<br>5&nbsp;&nbsp;Logical&nbsp;OR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;||&nbsp;…<br>4&nbsp;&nbsp;Conditional&nbsp;&nbsp;right-to-left&nbsp;&nbsp;…&nbsp;?&nbsp;…&nbsp;:&nbsp;…<br>3&nbsp;&nbsp;Assignment&nbsp;&nbsp;right-to-left&nbsp;&nbsp;…&nbsp;=&nbsp;…<br>…&nbsp;+=&nbsp;…<br>…&nbsp;-=&nbsp;…<br>…&nbsp;*=&nbsp;…<br>…&nbsp;/=&nbsp;…<br>…&nbsp;%=&nbsp;…<br>…&nbsp;&lt;&lt;=&nbsp;…<br>…&nbsp;&gt;&gt;=&nbsp;…<br>…&nbsp;&gt;&gt;&gt;=&nbsp;…<br>…&nbsp;&=&nbsp;…<br>…&nbsp;^=&nbsp;…<br>…&nbsp;|=&nbsp;…<br>2&nbsp;&nbsp;yield&nbsp;&nbsp;right-to-left&nbsp;&nbsp;yield&nbsp;…<br>1&nbsp;&nbsp;Spread&nbsp;&nbsp;n/a&nbsp;&nbsp;...&nbsp;…<br>0&nbsp;&nbsp;Comma&nbsp;/&nbsp;Sequence&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;,&nbsp;…","addLink":"","date":"2016-01-07 15:04","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":6},{"addArticleTtitle":"语句","classify":"javascript","addarticleContent":"条件控制语句<br><br>其中expression可以使用整型，字符串，甚至表达式<br>if&nbsp;(expression0)&nbsp;{statement0}<br>else&nbsp;if&nbsp;(expression1)&nbsp;{statement1}<br>else&nbsp;{statement2}<br><br>//&nbsp;JavaScript&nbsp;中的&nbsp;case&nbsp;可以使用整型，字符串，甚至表达式<br>switch(persion.type)&nbsp;{<br>&nbsp;&nbsp;case&nbsp;&quot;teacher&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement1<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case&nbsp;&quot;student&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement2<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement3<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}<br>循环控制语句<br><br>while(expression)&nbsp;{statement}<br><br>//&nbsp;至少执行一次<br>do&nbsp;{statement}&nbsp;while(expression);<br><br>for&nbsp;(initialise;&nbsp;test_expresiion;&nbsp;increment)&nbsp;{statement}<br><br>//&nbsp;跳过下面代码并进入下一轮循环<br>continue;<br><br>//&nbsp;退出当前循环<br>break;<br>for-in<br><br>用于遍历对象的全部属性。<br>function&nbsp;Car(id,&nbsp;type,&nbsp;color)&nbsp;{<br>&nbsp;&nbsp;this.type&nbsp;=&nbsp;type;<br>&nbsp;&nbsp;this.color&nbsp;=&nbsp;color;<br>&nbsp;&nbsp;this.id&nbsp;=&nbsp;id;<br>}<br><br>var&nbsp;benz&nbsp;=&nbsp;new&nbsp;Car(&quot;benz&quot;,&nbsp;&quot;black&quot;,&nbsp;&quot;red&quot;);<br>Car.prototype.start&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.type&nbsp;+&nbsp;&quot;&nbsp;start&quot;);<br>}<br><br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>}<br><br>//&nbsp;输出结果<br>type:black<br>color:red<br>id:benz<br>start:function&nbsp;(){<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.type&nbsp;+&nbsp;&quot;&nbsp;start&quot;);<br>}<br><br>//&nbsp;-----------<br><br>//&nbsp;如不需原型对象上的属性可以使用&nbsp;hasOwnProperty<br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(benz.hasOwnProperty(key))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;输出结果<br>type:black<br>color:red<br>id:benz<br>如不需原型对象上的属性可以使用&nbsp;hasOwnProperty<br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(benz.hasOwnProperty(key))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>&nbsp;&nbsp;}<br>}<br>/*&nbsp;输出结果<br>type:black<br>color:red<br>id:benz&nbsp;*/<br>异常处理语句<br><br>try{<br>&nbsp;&nbsp;//&nbsp;statements<br>&nbsp;&nbsp;throw&nbsp;new&nbsp;Error();<br>catch(e){<br>&nbsp;&nbsp;//&nbsp;statements<br>}<br>finally{<br>&nbsp;&nbsp;//&nbsp;statements<br>}<br>with&nbsp;语句<br><br>with&nbsp;语句是&nbsp;JavaScript&nbsp;中特有的语句形式，它主要有两个作用：<br>其一，其用于缩短特定情况下必须书写的代码量。它可以暂时改变变量的作用域。<br>//&nbsp;使用&nbsp;with&nbsp;之前<br>(function(){<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;Math.cos(3&nbsp;*&nbsp;Math.PI)&nbsp;+&nbsp;Math.sin(Math.LN10);<br>&nbsp;&nbsp;var&nbsp;y&nbsp;=&nbsp;Math.tan(14&nbsp;*&nbsp;Math.E);<br>})();<br><br>//&nbsp;使用&nbsp;with<br>(function(){<br>&nbsp;&nbsp;with(Math)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;cos(3&nbsp;*&nbsp;PI)&nbsp;+&nbsp;sin(LN10);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;y&nbsp;=&nbsp;tan(14&nbsp;*&nbsp;E);<br>&nbsp;&nbsp;}<br>})();<br><br><br>其二，改变变量的作用域，将with语句中的对象添加至作用域链的头部。<br>frame[1].document.forms[0].name.value&nbsp;=&nbsp;&quot;&quot;;<br>frame[1].document.forms[0].address.value&nbsp;=&nbsp;&quot;&quot;;<br>frame[1].document.forms[0].email.value&nbsp;=&nbsp;&quot;&quot;;<br><br>with(frame[1].document.[0])&nbsp;{<br>&nbsp;&nbsp;name.value&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;address.value&nbsp;=&nbsp;&quot;&quot;<br>&nbsp;&nbsp;email.value&nbsp;=&nbsp;&quot;&quot;;<br>}<br>缺点就是导致&nbsp;JavaScript&nbsp;语句的可执行性下降，所以通常情况下因尽可能的避免使用。","addLink":"","date":"2016-01-07 15:08","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":7},{"addArticleTtitle":"闭包","classify":"javascript","addarticleContent":"闭包有函数和与其相关的引用环境的组合而成<br>闭包允许函数访问其引用环境中的变量（又称自由变量）<br>广义上来说，所有&nbsp;JavaScript&nbsp;的函数都可以成为闭包，因为&nbsp;JavaScript&nbsp;函数在创建时保存了当前的词法环境。<br>function&nbsp;add()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;i&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;return&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(i++);<br>&nbsp;&nbsp;}<br>}<br>var&nbsp;f&nbsp;=&nbsp;add();<br>f();<br>f();<br>闭包的应用<br><br>保存变量现场<br><br><br>//&nbsp;错误方法<br>var&nbsp;addHandlers&nbsp;=&nbsp;function(nodes)&nbsp;{<br>&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;len&nbsp;=&nbsp;nodes.length;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;nodes[i].onclick&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;正确方法<br>var&nbsp;addHandlers&nbsp;=&nbsp;function(nodes)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;helper&nbsp;=&nbsp;function(i)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;var&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;len&nbsp;=&nbsp;nodes.length;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;nodes[i].onclick&nbsp;=&nbsp;helper(i);<br>&nbsp;&nbsp;}<br>}<br>封装<br><br><br>//&nbsp;将&nbsp;observerList&nbsp;封装在&nbsp;observer&nbsp;中<br>var&nbsp;observer&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;observerList&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;function(obj)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observerList.push(obj);<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;empty:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observerList&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;getCount:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;observerList.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;get:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;observerList;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;};<br>})();","addLink":"","date":"2016-01-07 15:10","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":8},{"addArticleTtitle":"面向对象","classify":"javascript","addarticleContent":"程序设计方法<br><br>程序设计描述系统如何通过程序来实现的过程，其为一种设计方法与语言实现无关。常见的设计方法有面向流程与面向对象。<br>面向过程<br><br>以程序的过程为中心，采用自定而下逐步细化的方法来实现。常见的面向过程语言有&nbsp;C、Fortran、Pascall。<br><br>面向对象<br><br>将对象作为程序的基本单元，将程序分解为数据和操作的集合。常见的面向过程语言有&nbsp;smalltalk（也是&nbsp;Objective-C&nbsp;的父亲）、Java、C++。<br><br>概念<br><br>类（Class）、对象（Object）<br>属性（Property）、方法（Method）<br>基本特点<br><br>继承（Inheritance）<br>封装（Encapsulation）<br>多态（Polymorphism）<br>JavaScript&nbsp;面向对象<br><br>constructor<br><br>对象的构造器，也可称之为构造类型。<br>//&nbsp;使用&nbsp;new&nbsp;关键字创建<br>var&nbsp;o&nbsp;=&nbsp;new&nbsp;Object();<br>var&nbsp;a&nbsp;=&nbsp;new&nbsp;Array();<br>var&nbsp;d&nbsp;=&nbsp;new&nbsp;Date();<br>&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;object&nbsp;&nbsp;&nbsp;&nbsp;constructor<br><br>//&nbsp;使用直接量创建<br>var&nbsp;o&nbsp;=&nbsp;{name:&nbsp;&quot;Xinyang&quot;};<br>var&nbsp;a&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3];<br>自定义构造器<br><br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Person(&quot;Q&quot;,&nbsp;12,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>创建构造器的方法（3&nbsp;种）<br><br>function&nbsp;ClassName()&nbsp;{...}<br>var&nbsp;Class&nbsp;=&nbsp;function()&nbsp;{...}<br>var&nbsp;Class&nbsp;=&nbsp;new&nbsp;Function()<br>NOTE:&nbsp;并不是所有函数都可以被当成构造器，例如&nbsp;var&nbsp;o&nbsp;=&nbsp;new&nbsp;Math.min()。通常自定义的函数均可当做构造器来使用。内置对象的构造器也可被当做构造器。<br>NOTE+：如果构造器有返还值并为对象类型，则对象将被直接返回。<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;//&nbsp;!!!&nbsp;注意这里<br>&nbsp;&nbsp;return&nbsp;{};<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;X&quot;,&nbsp;13,&nbsp;new&nbsp;Date());<br>console.log(X.name);&nbsp;//&nbsp;undefined;<br>this<br><br>this&nbsp;在不同环境中指代的对象不同（this&nbsp;指代的值可在函数运行过程中发生改变）。<br>出现场景&nbsp;&nbsp;所指代值<br>全局环境&nbsp;&nbsp;全局对象（window&nbsp;在浏览器环境中时）<br>constructor&nbsp;&nbsp;创建的新实例对象<br>函数调用&nbsp;&nbsp;函数的调用者<br>new&nbsp;Function()&nbsp;&nbsp;全局对象<br>eval()&nbsp;&nbsp;调用上下文中的&nbsp;this<br>全局环境中<br><br>全局环境中&nbsp;this&nbsp;指代全局对象，既&nbsp;window&nbsp;在浏览器环境中。<br>//&nbsp;以下的所有&nbsp;this&nbsp;均指代全局对象<br>var&nbsp;a&nbsp;=&nbsp;10;<br>alert(this.a);<br><br>this.b&nbsp;=&nbsp;20;<br>alert(b);<br><br>c&nbsp;=&nbsp;30;<br>alert(this.c);<br>构造器中<br><br>构造器中的&nbsp;this&nbsp;指代的是即将被创建出的对象。<br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;下面的指代即将被创建的对象<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Person(&quot;Q&quot;,&nbsp;12,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>函数中<br><br>函数中的&nbsp;this&nbsp;指代函数的调用者。<br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;下面的指代即将被创建的对象<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;this.gretting&nbsp;=&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;!!!&nbsp;下面这个&nbsp;this&nbsp;指代调用它的对象，既上面的<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;上面的&nbsp;gretting&nbsp;左边的&nbsp;this，既为即将被创建的对象<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Hi,&nbsp;I&nbsp;am&nbsp;&quot;&nbsp;+&nbsp;this.name)<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>X.gretting();<br>NOTE:&nbsp;new&nbsp;Function(&quot;console.log(this)&quot;)&nbsp;中的&nbsp;this&nbsp;均指代全局对象。eval(&quot;console.log(this)&nbsp;则为调用上下文指代的&nbsp;this。<br>this&nbsp;实例<br><br>下面的例子使用&nbsp;apply&nbsp;与&nbsp;call。通过这两个方法来将一个对象中&nbsp;this&nbsp;指代的目标进行改变。<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>&nbsp;&nbsp;this.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>&nbsp;&nbsp;}<br>}<br><br>var&nbsp;point&nbsp;=&nbsp;new&nbsp;Point(0,&nbsp;0);<br>point.move(1,&nbsp;1);<br><br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;0,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br><br>//&nbsp;改变&nbsp;point&nbsp;中&nbsp;move&nbsp;方法&nbsp;this&nbsp;指代的对象至&nbsp;circle<br>point.move.apply(circle,&nbsp;[1,&nbsp;1]);<br>//&nbsp;同样可以用类似的&nbsp;call&nbsp;方法，区别为参数需依次传入<br>point.move.call(circle,&nbsp;1,&nbsp;1);<br><br>原型继承<br><br>使用原型（prototype）可以解决重复定义实例对象拥有的完全一致的属性或方法（既共享原型中的属性或方法）。<br>function&nbsp;Boss()&nbsp;{<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.tasks&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;this.title&nbsp;=&nbsp;&quot;Boss&quot;;<br>&nbsp;&nbsp;this.gretting&nbsp;=&nbsp;function()&nbsp;{console.log(&quot;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);};<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;中具有完全一致（不必唯一的属性或方法）<br>//&nbsp;并耗用内存的共享部分<br>//&nbsp;this.title&nbsp;与&nbsp;this.gretting<br>改造后的构造器<br>function&nbsp;Boss()&nbsp;{<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.tasks&nbsp;=&nbsp;[];<br>}<br>Boss.prototype&nbsp;=&nbsp;{<br>&nbsp;&nbsp;title:&nbsp;&quot;Boss&quot;,<br>&nbsp;&nbsp;gretting:&nbsp;function(){console.log(&quot;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);}<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;中具有完全一致（不必唯一的属性或方法）<br>//&nbsp;并耗用内存的共享部分<br>//&nbsp;this.title&nbsp;与&nbsp;this.gretting<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;拥有相同的原型&nbsp;Boss.prototype<br>原型链<br><br>使用原型继承的方法会产生原型链。JavaScript&nbsp;中对于对象的查找、修改和删除都是通过原型链来完成的。<br>判断属性是否为对象本身<br>objectName.hasOwnProperty(&quot;propertyName&quot;);<br>//&nbsp;返回布尔值&nbsp;true&nbsp;或&nbsp;false<br>属性查找<br><br>对象的属性查找会更随原型链依次查找，如果在当前环境中无法找到需要的属性则会继续向下一层原型中继续寻找。<br>属性修改<br><br>在&nbsp;JavaScript&nbsp;中对于对象属性的修改永远只修改对象自身的属性（不论是来源于对象本身还是对象的原型）。当创建当前对象不存在属性时（即便原型拥有此属性），也会为此对象增加改属性。<br>修改原型上的属性<br>修改原型属性会印象所有被创建出的对象现有的属性和方法。<br>ClassName.prototype.propertyName&nbsp;=&nbsp;&quot;new&nbsp;value&quot;;<br>ClassName.prototype.methodName&nbsp;=&nbsp;function(){...};<br>属性删除<br><br>delete&nbsp;objectName.propertyName&nbsp;只可删除对象自身的属性，无法删除对象的原型属性。<br>Object.create(proto[,&nbsp;propertiesObject])<br><br>其为ECMAScript&nbsp;5&nbsp;中提出的新建立对象的方式。在&nbsp;X&nbsp;中使用隐式的原型对象指向&nbsp;boss&nbsp;对象，并将其设为&nbsp;X&nbsp;对象的原型。<br>var&nbsp;boss&nbsp;=&nbsp;{<br>&nbsp;&nbsp;title:&nbsp;&quot;Boss&quot;,<br>&nbsp;&nbsp;gretting:&nbsp;function(){console.log(&quot;Hi,&nbsp;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);}<br>};<br><br>var&nbsp;X&nbsp;=&nbsp;Object.create(boss);<br>X.gretting();&nbsp;//&nbsp;Hi,&nbsp;I&nbsp;am&nbsp;a&nbsp;Boss!<br>低版本中实现&nbsp;Object.create&nbsp;功能<br>此种方式仍需使用&nbsp;ClassName.prototype&nbsp;的方式来实现。<br>var&nbsp;clone&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;F&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;return&nbsp;function(proto)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;F.prototype&nbsp;=&nbsp;proto;<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;F();<br>&nbsp;&nbsp;}<br>})();<br>面向对象的应用<br><br>全局变量<br><br>全局变量可在程序任意位置进行访问和修改的变量。滥用全局变量会导致，命名冲突，导致程序不稳定。<br>全局标量的三种定义方法：<br>var&nbsp;gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;。<br>window.gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;附加于&nbsp;window&nbsp;对象上<br>gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;不使用&nbsp;var&nbsp;关键字，也附加于&nbsp;windwo&nbsp;对象<br>NOTE：delete&nbsp;无法删除在代码最顶端定义的全局标量&nbsp;var&nbsp;globale<br>封装<br><br>信息隐藏可以保证程序的稳定，将内部信息进行隐藏。其他语言中可词用访问权限来实现封装的概念，像&nbsp;private、public。<br>JavaScript&nbsp;中的封装可使用函数的方法（闭包）。<br>//&nbsp;模拟&nbsp;private&nbsp;的属性<br>function&nbsp;ClassName(){<br>&nbsp;&nbsp;var&nbsp;_property&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.getProperty&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_property;<br>&nbsp;&nbsp;};<br>}<br><br>//&nbsp;模拟&nbsp;protected&nbsp;属性，使用人为约束规则<br>var&nbsp;pro&nbsp;=&nbsp;ClassName.prototype;<br>pro._protectedMethod&nbsp;=&nbsp;function(){...};<br>pro.publicMethod&nbsp;=&nbsp;function(){...};<br>继承<br><br>原型继承<br><br>原型继承的方式为&nbsp;JavaScript&nbsp;中固有的继承方式。<br>var&nbsp;proto&nbsp;=&nbsp;{<br>&nbsp;&nbsp;action1:&nbsp;function(){},<br>&nbsp;&nbsp;action2:&nbsp;function(){}<br>}<br><br>var&nbsp;obj&nbsp;=&nbsp;Object.create(proto);<br>在不支持&nbsp;EM5&nbsp;中的实现方法：<br>var&nbsp;clone&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;F&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;return&nbsp;function(proto)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;F.prototype&nbsp;=&nbsp;proto;<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;F();<br>&nbsp;&nbsp;}<br>})();<br>类继承<br><br>使用原型链继承的方式模拟其他语言类继承的特性。<br>function&nbsp;ClassA()&nbsp;{<br>&nbsp;&nbsp;ClassA.classMethod&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;ClassA.prototype.api&nbsp;=&nbsp;function(){};<br><br>&nbsp;&nbsp;function&nbsp;ClassB()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;ClassA.apply(this,&nbsp;argument);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;ClassB.prototype&nbsp;=&nbsp;new&nbsp;ClassA();<br>&nbsp;&nbsp;ClassB.prototype.constructor&nbsp;=&nbsp;ClassB;<br>&nbsp;&nbsp;ClassB.prototype.api&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;ClassA.prototype.api.apply(this,&nbsp;arguments);<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;ClassA&nbsp;为父类<br>//&nbsp;ClassB&nbsp;为子类<br><br>var&nbsp;b&nbsp;=&nbsp;new&nbsp;ClassB();<br>b.api();","addLink":"","date":"2016-01-07 15:13","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":9},{"addArticleTtitle":"正则表达式","classify":"javascript","addarticleContent":"正则表达式为标书字符串规则的表达式。下面为两个例子为在&nbsp;JavaScript&nbsp;中的使用，<br>/pattern/attrs<br>new&nbsp;RegExp(pattern,&nbsp;attrs)<br>锚点<br><br>锚点用于匹配一个位置，下列为常用的锚点<br>^&nbsp;起始的位置&nbsp;/^http/<br>$&nbsp;结尾的位置&nbsp;/&#92;.jpg$/<br>&#92;b&nbsp;单词边界<br>字符类<br><br>字符类用于匹配一类字符中的一个，下面为几个常用的例子，<br>[abc]&nbsp;可用于匹配&nbsp;a&nbsp;b&nbsp;还有&nbsp;c<br>[0-9]&nbsp;可用于匹配一个数字<br>[^0-9]&nbsp;可用于匹配一个非数字<br>[a-z]&nbsp;可用于匹配一个字母<br>.&nbsp;任意字符但换行符除外<br>元字符<br><br>元字符为具有特殊意义的字符。常见的有，<br>^,&nbsp;$,&nbsp;&#92;b<br>&#92;d&nbsp;用于匹配数字&nbsp;[0-9]<br>&#92;D&nbsp;用于匹配&nbsp;[^&#92;d]<br>&#92;s&nbsp;用于匹配空白符<br>&#92;S&nbsp;用于匹配非空白符&nbsp;[^&#92;s]<br>&#92;w&nbsp;用于匹配任意单词字符（例如程序中的变量字符）&nbsp;[A-Za-z0-9_]<br>&#92;W&nbsp;用于匹配非单词字符&nbsp;[^&#92;W]<br>量词<br><br>量词用于表现字符出现的次数。可用的连词如下，<br>{m,n}&nbsp;用于表示出现&nbsp;m&nbsp;到&nbsp;n&nbsp;次之间。<br>*&nbsp;用于表示出现&nbsp;0&nbsp;到无穷之间也就等同于&nbsp;{0,}<br>?&nbsp;用于表示出现&nbsp;0&nbsp;次到&nbsp;1&nbsp;次也等同于&nbsp;{0,1}<br>+&nbsp;用于表现出现&nbsp;1&nbsp;次以及一次以上也等同于&nbsp;{1,}<br>转移符<br><br>转义符需要在匹配的字符是元字符的时候使用。使用&nbsp;&#92;&nbsp;来进行转移即可。2<br><br>多选分支<br><br>多选分支用于表示或的概念。/thi(c|n)k/&nbsp;其又等同于&nbsp;/thi[cn]k/。其还可以用于匹配文件扩展名&nbsp;/&#92;.(png|jpg|jpeg|gif)$/&nbsp;。<br>常用方法<br><br>测试：regxObj.test(str)<br><br>其用于测试正则表达式与指定字符串是否匹配。<br>/123/.test(123);&nbsp;//&nbsp;true<br>/123/.test(111);&nbsp;//&nbsp;false<br>/123/.test(&quot;x123&quot;);&nbsp;//&nbsp;true<br>捕获<br><br>其用于保存所匹配到的字符串为后续开发所用。()&nbsp;可用于捕获，正则表达式再运行时会将其保存下来，(?:)&nbsp;则不予保存。<br>//&nbsp;str.match(regexp)<br>var&nbsp;url&nbsp;=&nbsp;&quot;http://www.google.com/query?test=li-xinyang#cool&quot;;<br>var&nbsp;reg&nbsp;=&nbsp;/(https?:)&#92;/&#92;/([^&#92;/]+)(&#92;/[^&#92;?]*)?(&#92;?[^#]*)?(#,*)?/;<br><br>var&nbsp;arr&nbsp;=&nbsp;url.match(reg);<br>var&nbsp;protocol&nbsp;=&nbsp;arr[1];<br>var&nbsp;host&nbsp;=&nbsp;arr[2];<br>var&nbsp;pathname&nbsp;=&nbsp;arr[3];<br>var&nbsp;search&nbsp;=&nbsp;arr[4];<br>var&nbsp;hash&nbsp;=&nbsp;arr[5];<br>搜索与替换<br><br>regexpObj.exec(str)&nbsp;可以提供更强大的检索，它可以提供更详尽的结果&nbsp;index&nbsp;也可以提供过程状态&nbsp;lastIndex。<br>str.replace(regex/substr,&nbsp;replacement)&nbsp;可以使用正则表达式来对字符串进行替换。","addLink":"","date":"2016-01-07 15:15","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":10}],"jquery":[{"addArticleTtitle":"特点：选择网页元素---模拟css选择元素","classify":"jquery","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;模拟css选择元素&lt;/title&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;src=&quot;jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;div1&quot;&nbsp;class=&quot;box&quot;&gt;div&lt;/div&gt;<br>&nbsp;&nbsp;&lt;span&nbsp;class=&quot;box&quot;&gt;span&lt;/span&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;div2&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;divdiv&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;pp&lt;/p&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#div1&quot;).css(&quot;background&quot;,&quot;red&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;div&quot;).css(&quot;background&quot;,&quot;green&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;.box&quot;).css(&quot;background&quot;,&quot;blue&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#div2&nbsp;p&quot;).css(&quot;background&quot;,&quot;red&quot;);<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>","addLink":"","date":"2016-01-06 23:07","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0}],"zepto":[],"git":[],"flex":[],"layout":[{"addArticleTtitle":"居中布局---实现父元素不定宽高、子元素水平居中的几种方法","classify":"layout","addarticleContent":"1.inline-block+text-align<br>特点：<br>&nbsp;&nbsp;兼容性好，给display:&nbsp;inline-block;做兼容（*display:inline;*zoom:1;）<br><br>后可以支持到IE6<br>实现方法：<br>&nbsp;&nbsp;.child1{display:&nbsp;inline-block;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.parent1{text-align:&nbsp;center;}<br><br>2.table+margin<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性：display:&nbsp;table&nbsp;IE8以上，如果想支持IE6、7可以把div换位table结<br><br>构<br>实现方法：<br>&nbsp;&nbsp;.child2{display:&nbsp;table;margin:&nbsp;0&nbsp;auto;&nbsp;background-color:&nbsp;black;}<br><br>3.absolute+transform&nbsp;<br>特点：<br>&nbsp;&nbsp;兼容性：transform&nbsp;IE9以上&nbsp;&nbsp;优点：设置position:&nbsp;absolute;的元素脱离文<br><br>档流，不影响其他子元素<br>实现方法：<br>&nbsp;&nbsp;.parent3{position:&nbsp;relative;}<br>&nbsp;&nbsp;.child3{position:&nbsp;absolute;left:&nbsp;50%;transform:translateX(-<br><br>50%);background-color:&nbsp;black;}<br><br>4.flex<br>特点：<br>&nbsp;&nbsp;兼容性：flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent4{display:&nbsp;flex;justify-content:center;}<br>&nbsp;&nbsp;.child4{background-color:&nbsp;black;}<br>","addLink":"<a href=&quot;./layout/demo1.html&quot;>以上实现方法Demo<a/>","date":"2016-01-05 00:14","author":"xxz","good":3,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"居中布局---实现父元素不定高度，子元素垂直居中的几种方法","classify":"layout","addarticleContent":"1.table-cell+vertical-align<br>特点：<br>&nbsp;&nbsp;兼容到IE8以上，如果想兼容IE6、7,把&nbsp;DIV改成table<br>实现方法：<br>&nbsp;&nbsp;.parent1{display:&nbsp;table-cell;vertical-align:&nbsp;middle;background-color:&nbsp;black;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child1{background-color:&nbsp;white;}&nbsp;<br><br>2.absolute+transform&nbsp;<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{position:&nbsp;relative;height:&nbsp;100px;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.child2{position:&nbsp;absolute;top:50%;&nbsp;transform:translateY(-50%);&nbsp;background-color:&nbsp;white;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;&nbsp;align-items:center;&nbsp;background-color:&nbsp;black;&nbsp;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child3{background-color:&nbsp;white;}<br>","addLink":"<a href=&quot;./layout/demo2.html&quot;>Demo<a/>","date":"2016-01-05 10:09","author":"xxz","good":1,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"居中布局---实现父元素不定宽高、子元素居中的几种方法","classify":"layout","addarticleContent":"1.inline-block+text-align+table-cell+vertical-align<br>特点：<br>&nbsp;&nbsp;兼容性好<br>实现方法：<br>&nbsp;&nbsp;.parent1{text-align:&nbsp;center;&nbsp;display:&nbsp;table-cell;vertical-align:&nbsp;middle;background-color:&nbsp;black;height:&nbsp;100px;width:&nbsp;100px;}<br>&nbsp;&nbsp;.child1{display:&nbsp;inline-block;&nbsp;background-color:&nbsp;white;}<br><br>2.absolute+transform<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{position:&nbsp;relative;height:&nbsp;100px;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.child2{position:&nbsp;absolute;top:50%;left:&nbsp;50%;&nbsp;transform:translate(-50%,-50%);&nbsp;background-color:&nbsp;white;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性：兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;justify-content:center;&nbsp;align-items:center;&nbsp;background-color:&nbsp;black;&nbsp;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child3{background-color:&nbsp;white;}","addLink":"<a href=&quot;./layout/demo3.html&quot;>Demo<a/>","date":"2016-01-05 10:19","author":"xxz","good":2,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"多列布局---实现一列定宽，一列自适应的几种方法","classify":"layout","addarticleContent":"1.float+margin<br>特点：<br>&nbsp;&nbsp;不足：当right中子元素有清除浮动时，会对布局有影响&nbsp;&nbsp;margin-right:&nbsp;-100px;兼容IE6<br>实现方法：<br>&nbsp;&nbsp;.left1{float:&nbsp;left;width:&nbsp;100px;&nbsp;background-color:&nbsp;#ccc;margin-right:&nbsp;-100px;}<br>&nbsp;&nbsp;.right1{margin-left:&nbsp;120px;&nbsp;background-color:&nbsp;#555;}<br><br>2.float+margin+(fix)<br>特点：&nbsp;<br>&nbsp;&nbsp;第一个方案的改进，right中有浮动子元素，不影响。兼容IE6<br>实现方法：<br>&nbsp;&nbsp;.left2{float:&nbsp;left;width:&nbsp;100px;position:&nbsp;relative;&nbsp;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right-fix{float:&nbsp;right;width:&nbsp;100%;margin-left:-100px;&nbsp;}<br>&nbsp;&nbsp;.right2{margin-left:&nbsp;120px;&nbsp;background-color:&nbsp;#555;}<br><br>3.float+hidden<br>特点：<br>&nbsp;&nbsp;不支持IE6<br>实现方法：<br>&nbsp;&nbsp;.left3{float:&nbsp;left;width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right3{overflow:&nbsp;hidden;&nbsp;background-color:&nbsp;#555;}<br><br>4.table<br>特点：<br>&nbsp;&nbsp;<br>实现方法：<br>&nbsp;&nbsp;.parent4{display:&nbsp;table;width:&nbsp;100%;}<br>&nbsp;&nbsp;.left4,.right4{display:&nbsp;table-cell;background-color:&nbsp;#555;}<br>&nbsp;&nbsp;.left4{width:&nbsp;100px;padding-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br><br>5.flex<br>特点：<br>&nbsp;&nbsp;兼容性：兼容性差，flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent5{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left5{width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right5{flex:1;background-color:&nbsp;#555;}<br><br>6.两列定宽+一列自适应，方法跟上面类似<br>float+margin实现方法：<br>&nbsp;&nbsp;.left6,.middle6{float:&nbsp;left;width:&nbsp;100px;&nbsp;background-color:&nbsp;#ccc;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.middle6{margin-right:&nbsp;-100px;}<br>&nbsp;&nbsp;.right6{margin-left:&nbsp;240px;&nbsp;background-color:&nbsp;#555;}<br><br><br><br><br>","addLink":"<a href=&quot;./layout/demo4.html&quot;>Demo<a/>","date":"2016-01-05 10:53","author":"xxz","good":2,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"多列布局---实现一列不定宽，一列自适应的几种方法","classify":"layout","addarticleContent":"1.float+overflow<br>特点：<br>&nbsp;&nbsp;兼容性好<br>实现方法：<br>&nbsp;&nbsp;.left1{float:&nbsp;left;background-color:&nbsp;#ddd;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.right1{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>2.table<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性好&nbsp;&nbsp;&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{display:&nbsp;table;width:&nbsp;100%;}<br>&nbsp;&nbsp;.left2,.right2{display:&nbsp;table-cell;}<br>&nbsp;&nbsp;.left2{width:&nbsp;0.1%;padding-right:&nbsp;20px;&nbsp;background-color:&nbsp;#ddd;}<br>&nbsp;&nbsp;.right2{background-color:&nbsp;#555;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性差<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left3{margin-right:&nbsp;20px;background-color:&nbsp;#ddd;}<br>&nbsp;&nbsp;.right3{flex:1;background-color:&nbsp;#555;}&nbsp;&nbsp;<br><br>4.两列不定宽+自适应<br>特点：<br>&nbsp;&nbsp;&nbsp;新增加的列和左列样式一样&nbsp;<br>实现方法：<br>&nbsp;&nbsp;.left4,.middle4{float:&nbsp;left;background-color:&nbsp;#ddd;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.right4{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>","addLink":"<a href=&quot;./layout/demo5.html&quot;>Demo<a/>","date":"2016-01-05 14:10","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4},{"addArticleTtitle":"多列等分布局---实现父元素不定宽度，子元素多列等分布局的几种方法","classify":"layout","addarticleContent":"1.float<br>特点：<br>&nbsp;&nbsp;兼容性好&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent1{margin-left:&nbsp;-20px;}<br>&nbsp;&nbsp;.column{float:&nbsp;left;width:&nbsp;25%;padding-left:&nbsp;20px;box-sizing:border-box;}<br>&nbsp;&nbsp;.div1&nbsp;p{background-color:&nbsp;red;}<br>&nbsp;&nbsp;.div2&nbsp;p{background-color:&nbsp;green;}<br>&nbsp;&nbsp;.div3&nbsp;p{background-color:&nbsp;blue;}<br>&nbsp;&nbsp;.div4&nbsp;p{background-color:&nbsp;black;}<br><br>2.table<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性好&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent-fix{margin-left:&nbsp;-20px;}<br>&nbsp;&nbsp;.parent2{display:&nbsp;table;width:&nbsp;100%;table-layout:&nbsp;fixed;}<br>&nbsp;&nbsp;.column2{display:&nbsp;table-cell;padding-left:&nbsp;20px;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性：flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;}<br>&nbsp;&nbsp;.column3{flex:1;}<br>&nbsp;&nbsp;.column3+.column3{margin-left:&nbsp;20px;}<br><br>","addLink":"<a href=&quot;./layout/demo6.html&quot;>Demo<a/>","date":"2016-01-05 14:23","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":5},{"addArticleTtitle":"多列等高布局---实现子元素多列等高布局的几种方法","classify":"layout","addarticleContent":"1.table<br>实现方法：<br>&nbsp;&nbsp;.parent1{display:&nbsp;table;width:&nbsp;100%;table-layout:&nbsp;fixed;}<br>&nbsp;&nbsp;.left1,.right1{display:&nbsp;table-cell;background-color:&nbsp;#555;}<br>&nbsp;&nbsp;.left1{width:&nbsp;100px;padding-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br><br>2.flex<br>实现方法：<br>&nbsp;&nbsp;.parent2{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left2{width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right2{flex:1;background-color:&nbsp;#555;}<br><br>3.float<br>实现方法：<br>&nbsp;&nbsp;.parent3{overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;.left3,.right3{padding-bottom:&nbsp;9999px;margin-bottom:&nbsp;-9999px;}<br>&nbsp;&nbsp;.left3{float:&nbsp;left;&nbsp;width:&nbsp;100px;&nbsp;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right3{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>","addLink":"<a href=&quot;./layout/demo7.html&quot;>Demo<a/>","date":"2016-01-05 14:42","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":6},{"addArticleTtitle":"全屏布局---position实现方案","classify":"layout","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;水平居中&lt;/title&gt;<br>&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*兼容性:IE6不兼容，可以用hash*/&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;html,body,.parent{height:&nbsp;100%;overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.top{position:&nbsp;absolute;top:0;left:&nbsp;0;right:&nbsp;0;height:&nbsp;100px;background-color:&nbsp;#222;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.left{position:&nbsp;absolute;top:&nbsp;100px;left:&nbsp;0;bottom:&nbsp;50px;width:&nbsp;200px;background-color:&nbsp;#444;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.right{position:&nbsp;absolute;top:&nbsp;100px;bottom:&nbsp;50px;left:&nbsp;200px;right:&nbsp;0;background-color:&nbsp;#666;overflow:&nbsp;auto;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.bottom{position:&nbsp;absolute;left:&nbsp;0;right:&nbsp;0;bottom:&nbsp;0;height:&nbsp;50px;background-color:&nbsp;#888;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.inner{min-height:&nbsp;1000px;}<br>&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;&nbsp;&nbsp;<br>&nbsp;&nbsp;&lt;div&nbsp;class=&quot;parent&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;top&quot;&gt;top&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;left&quot;&gt;left&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;right&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;inner&quot;&gt;inner&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"<a href=&quot;./layout/demo8.html&quot;>Demo<a/>","date":"2016-01-05 15:21","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":7},{"addArticleTtitle":"全屏布局---flex方案","classify":"layout","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;水平居中&lt;/title&gt;<br>&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*兼容性IE9以下不兼容，可以用hash*/&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;html,body,.parent{height:&nbsp;100%;overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.parent{display:&nbsp;flex;flex-direction:column;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.top{height:&nbsp;100px;background-color:&nbsp;#222;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.bottom{height:&nbsp;50px;background-color:&nbsp;#888;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.middle{flex:1;display:&nbsp;flex;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.left{width:&nbsp;200px;background-color:&nbsp;#444;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.right{flex:1;background-color:&nbsp;#666;overflow:&nbsp;auto;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.inner{min-height:&nbsp;1000px;}<br>&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;&nbsp;&nbsp;<br>&nbsp;&nbsp;&lt;div&nbsp;class=&quot;parent&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;top&quot;&gt;top&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;middle&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;left&quot;&gt;left&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;right&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;inner&quot;&gt;inner&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"<a href=&quot;./layout/demo9.html&quot;>Demo<a/>","date":"2016-01-05 15:43","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":8}],"buildWebsite":[],"resources":[],"encourage":[{"addArticleTtitle":"穷人思维","classify":"encourage","addarticleContent":"穷人为什么穷？无论中国美国，主流对此都有种没明说但心照不宣的观点：因为他们懒、酗酒、赌博……曾有条被疯转微博，一位妈妈卖盗版光盘被城管追赶跳入水中，当时，一位女博士点评说北京好月嫂都月入过万了，何必要选这么苦情的生活方式？此微博后被证实为谣言，但抱小孩卖毛片的中年女性的确曾是北京一景。中产阶级的眼界不是穷人的眼界，正如本书作者也苦苦思索，劳工为何不要求加薪，或寻找更高薪工作，甚至组织工会，维护自身权益？答案是，越贫困，越无力。<br><br>畅销书女作家芭芭拉•艾伦瑞克进入美国底层，体验在时薪6~8美元下，辛勤工作是否能生活下去，她的答案是：不能。除非你跟别人合租房子，或者打两份工。<br><br>她在三个城市当过餐厅服务员、旅馆服务员、清洁女工、看护护理及沃尔玛的售货员，她努力工作，也努力尝试收支平衡，为此她曾勇猛打两份工，一周工作七天，每周还能在打工的看护之家免费吃两三餐，这些都帮助了她。但到旅游旺季，房租将上涨三倍，身为女佣的她，只能再次破产。<br><br>作者有穷人没有的优势：在前面的几十年，她有高于一般水平的医疗照顾、良好饮食、她常年练举重，身体“是不寻常的结实”。并且，就这个实验来说，她作弊了，她给自己租车，用信用卡付费；每到一个城市，她备有一千多美元的起头基金；她开了外挂，却仍然没有打赢。<br><br>我一度觉得这本《我在底层的生活——当专栏作家化身女服务员》是来黑美国的，因为美剧、好莱坞电影不曾说过，还有这么个美国存在：低薪白人劳工，三四人挤在一个小房间里生活；怀孕的清洁工摔伤也不敢请假，一天没薪水，第二天就没钱买杂物；沃尔玛的员工付不起房租，住在收容所；背着十几磅重的吸尘器吸尘、跪在地上擦地，女佣们话题热点是哪个牌子的止痛药最好用；没有健康保险，因为太贵，这意味如果生病，你要比别人多花钱。<br><br>女招待考虑搬入每晚40~60美金的汽车旅馆（她每天才挣四十多美金），作家惊讶问她怎么想的，同事像看笨蛋一样看着女作家：我上哪儿弄一个月的租金跟押金去租公寓？而女作家，之所以能租到月租500的公寓，是拜她从自己的现实世界带来的1000美金付押金及头一月租金所赐。<br><br>不断上涨的房租是穷人的噩梦，作者发现，穷人越来越多住在汽车旅馆。后者可以按天结账，犹如鸦片，诱惑现金紧张的穷人陷进去，微薄的积蓄被烧光，更加不可能有钱租公寓。作者发现有两个男人轮流睡一张床，一个人睡觉时另一个在车上打盹。而我忽然明白卡佛小说里的那些穷人，那些卖掉农庄，揣着全部积蓄进城找工作的一家人，在一间汽车旅馆里住下去，某一天又一声不吭地走掉——他们就是汽车旅馆鸦片的受害者，他们不是走掉，是掉入地狱的更下一层。<br><br>作者认为，穷人破产，因为薪水太低，而房租太贵。这一点中国读者想必也深有共鸣。当房租犹如奥运会田径赛道上的博尔特般一路狂奔，穷人只能不停搬家，搬入一间又一间不带家具的公寓，锅碗瓢勺家具又是一笔钱；或入住汽车旅馆胶囊公寓，只剩一张床那么大小的房间，你证悟到睡觉和死亡何其相似。而无法做饭的后果，是你要花更多钱在吃饭上。最终，她，还有我们，均不难发现一条荒谬定律，如果你穷，你就得比不穷的人花更多的钱，才能活下去。这不是美剧中的美国，但它并不陌生。全世界的金钱流动法则相同：钱生育钱，贫困生育贫困。<br><br>作者有强烈的政治立场，而她真实凶残的打工经历平衡了她的倾向。说到底这并不是一本坐在空调房间凭政治理念写出来的书，她一天工作九小时，住在没有纱窗空调电扇的旅馆，因为锁不上门，不得不合衣而睡。而她的工作，是在35度高温下打扫“有五套浴厕的房子”，撅起屁股，跪于大理石地板，用抹布擦过每一寸地面，擦干净整排玻璃门上的每一个指纹，而且遵循女仆美德，不在主人家喝水；是每周六日服侍近四十名阿兹海默症老年病人吃三餐、清理餐具、擦桌吸地，“我只能全力跟上洗碗机吐出盘子和脏盘子涌进来的速度”；午饭是高速路上停车上厕所时的五分钟；上厕所要打卡。即使这样，仍有几次，她不得不求助于慈善机构，后者提供的免费食物，对没有冰箱的穷人来说并不实用；而一个“平价”通铺床位，每晚也要19美元，慈善机构的小姐建议她“搬进收容所”，以便存到足够的钱交第一个月的房租和押金。<br><br>她将自己奉献为小白鼠，而我们得以观察，贫穷是如何侵蚀一个人的精神。<br><br>作者自己能从时薪5.15美元的餐厅跳槽至时薪7.5，因为她有车，可四处应聘，上班范围更有弹性。她的同事若换工作，交通是大问题，甚至需更换住处。穷人比富人更保守，更不愿意改变，就像奴隶比奴隶主更保守。物质上的窘迫，使他们承受不起改变，冒不起一周没工作的风险。那意味着他们会挨饿，从现在的房子被赶出去，掉到地狱更可怕的下一层。<br><br>但作者在找工作时呈现的状态，她的精神活力、她的勇气才是她和她的同事们之最大区别。同样被羞辱及盘剥，她跃跃欲试组织工会，她的同事却只希望偶尔请一天假，第二天还能有钱买点杂货。这一部分也可用来解释教育的重要所在，作者隐瞒了博士学位，却拿不走自己的思维。精神的贫困是穷人解脱贫穷的最大障碍。<br><br>两个多月的底层生活后，作者的背伤复发、全身起了疱疹，并且，她身为“民主社会主义者”“女性主义者”，对底层人民抱有的博爱之情，慢慢变淡，代之以麻木，甚至仇恨。一个身高不到1米4的女售货员跟她起了纠纷，她看着后者踩着梯子才够得着高处衣服，一股恶意涌上，“希望能看到她啪地一声摔到地上”；而残疾员工忧伤地坐在轮椅里，她看到第一感觉是“至少你还坐着。”——她忽然意识到，如果自己的父亲没有脱离矿工身份，如果去掉自己的教育程度，也许自己就是现在这样：苛刻、狡猾、满怀怨恨。她没有强调，但读者可以自行总结：穷人仇恨穷人。这不是什么新鲜事，却让人难以面对——穷人不都是善良的么？法国作家塞利纳在他1935年的《长夜行》里写道：“我们之间有五个法郎的隔阂，就足以产生恨，希望他们统统死光。”“五个法郎”，可以换成小升初的一个名额、一个工作机会，甚至仅仅是高峰期公车上的一个座位、它仍然“足以产生恨，希望他们统统死光”。不信你看北京上海贴吧里，那些铺天盖地的“外地人滚出去”。<br><br>贫穷是一种专制，它培养自己的奴隶。当你习惯于被剥夺自尊，习惯于被当做一个小偷/懒虫/酒鬼对待，当你常年生活在社会边缘、你存在的意义被抹去，宛如你根本不存在。而打开电视——无论中美——都是老板，男女白领，即使是喊着奋斗的北漂，住的也是你这辈子都住不上的三室两厅，它会让你以为“只有我自己才是不正常的”。精神上的专制就此完成。穷奴大抵上有两种，一种借仇恨别人获得自己高人一等的存在价值感，一种则接受自己是最弱的，就像那些被迫在自己的社会体系中落入屈从位置的沮丧的猴子，它们变得焦虑而退缩，不再挣扎，甚至对自卫也毫无兴趣。<br><br>借助铁丝和剪刀，能培养出自然界不存在的侏儒松，定型成功，即使松开捆扎铁丝，那些松树也固定在扭曲的姿态。同样，精神上的专制，令你在内心相信自己就是个侏儒。芭芭拉•艾伦瑞克细腻雄辩地写出精神的毁灭之路，我却在其中看到熟悉的人脸，作为经历了大饥荒的幸存者的后代，她绘出的精神贫穷者的肖像我并不陌生。那些脸在我们周围漫游，如恒河河沙，又似幽灵。<br><br>怎么办？也许没有一个药方可以取消贫困，但至少下次看到一个走投无路的穷人，在指责他懒惰、酗酒之前还可以多想一秒钟；在大吼“外地人滚出去”之前，还可以思考一下这仇恨从何而来；即使我们的初始值是一棵被剪成侏儒的盆景，也可以在松绑后尝试站起来，笔直地站成一棵树。<br><br>开外挂的女作家，无论如何也做不到收支平衡。但实在要流浪街头时，她可以挖出自己的信用卡，大吃一顿。可是现实中真正的穷人，她的同事们呢？<br><br>我想起《没有人给他写信的上校》的最后一段：绝望的妻子揪着上校的领子，问这些天我们吃什么？<br><br>“上校活了七十五岁——用他一生中分分秒秒积累起来的七十五岁——才到了这个关头。他自觉心灵清透，坦坦荡荡，什么事也难不住他。他说：<br><br>‘吃屎’。”","date":"2016-01-04 20:15","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"行走，回首","classify":"encourage","addarticleContent":"&nbsp;&nbsp;人生路，漫漫而行。一阵秋雨洒落，驻足回首，秋叶纷飞。踩过一叠厚厚堆积的落叶，仿佛就像生命中一堆纠缠不清的人和事，渐渐遗忘，渐渐随风。<br>　　<br>　　往事过眼，便是回忆。你的呢喃，清晰在耳畔。但我的眼眸，已失去了你的色彩。人生这条路，走的越远，失去的就越多，想抓也抓不住，想停也只能一直走下去。<br>　　<br>　　昨日的温存，已成了今日的怀恋。依稀记得梦中的清风随了夜，划在心底的寒，淡淡的痛。你说的话语，凋零在上一个叶落，满地的残朵。我却傻傻祈求，时光捡起，成为我心中不忘的那朵。<br>　　<br>　　转眼间秋风舞动，一声呓语飘落清冷，像一场邂逅，一次回眸。记忆在残风中流逝，那样匆匆，那样落寞，连呼喊都来不及停留，便消散在天边不见。书刻思念的篇章，空白，黯淡，碎散一地无法拼凑。寥寥秋落，回忆是那么的无助，那么令人叹息，苍白的嘴唇自嘲苦笑，连握笔的手指都那么的无力，消瘦。<br>　　<br>　　告诉我什么是孤独？我们还会再见吗？最后的旅程擦肩而过，时光带走了一切，但我只求留下最后的思念。<br>　　<br>　　醉念红尘，抚桥流水。岁月铸就的青石板路，寸草难生，如同霜寒舞天的夜月，哀叹了生命的流逝。一曲残星滑落，蓦然回首。这条路，孤独的没有任何生命。<br>　　<br>　　时间匆忙，我们来不及休息。风景匆匆而来又匆匆而去，看到了风景却落下了脚程。人的使命就是在孤独寂寞中寻索，可人自己，却想看看尘世的美艳。这一世为使命，还是为自己？<br>　　<br>　　又是那条无人的街道，一个人漫步远去，莫名的情绪，莫名在颤动。眼神茫然地注视着前方，寒风带起的落叶，如思念般那么无助那么遥远，像根丝线般，缠绕着你绷紧的心弦，连雨落到脸上，还依旧倔强地走着。<br>　　<br>　　那些人再也不回来，那片天最后模糊了色彩。我们都是孤独的，都在黑夜中寻找被云雾遮掩的星空，却看到了流星失落的雨夜。期盼着刺目的阳光，却在逆光的地方，看着自己沉默的倒影。以为世界会关注自己，转过身看着消失的彼岸，却不得不为世界而哭泣。<br>　　<br>　　一条沉默的路，一个狼狈的背影。彷徨，无助。孤独的感觉似幽风徘徊在耳边，拉动了最后的心弦，凄厉地惨叫。奔跑，跌撞。无人的世界，无人的寂静。回首，期盼的眼眸望不到熟悉的轻语;行走，孤独的身影望不到漆黑的彼方。泪断的雨线，渐渐模糊了记忆的错觉……<br>　　<br>　　虚无的世界，虚无的路，孤独的人，孤独地走。耳边飘来了熟悉的话语:不是所有委屈都可以呐喊，不是所有心事都可以述说，有些事只有自己能做，别人帮不了你。这条路，注定是寂寞的。回首，充满了期待却是更残酷的等待。<br>　　<br>　　秋季，等待了一地叶落，像那些荒芜的岁月，像是旅人，望着沉默的斑驳古路，带着落寞，行走，回首……","date":"2016-01-04 20:24","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"一直努力，直至成功","classify":"encourage","addarticleContent":"&nbsp;&nbsp;所谓理想就是把我们的愿景放在一个价值观的尺度上度量，然后决定人生往哪里走？去哪里？走多远？和谁走？<br>　　<br>　　从民营企业角度看，我做生意是被迫的一个开始，但习惯于用自己的价值观来引导我做判断，因此一直把丧事当喜事办。因为我总觉得自己要去心中期待的某个地方，这时我会经常想起鲁迅的一个小说《过客》。这个过客腿脚不好，他一直不停地走，有天他到一个茶水摊和一个老人和小孩对话，询问前方的路该怎么走？老人告诉他：过了一个坟地，再往前一拐，差不多就到了。他又问那小孩儿，小孩告诉他，你看见那片鲜花了，再往前走就到了。同样一个地方，老人眼里看见的是坟墓，而年轻人眼里看见的是鲜花，可见视野和心态截然不同。而这个过客心里只有一句话，就是——我要走，我要走，我要走。<br>　　<br>　　我在创业和折腾的过程中经常会想起这个故事，我心里有两个地方可以去，一个是坟墓，一个是鲜花，不管是哪个，当下就是“我要走”这样一个状态，这种想法陪伴我，从开始很被动的创业，甚至到后来哪怕负债累累，人生已经到了最绝望的时候，始终没有放弃，仍然把丧事当喜事办，因为我意识到理想是希望的风，是黑暗尽头的那道光，有了它，我能驱走黑暗与恐惧，虽然不知道前方有多远，但是依然有坚持下去的力量。<br>　　<br>　　50岁生日前夕，我决定送给自己的一份特别、有纪念意义的生日礼物，去台湾骑自行车环岛旅行。那时正值酷暑，我每天骑行80多公里，总共环岛5500公里，路上看到一个老太太比我还猛，她磕头环岛。我问她，您怎么走？她说，我就拜拜拜拜，一直走没停过。我很是敬佩，送给她一瓶水，她接着继续走。真的很难想象一个瘦老太太单薄的身躯下，哪来这么大能量？只有一个答案：她心里有佛，有信念，有理想和快乐的天堂，所以才有如此的毅力和能量，不停地拜下去，也许有一天膝盖流血她却浑然不知，也许有一天她会劳累晕眩，但她心里追求的天堂不会坠落。<br>　　<br>　　我再说一个崔永元的故事，原来我们俩很不搭界，相信他对“黑心开发商”也抱有道德上的不满，而在央视看到的小崔似乎也有点装，老讲长征、理想什么的，后来我听一个朋友介绍说他在做一个口述历史的节目。某天，我们在一家酒店中见面，香格里拉见面，他送我一些小人书和他做的口述史的资料，我才发现原来屏幕以外的小崔很了不起。<br>　　<br>　　有个夏天我把这个故事讲给王石，带着王石去了小崔的工作室，到了工作室以后，我们看到崔永元花了十几、二十年的时间一直在做一件事情，就是记录当下中国人的状态，而且默默无闻地到处筹资。这让我看到了一个有责任感的男人，这个男人没事儿找事儿，把别人事儿当自己事儿，自己的事儿不当回事儿，自己都快抑郁了，还是操心民族的历史是不是能记录下来，着实感动了我，也感动了王石。后来，我们成了好朋友，也参与到了口述历史的项目中，共同记录这个时代以及这个时代中人们的想法和事迹。<br>　　<br>　　古人讲：势必有坚韧不拔之志，才有坚韧不拔之力。志向是带来毅力的事儿，就像磕头环岛的老太太，如果她心里没有佛，怎会有毅力去磕头环岛？毅力依附于信念和理想之上，不是欺骗也不是虚妄，理想除了让我们获得能量、财富外，还会在我们遭遇痛苦和不幸时支撑我们活下去。否则，当我们遇到巨大的困难时，很可能会选择逃避，甚至会在不为人知的时候选择死亡。在这个纷繁、价值观多元的时代，希望我们对“理想”这个词不再拒绝，不再隔膜，不再离它而去，而是从脚下做起，一天天努力，直到成功为止。","date":"2016-01-04 20:26","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2}],"noCategory":[],"dom":[{"addArticleTtitle":"文档树","classify":"dom","addarticleContent":"Document&nbsp;Object&nbsp;Model&nbsp;(DOM)&nbsp;为文档对象模型，&nbsp;它使用对象的表示方式来表示对应的文档结构及其中的内容。<br><br>下面为一个样例&nbsp;p&nbsp;元素在文档中的对象所包含的所有属性。<br>&lt;p&nbsp;id=&quot;target&quot;&gt;Hello,&nbsp;World!&lt;/p&gt;<br>p#targetaccessKey:&nbsp;&quot;&quot;<br>align:&nbsp;&quot;&quot;<br>attributes:&nbsp;Named<br>NodeMapbaseURI:&nbsp;&quot;&quot;<br>childElementCount:&nbsp;0<br>childNodes:&nbsp;NodeList[1]<br>children:&nbsp;HTMLCollection[0]<br>classList:&nbsp;DOMTokenList[0]<br>className:&nbsp;&quot;&quot;<br>clientHeight:&nbsp;0<br>clientLeft:&nbsp;0<br>clientTop:&nbsp;0<br>clientWidth:&nbsp;0<br>contentEditable:&nbsp;&quot;inherit&quot;<br>dataset:&nbsp;DOM<br>StringMapdir:&nbsp;&quot;&quot;<br>draggable:&nbsp;false<br>firstChild:&nbsp;text<br>firstElementChild:&nbsp;null<br>hidden:&nbsp;false<br>id:&nbsp;&quot;target&quot;<br>innerHTML:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>innerText:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>isContentEditable:&nbsp;false<br>lang:&nbsp;&quot;&quot;<br>lastChild:&nbsp;text<br>lastElementChild:&nbsp;null<br>localName:&nbsp;&quot;p&quot;<br>namespaceURI:&nbsp;&quot;http://www.w3.org/1999/xhtml&quot;<br>nextElementSibling:&nbsp;null<br>nextSibling:&nbsp;null<br>nodeName:&nbsp;&quot;P&quot;<br>nodeType:&nbsp;1<br>nodeValue:&nbsp;null<br>offsetHeight:&nbsp;0<br>offsetLeft:&nbsp;0<br>offsetParent:&nbsp;null<br>offsetTop:&nbsp;0<br>offsetWidth:&nbsp;0<br>onabort:&nbsp;null<br>onautocomplete:&nbsp;null<br>onautocompleteerror:&nbsp;null<br>onbeforecopy:&nbsp;null<br>onbeforecut:&nbsp;null<br>onbeforepaste:&nbsp;null<br>onblur:&nbsp;null<br>oncancel:&nbsp;null<br>oncanplay:&nbsp;null<br>oncanplaythrough:&nbsp;null<br>onchange:&nbsp;null<br>onclick:&nbsp;null<br>onclose:&nbsp;null<br>oncontextmenu:&nbsp;null<br>oncopy:&nbsp;null<br>oncuechange:&nbsp;null<br>oncut:&nbsp;null<br>ondblclick:&nbsp;null<br>ondrag:&nbsp;null<br>ondragend:&nbsp;null<br>ondragenter:&nbsp;null<br>ondragleave:&nbsp;null<br>ondragover:&nbsp;null<br>ondragstart:&nbsp;null<br>ondrop:&nbsp;null<br>ondurationchange:&nbsp;null<br>onemptied:&nbsp;null<br>onended:&nbsp;null<br>onerror:&nbsp;null<br>onfocus:&nbsp;null<br>oninput:&nbsp;null<br>oninvalid:&nbsp;null<br>onkeydown:&nbsp;null<br>onkeypress:&nbsp;null<br>onkeyup:&nbsp;null<br>onload:&nbsp;null<br>onloadeddata:&nbsp;null<br>onloadedmetadata:&nbsp;null<br>onloadstart:&nbsp;null<br>onmousedown:&nbsp;null<br>onmouseenter:&nbsp;null<br>onmouseleave:&nbsp;null<br>onmousemove:&nbsp;null<br>onmouseout:&nbsp;null<br>onmouseover:&nbsp;null<br>onmouseup:&nbsp;null<br>onmousewheel:&nbsp;null<br>onpaste:&nbsp;null<br>onpause:&nbsp;null<br>onplay:&nbsp;null<br>onplaying:&nbsp;null<br>onprogress:&nbsp;null<br>onratechange:&nbsp;null<br>onreset:&nbsp;null<br>onresize:&nbsp;null<br>onscroll:&nbsp;null<br>onsearch:&nbsp;null<br>onseeked:&nbsp;null<br>onseeking:&nbsp;null<br>onselect:&nbsp;null<br>onselectstart:&nbsp;null<br>onshow:&nbsp;null<br>onstalled:&nbsp;null<br>onsubmit:&nbsp;null<br>onsuspend:&nbsp;null<br>ontimeupdate:&nbsp;null<br>ontoggle:&nbsp;null<br>onvolumechange:&nbsp;null<br>onwaiting:&nbsp;null<br>onwebkitfullscreenchange:&nbsp;null<br>onwebkitfullscreenerror:&nbsp;null<br>onwheel:&nbsp;null<br>outerHTML:&nbsp;&quot;&lt;p&nbsp;id=&quot;target&quot;&gt;Hello,&nbsp;World!&lt;/p&gt;&quot;<br>outerText:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>ownerDocument:&nbsp;document<br>parentElement:&nbsp;null<br>parentNode:&nbsp;null<br>prefix:&nbsp;null<br>previousElementSibling:&nbsp;null<br>previousSibling:&nbsp;null<br>scrollHeight:&nbsp;0<br>scrollLeft:&nbsp;0<br>scrollTop:&nbsp;0<br>scrollWidth:&nbsp;0<br>shadowRoot:&nbsp;null<br>spellcheck:&nbsp;true<br>style:&nbsp;CSSStyle<br>DeclarationtabIndex:&nbsp;-1<br>tagName:&nbsp;&quot;P&quot;<br>textContent:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>title:&nbsp;&quot;&quot;<br>translate:&nbsp;true<br>webkitdropzone:&nbsp;&quot;&quot;<br>__proto__:&nbsp;HTMLParagraphElement<br><br>通过使用&nbsp;DOM&nbsp;提供的&nbsp;API&nbsp;(Application&nbsp;Program&nbsp;Interface)&nbsp;可以动态的修改节点（node），也就是对&nbsp;DOM&nbsp;树的直接操作。&nbsp;浏览器中通过使用&nbsp;JavaScript&nbsp;来实现对于&nbsp;DOM&nbsp;树的改动。<br><br>DOM&nbsp;包含<br><br>DOM&nbsp;Core<br>DOM&nbsp;HTML<br>DOM&nbsp;Style<br>DOM&nbsp;Event<br><br>HTML&nbsp;转换&nbsp;DOM&nbsp;树<br><br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&nbsp;&nbsp;&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;My&nbsp;title&lt;/title&gt;<br>&nbsp;&nbsp;&lt;/head&gt;<br>&nbsp;&nbsp;&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href=&quot;&quot;&gt;My&nbsp;Link&lt;/a&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;My&nbsp;header&lt;/h1&gt;<br>&nbsp;&nbsp;&lt;/body&gt;<br>&lt;/html&gt;<br><br><br>节点遍历<br><br>在元素节点中提取自己所需的节点，并予以操作。<br>//&nbsp;Document.getElementsByTagName()<br>//&nbsp;更具标签名找到目标节点的集合，此例中为&nbsp;&lt;h1&gt;My&nbsp;header&lt;/h1&gt;<br>var&nbsp;node&nbsp;=&nbsp;document.getElementsByTagName(&quot;h1&quot;)[0];<br><br>//&nbsp;Node.parentNode;<br>//&nbsp;获得目标节点的父节点，此例中为&nbsp;body&nbsp;元素<br>node.parentNode;<br><br>//&nbsp;Node.firstChild<br>//&nbsp;获得目标节点的第一个子节点，此例中为&nbsp;&quot;My&nbsp;header&quot;<br>node.firstChild;<br><br>//&nbsp;Node.lastChild<br>//&nbsp;获得目标节点的最后一个子节点，此例中为&nbsp;&quot;My&nbsp;header&quot;<br>node.lastChild;<br><br>//&nbsp;Node.previousSibling;<br>//&nbsp;获得目标节点的前一个相邻节点<br>node.previousSibling;<br><br>//&nbsp;Node.nextSibling;<br>//&nbsp;获得目标节点的下一个相邻节点<br>node.nextSibling;<br><br>节点类型<br><br>常用节点类型<br>ELEMENT_NODE&nbsp;可使用&nbsp;Document.createElement(&quot;elementName&quot;);&nbsp;创建<br>TEXT_NODE&nbsp;可使用&nbsp;Document.createTextNode(&quot;Text&nbsp;Value&quot;);&nbsp;创建<br><br>不常用节点类型<br>COMMENT_NODE<br>DOCUMENT_TYPE_NODE<br><br>不同节点对应的NodeType类型<br>此值可以通过&nbsp;Node.nodeType&nbsp;来获取。<br><br>节点编号&nbsp;&nbsp;节点名称<br>1&nbsp;&nbsp;Element<br>2&nbsp;&nbsp;Attribute<br>3&nbsp;&nbsp;Text<br>4&nbsp;&nbsp;CDATA&nbsp;Section<br>5&nbsp;&nbsp;Entity&nbsp;Reference<br>6&nbsp;&nbsp;Entity<br>7&nbsp;&nbsp;Processing&nbsp;Instrucion<br>8&nbsp;&nbsp;Comment<br>9&nbsp;&nbsp;Document<br>10&nbsp;&nbsp;Document&nbsp;Type<br>11&nbsp;&nbsp;Document&nbsp;Fragment<br>12&nbsp;&nbsp;Notation<br><br>NOTE：此处需要清楚节点和元素的区别。我们平常说的元素&nbsp;其实指的是节点中得元素节点，所以说节点包含元素，节点还包括文本节点、实体节点等。<br><br>元素遍历<br><br>元素节点符合&nbsp;HTML&nbsp;DOM&nbsp;树规则，所以它与&nbsp;DOM&nbsp;中存在的节点相似。<br>&lt;p&gt;<br>&nbsp;&nbsp;Hello,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;em&gt;Xinyang&lt;/em&gt;!<br>&nbsp;&nbsp;回到<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主页<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;<br>&nbsp;&nbsp;。<br>&lt;/p&gt;<br>//&nbsp;在选取元素节点后<br><br>p.firstElementChild;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;em&gt;Xinyang&lt;/em&gt;<br>p.lastElementChild;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;主页&lt;/a&gt;<br><br>em.nextElementSibling;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;主页&lt;/a&gt;<br>em.previousElementSibling;&nbsp;//&nbsp;&quot;Hello,&quot;","addLink":"","date":"2016-01-07 18:27","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"节点操作","classify":"dom","addarticleContent":"因为&nbsp;DOM&nbsp;的存在，这使我们可以通过&nbsp;JavaScript&nbsp;来获取、创建、修改、或删除节点。<br><br>NOTE：下面提供的例子中的&nbsp;element&nbsp;均为元素节点。<br><br>1、获取节点<br><br>父子关系<br><br>element.parentNode<br>element.firstChild/element.lastChild<br>element.childNodes/element.children<br><br>兄弟关系<br><br>element.previousSibling/element.nextSibling<br>element.previousElementSibling/element.nextElementSibling<br><br>通过节点直接的关系获取节点会导致代码维护性大大降低（节点之间的关系变化会直接影响到获取节点），而通过接口则可以有效的解决此问题。<br><br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;ELEMENT_NODE&nbsp;&&nbsp;TEXT_NODE&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;ul&nbsp;id=&quot;ul&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;First&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Second&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Third&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Fourth&lt;/li&gt;<br>&nbsp;&nbsp;&lt;/ul&gt;<br>&nbsp;&nbsp;&lt;p&gt;Hello&lt;/p&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;ulNode&nbsp;=&nbsp;document.getElementsByTagName(&quot;ul&quot;)[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.parentNode);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;body&gt;&lt;/body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.previousElementSibling);&nbsp;//null<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.nextElementSibling);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;p&gt;Hello&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.firstElementChild);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;li&gt;First&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.lastElementChild);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;li&gt;Fourth&lt;/li&gt;<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>NTOE：细心地人会发现，在节点遍历的例子中，body、ul、li、p节点之间是没有空格的，因为如果有空格，那么空格就会被当做一个TEXT节点，从而用ulNode.previousSibling获取到得就是一个空的文本节点，而不是&nbsp;&lt;li&gt;First&lt;/li&gt;&nbsp;节点了。即节点遍历的几个属性会得到所有的节点类型，而元素遍历只会得到相对应的元素节点。一般情况下，用得比较多得还是元素节点的遍历属性。<br><br>实现浏览器兼容版的element.children<br>有一些低版本的浏览器并不支持&nbsp;element.children&nbsp;方法，但我们可以用下面的方式来实现兼容。<br><br>&lt;html&nbsp;lang&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charest=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;Compatible&nbsp;Children&nbsp;Method&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&nbsp;id=&quot;body&quot;&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;item&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;123&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;ppp&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;h1&lt;/h1&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;getElementChildren(e){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(e.children){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;e.children;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;compatible&nbsp;other&nbsp;browse&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;i,&nbsp;len,&nbsp;children&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;child&nbsp;=&nbsp;element.firstChild;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(child&nbsp;!=&nbsp;element.lastChild){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(child&nbsp;!=&nbsp;null){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(child.nodeType&nbsp;==&nbsp;1){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children.push(child);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child&nbsp;=&nbsp;child.nextSibling;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children.push(child);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;children;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Test&nbsp;method&nbsp;getElementChildren(e)&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;item&nbsp;=&nbsp;document.getElementById(&quot;item&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;children&nbsp;=&nbsp;getElementChildren(item);<br>&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i&nbsp;=0;&nbsp;i&nbsp;&lt;&nbsp;children.length;&nbsp;i++){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(children[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>NOTE：此兼容方法为初稿，还未进行兼容性测试。<br><br><br><br>2、接口获取元素节点<br><br>getElementById<br>getElementsByTagName<br>getElementsByClassName<br>querySelector<br>querySelectorAll<br><br>API&nbsp;&nbsp;只作用于&nbsp;document&nbsp;&nbsp;唯一返回值&nbsp;&nbsp;live<br>getElementById&nbsp;&nbsp;√&nbsp;&nbsp;√&nbsp;&nbsp;<br>getElementsByTagName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;√<br>getElementsByClassName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;√<br>querySelectorAll&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>querySelector&nbsp;&nbsp;&nbsp;&nbsp;√&nbsp;&nbsp;<br>getElementById<br><br>获取文档中指定&nbsp;id&nbsp;的节点对象。<br>var&nbsp;element&nbsp;=&nbsp;document.getElementById(&quot;id&quot;);<br>getElementsByTagName<br><br>动态的获取具有指定标签元素节点的集合（其返回值会被&nbsp;DOM&nbsp;的变化所影响，其值会发生变化）。此接口可直接通过元素而获取，不必直接作用于&nbsp;document&nbsp;之上。<br>//&nbsp;示例<br>var&nbsp;collection&nbsp;=&nbsp;element.getElementsByTagName(&quot;tagName&quot;);<br><br>//&nbsp;获取指定元素的所有节点<br>var&nbsp;allNodes&nbsp;=&nbsp;document.getElementsByTagName(&quot;*&quot;);<br><br>//&nbsp;获取所有&nbsp;p&nbsp;元素的节点<br>var&nbsp;elements&nbsp;=&nbsp;document.getElementsByTagName(&quot;p&quot;);<br>//&nbsp;取出第一个&nbsp;p&nbsp;元素<br>var&nbsp;p&nbsp;=&nbsp;elements[0];<br>getElementsByClassName<br><br>获取指定元素中具有指定&nbsp;class&nbsp;的所有节点。多个&nbsp;class&nbsp;可的选择可使用空格分隔，与顺序无关。<br>var&nbsp;elements&nbsp;=&nbsp;element.getElementsByClassName(&quot;className&quot;);<br><br>NOTE：IE9&nbsp;及一下版本不支持&nbsp;getElementsByClassName<br>兼容方法<br><br>function&nbsp;getElementsByClassName(root,&nbsp;className)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;特性侦测<br>&nbsp;&nbsp;if&nbsp;(root.getElementsByClassName)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;优先使用&nbsp;W3C&nbsp;规范接口<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;root.getElementsByClassName(className);<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取所有后代节点<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;elements&nbsp;=&nbsp;root.getElementsByTagName(&quot;*&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;element&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;classNameStr&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;flag&nbsp;=&nbsp;null;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;className&nbsp;=&nbsp;className.split(&quot;&nbsp;&quot;);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;选择包含&nbsp;class&nbsp;的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;element;&nbsp;element&nbsp;=&nbsp;elements[i];&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;classNameStr&nbsp;=&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;element.getAttribute(&quot;class&quot;)&nbsp;+&nbsp;&quot;&nbsp;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag&nbsp;=&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;j&nbsp;=&nbsp;0,&nbsp;name;&nbsp;name&nbsp;=&nbsp;className[j];&nbsp;j++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(classNameStr.indexOf(&quot;&nbsp;&quot;&nbsp;+&nbsp;name&nbsp;+&nbsp;&quot;&nbsp;&quot;)&nbsp;===&nbsp;-1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag&nbsp;=&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(flag)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push(element);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result;<br>&nbsp;&nbsp;}<br>}<br><br>querySelector&nbsp;/&nbsp;querySelectorAll<br><br>获取一个&nbsp;list&nbsp;（其返回结果不会被之后&nbsp;DOM&nbsp;的修改所影响，获取后不会再变化）符合传入的&nbsp;CSS&nbsp;选择器的第一个元素或全部元素。<br>var&nbsp;listElementNode&nbsp;=&nbsp;element.querySelector(&quot;selector&quot;);<br>var&nbsp;listElementsNodes&nbsp;=&nbsp;element.querySelectorAll(&quot;selector&quot;);<br><br>var&nbsp;sampleSingleNode&nbsp;=&nbsp;element.querySelector(&quot;#className&quot;);<br>var&nbsp;sampleAllNodes&nbsp;=&nbsp;element.querySelectorAll(&quot;#className&quot;);<br>NOTE:&nbsp;IE9&nbsp;一下不支持&nbsp;querySelector&nbsp;与&nbsp;querySelectorAll<br><br><br>3、创建节点<br><br>创建节点&nbsp;-&gt;&nbsp;设置属性&nbsp;-&gt;&nbsp;插入节点<br>var&nbsp;element&nbsp;=&nbsp;document.createElement(&quot;tagName&quot;);<br><br><br>4、节点<br><br>textContent<br>获取或设置节点以及其后代节点的文本内容（对于节点中的所有文本内容）。<br>element.textContent;&nbsp;//&nbsp;获取<br>element.textContent&nbsp;=&nbsp;&quot;New&nbsp;Content&quot;;<br>NOTE：不支持&nbsp;IE&nbsp;9&nbsp;及其一下版本。<br><br>innerText&nbsp;（不符合&nbsp;W3C&nbsp;规范）<br>获取或设置节点以及节点后代的文本内容。其作用于&nbsp;textContent&nbsp;几乎一致。<br>element.innerText;<br><br>NOTE：不符合&nbsp;W3C&nbsp;规范，不支持&nbsp;FireFox&nbsp;浏览器。<br>FireFox&nbsp;兼容方案<br>if&nbsp;(!(&quot;innerText&quot;&nbsp;in&nbsp;document.body))&nbsp;{<br>&nbsp;&nbsp;HTMLElement.prototype.__defineGetter__(&quot;innerText&quot;,&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.textContent;<br>&nbsp;&nbsp;});<br>&nbsp;&nbsp;HTMLElement.prototype.__defineSetter__(&quot;innerText&quot;,&nbsp;function(s)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.textContent&nbsp;=&nbsp;s;<br>&nbsp;&nbsp;});<br>}<br><br><br>5、插入节点<br><br>appendChild<br><br>在指定的元素内追加一个元素节点。<br>var&nbsp;aChild&nbsp;=&nbsp;element.appendChild(aChild);<br>insertBefore<br><br>在指定元素的指定节点前插入指定的元素。<br>var&nbsp;aChild&nbsp;=&nbsp;element.insertBefore(aChild,&nbsp;referenceChild);<br><br><br>6、删除节点<br><br>删除指定的节点的子元素节点。<br>var&nbsp;child&nbsp;=&nbsp;element.removeChild(child);<br>innerHTML<br><br>获取或设置指定节点之中所有的&nbsp;HTML&nbsp;内容。替换之前内部所有的内容并创建全新的一批节点（去除之前添加的事件和样式）。innerHTML&nbsp;不检查内容，直接运行并替换原先的内容。<br><br>NOTE：只建议在创建全新的节点时使用。不可在用户可控的情况下使用。<br>var&nbsp;elementsHTML&nbsp;=&nbsp;element.innerHTML;<br>存在的问题<br>低版本&nbsp;IE&nbsp;存在内存泄露<br>安全问题（用户可以在名称中运行脚本代码）","addLink":"","date":"2016-01-07 18:32","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"属性操作","classify":"dom","addarticleContent":"1、HTML&nbsp;属性与&nbsp;DOM&nbsp;属性的对应<br><br>每个&nbsp;HTML&nbsp;属性都会对应相应的&nbsp;DOM&nbsp;对象属性。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;label&nbsp;for=&quot;username&quot;&gt;User&nbsp;Name:&nbsp;&lt;/label&gt;<br>&nbsp;&nbsp;&lt;input&nbsp;type=&quot;input&quot;&nbsp;name=&quot;username&quot;&nbsp;id=&quot;username&quot;&nbsp;class=&quot;text&quot;&nbsp;value=&quot;&quot;&gt;<br>&lt;/div&gt;<br>input.id;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br>input.type;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;text&quot;<br>input.className;&nbsp;//&nbsp;&quot;text&quot;<br><br>label.htmlFor;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br><br><br><br>2、属性操作方式<br><br>3、Property&nbsp;Accessor<br><br>通过属性方法符得到的属性为转换过的实例对象（并非全字符串）。<br>特点<br><br>X&nbsp;通用行差（命名异常，使用不同的命名方式进行访问）<br>X&nbsp;扩展性差<br>√&nbsp;实用对象（取出后可直接使用）<br><br>读取属性<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;label&nbsp;for=&quot;username&quot;&gt;User&nbsp;Name:&nbsp;&lt;/label&gt;<br>&nbsp;&nbsp;&lt;input&nbsp;type=&quot;input&quot;&nbsp;name=&quot;username&quot;&nbsp;id=&quot;username&quot;&nbsp;class=&quot;text&quot;&nbsp;value=&quot;&quot;&gt;<br>&lt;/div&gt;<br>input.className;&nbsp;//&nbsp;&quot;text&quot;<br>input[id];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br><br>写入属性<br><br>可增加新的属性或改写已有属性。<br>input.value&nbsp;=&nbsp;&quot;new&nbsp;value&quot;;<br>input[id]&nbsp;=&nbsp;&quot;new-id&quot;;<br><br><br><br>4、getAttribute&nbsp;/&nbsp;setAttribute<br><br>特点<br><br>X&nbsp;仅可获取字符串（使用时需转换）<br>√&nbsp;通用性强<br><br>读取属性<br><br>获取到的均为属性的字符串。<br>var&nbsp;attribtue&nbsp;=&nbsp;element.getAttribute(&quot;attributeName&quot;);<br><br>写入属性<br><br>可增加新的属性或改写已有属性。<br>element.setAttribute(&quot;attributeName&quot;,&nbsp;value);<br>dataset<br><br>自定义属性，其为&nbsp;HTMLElement&nbsp;上的属性也是&nbsp;data-*&nbsp;的属性集。主要用于在元素上保存数据。获取的均为属性字符串。数据通常使用&nbsp;AJAX&nbsp;获取并存储在节点之上。<br>&lt;div&nbsp;id=&quot;user&quot;&nbsp;data-id=&quot;1234&quot;&nbsp;data-username=&quot;x&quot;&nbsp;data-email=&quot;mail@gmail.com&quot;&gt;&lt;/div&gt;<br>div.dataset.id;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;1234&quot;<br>div.dataset.username;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;x&quot;<br>div.dataset.email;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;mail@gmail.com&quot;<br>NOTE：dataset&nbsp;在低版本&nbsp;IE&nbsp;不可使用，但可通过&nbsp;getAttribute&nbsp;与&nbsp;setAttribute&nbsp;来做兼容。","addLink":"","date":"2016-01-07 19:19","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"样式操作","classify":"dom","addarticleContent":"通过&nbsp;JavaScript&nbsp;动态修改页面样式。<br>CSS&nbsp;对应&nbsp;DOM&nbsp;对象<br><br><br><br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;sample.css&quot;&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;link&quot;);<br>//&nbsp;对应于&nbsp;element.sheet<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&nbsp;media=&quot;screen&quot;&gt;<br>&nbsp;&nbsp;body&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;30px<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;style&quot;);<br>//&nbsp;对应于&nbsp;element.sheet<br><br>//&nbsp;整个页面的全部样式（不包括行内样式）<br>document.styleSheets<br><br>&lt;p&nbsp;style=&quot;color:red&quot;&gt;Text&nbsp;Color&lt;/p&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;p&quot;);<br>//&nbsp;对应于&nbsp;element.style<br>内部样式表<br><br>&lt;style&gt;<br>&nbsp;&nbsp;body{margin:30;}<br>&nbsp;&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>&lt;/style&gt;<br><br>//&nbsp;1.对应所有样式的列表<br>//&nbsp;body{margin:30;}<br>//&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>element.sheet.cssRules;<br><br>//&nbsp;2.对应相应的&nbsp;CSS&nbsp;选择器<br>//&nbsp;p<br>element.sheet.cssRules[1].selectorText;<br><br>//&nbsp;3.对应一个样式<br>//&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>element.sheet.cssRules[1]<br><br>//&nbsp;4.对应所有样式的键值对<br>//&nbsp;color:&nbsp;#aaa;&nbsp;line-height:20px<br>element.sheet.cssRules[1].style;<br><br>//&nbsp;5.对应的属性值<br>//&nbsp;#aaa<br>element.sheet.cssRules[1].stlye.color;<br>element.sheet.cssRules[1].lineHeight;<br>行内样式<br><br>其对应于&nbsp;CSSStyleDeclaration&nbsp;的对象。<br>element.style.color;<br>//&nbsp;获取行内样式的键值对<br>更新样式<br><br>element.style<br><br>element.style.color&nbsp;=&nbsp;&quot;red&quot;;<br>element.style.background&nbsp;=&nbsp;&quot;black&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;style=&quot;color:&nbsp;red;&nbsp;background:&nbsp;black;&quot;&gt;&lt;/div&gt;<br>缺点<br><br>每个属性的更新都需要一个命令<br>命名异常（以驼峰命名法命名属性）<br>element.style.cssText<br><br>一次同时设置多个行内样式，其结果同&nbsp;element.style&nbsp;单独设置相同。<br>element.style.cssText&nbsp;=&nbsp;&quot;color:&nbsp;red;&nbsp;background:&nbsp;black&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;style=&quot;color:&nbsp;red;&nbsp;background:&nbsp;black;&quot;&gt;&lt;/div&gt;<br>以上两种方式均将样式混合在逻辑当中。<br>更新&nbsp;class<br><br>首先需要创建对应样式的&nbsp;CSS&nbsp;样式。<br>.angry&nbsp;{<br>&nbsp;&nbsp;color:&nbsp;red;<br>&nbsp;&nbsp;background:&nbsp;black;<br>}<br>然后再在&nbsp;JavaScript&nbsp;中，在对应的事件中给元素添加需要的类即可。<br>element.className&nbsp;+=&nbsp;&quot;&nbsp;angry&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;class=&quot;angry&quot;&gt;&lt;/div&gt;<br>统一更新多个元素样式<br><br>以上方法均不适合同时更新多个样式，通过更换样式表的方式则可同时更改多个页面中的样式。将需要的大量样式也在一个皮肤样式表中，通过&nbsp;JavaScript&nbsp;来直接更换样式表来进行样式改变。（此方法也可用于批量删除样式）<br><br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;base.css&quot;&gt;<br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;style1.css&quot;&gt;<br>element.setAttribute(&quot;href&quot;,&nbsp;&quot;style2.css&quot;);<br>获取样式<br><br>element.style<br><br>其对应的为元素的行内样式表而不是实际样式表。<br>&lt;input&nbsp;type=&quot;checkbox&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;<br>element.style.color;&nbsp;//&nbsp;&quot;&quot;<br>line-height:&nbsp;200px<br>window.getComputedStyle()<br><br>将需要取出样式的目标元素传入&nbsp;window.getComputedStyle()&nbsp;函数中，即可得到对应元素的实际样式。注意的是这里获取到的样式值为只读属性不可修改！<br>NOTE：获取的实际为&nbsp;CSSStyleDeclaration&nbsp;的实例对象。&nbsp;NOTE+：此方法不支持&nbsp;IE9&nbsp;以下版本，IE9&nbsp;中需使用&nbsp;element.currentStyle&nbsp;来做兼容。<br>var&nbsp;style&nbsp;=&nbsp;window.getComputedStyle(element[,&nbsp;pseudoEle]);<br>&lt;input&nbsp;type=&quot;checkbox&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;<br>window.getComputedStyle(element).color;&nbsp;//&nbsp;&quot;rgb(0,0,0)&quot;","addLink":"","date":"2016-01-07 19:38","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"DOM 事件","classify":"dom","addarticleContent":"何为&nbsp;DOM&nbsp;事件，HTML&nbsp;DOM&nbsp;使JavaScript&nbsp;有能力对&nbsp;HTML&nbsp;事件做出反应。（例如，点击&nbsp;DOM&nbsp;元素，键盘被按，输入框输入内容以及页面加载完毕等）<br>事件流<br><br>一个&nbsp;DOM&nbsp;事件可以分为捕获过程、触发过程、冒泡过程。&nbsp;DOM&nbsp;事件流为&nbsp;DOM&nbsp;事件的处理及执行的过程。<br><br>事件注册<br><br>事件注册，取消以及触发其作用对象均为一个&nbsp;DOM&nbsp;元素。<br>注册事件<br><br>eventTarget.addEventListener(type,&nbsp;listener[,useCapture])<br>evenTarget&nbsp;表示要绑定事件的DOM元素<br>type&nbsp;表示要绑定的事件，如：&quot;click&quot;<br>listener&nbsp;表示要绑定的函数<br>useCapture&nbsp;可选参数，表示是否捕获过程<br>NOTE：useCapture&nbsp;为设定是否为捕获过程，默认事件均为冒泡过程，只有&nbsp;useCapture&nbsp;为&nbsp;true&nbsp;时才会启用捕获过程。<br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;事件处理函数<br>var&nbsp;clickHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;statements<br>};<br><br>//&nbsp;注册事件<br>elem.addEventListener(&quot;click&quot;,&nbsp;clickHandler,&nbsp;false);<br><br>//&nbsp;第二种方式，不建议使用<br>elem.onclick&nbsp;=&nbsp;clickHandler;<br>//&nbsp;或者来弥补只可触发一个处理函数的缺陷<br>elem.onclick&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;clickHandler();<br>&nbsp;&nbsp;func();<br>&nbsp;&nbsp;//&nbsp;其他处理函数<br>};<br><br>取消事件<br><br>eventTarget.removeEventListener(type,&nbsp;listener[,useCapture]);<br>evenTarget&nbsp;表示要绑定事件的DOM元素<br>type&nbsp;表示要绑定的事件，如：&quot;click&quot;<br>listener&nbsp;表示要绑定的函数<br>useCapture&nbsp;可选参数，表示是否捕获过程<br><br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;取消事件<br>elem.removeEventListener(&quot;click&quot;,&nbsp;clickHandler,&nbsp;false);<br><br>//&nbsp;第二种方式。不建议使用<br>elem.onclick&nbsp;=&nbsp;null;<br><br>触发事件<br><br>点击元素，按下按键均会触发&nbsp;DOM&nbsp;事件，当然也可以以通过代码来触发事件。<br>eventTarget.dispatchEvent(type);<br><br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;触发事件<br>elem.dispatchEvent(&quot;click&quot;);<br><br>浏览器兼容型<br><br>以上均为&nbsp;W3C定义的标准定义，但早期浏览器&nbsp;IE8&nbsp;及其以下版本，均没有采用标准的实现方式。不过这些低版本浏览器也提供了对于&nbsp;DOM&nbsp;事件的注册、取消以及触发的实现。<br>事件注册与取消，attchEvent/detachEvent。事件触发，fireEvent(e)，其也不存在捕获阶段（Capture&nbsp;Phase）。<br>兼容低版本代码实现<br><br>注册事件<br><br>var&nbsp;addEvent&nbsp;=&nbsp;document.addEventListener&nbsp;?<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.addEventListener(type,&nbsp;listener,&nbsp;useCapture);<br>&nbsp;&nbsp;}&nbsp;:<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.attachEvent(&quot;on&quot;&nbsp;+&nbsp;type,&nbsp;listener);<br>&nbsp;&nbsp;}<br><br>取消事件<br><br>var&nbsp;addEvent&nbsp;=&nbsp;document.removeElementListener&nbsp;?<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.removeElementListener(type,&nbsp;listener,&nbsp;useCapture);<br>&nbsp;&nbsp;}&nbsp;:<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.detachEvent(&quot;on&quot;&nbsp;+&nbsp;type,&nbsp;listener);<br>&nbsp;&nbsp;}<br><br>事件对象<br><br>调用事件处理函数时传入的信息对象，这个对象中含有关于这个事件的详细状态和信息，它就是事件对象&nbsp;event。其中可能包含鼠标的位置，键盘信息等。<br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;事件处理函数<br>var&nbsp;clickHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;statements<br>};<br><br>//&nbsp;注册事件<br>elem.addEventListener(&quot;click&quot;,&nbsp;clickHandler,&nbsp;false);<br><br>NOTE：在低版本&nbsp;IE&nbsp;中事件对象是被注册在&nbsp;window&nbsp;之上而非目标对象上。使用下面的兼容代码既可解决。<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;事件处理函数<br>var&nbsp;clickHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;event&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;//&nbsp;statements<br>};<br><br>属性和方法<br><br>通用属性和方法<br><br>属性<br><br>type&nbsp;事件类型<br>target(srcElement&nbsp;IE&nbsp;低版本)&nbsp;事件触发节点<br>currentTarget&nbsp;处理事件的节点<br>方法<br><br>stopPropagation&nbsp;阻止事件冒泡传播<br>preventDefault&nbsp;阻止默认行为<br>stopImmediatePropagation&nbsp;阻止冒泡传播<br><br>阻止事件传播<br><br>event.stopPropagation()（W3C规范方法），如果在当前节点已经处理了事件，则可以阻止事件被冒泡传播至&nbsp;DOM&nbsp;树最顶端即&nbsp;window&nbsp;对象。<br>event.stopImmediatePropagation()&nbsp;此方法同上面的方法类似，除了阻止将事件冒泡传播值最高的&nbsp;DOM&nbsp;元素外，还会阻止在此事件后的事件的触发。<br>event.cancelBubble=true&nbsp;为&nbsp;IE&nbsp;低版本中中对于阻止冒泡传播的实现。<br><br>阻止默认行为<br><br>默认行为是指浏览器定义的默认行为（点击一个链接的时候，链接默认就会打开。当我们双击文字的时候，文字就会被选中），比如单击链接可以打开新窗口。<br>Event.preventDefault()&nbsp;为&nbsp;W3C&nbsp;规范方法，在&nbsp;IE&nbsp;中的实现方法为&nbsp;Event.returnValue=false。<br><br>事件分类<br><br>Event<br><br><br><br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>load&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Document,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;image,&nbsp;iframe<br>unload&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Document,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window<br>error&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;image<br>select&nbsp;&nbsp;NO&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;input,&nbsp;textarea<br>abort&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;image<br>window<br><br>load&nbsp;页面全部加载完毕<br>unload&nbsp;离开本页之前的卸载<br>error&nbsp;页面异常<br>abort&nbsp;取消加载<br>image<br><br>load&nbsp;图片加载完毕<br>error&nbsp;图标加载错误<br>abort&nbsp;取消图标加载<br>在目标图标不能正常载入时，载入备份替代图来提供用户体验。<br>&lt;img&nbsp;src=&quot;http://sample.com/img.png&quot;&nbsp;onerror=&quot;this.src=&quot;http://sample.com/default.png&quot;&quot;&gt;<br>UIEvent<br><br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>resize&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;iframe<br>scroll&nbsp;&nbsp;NO/YES&nbsp;&nbsp;Document,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;document,&nbsp;div<br>NOTE：resize&nbsp;为改变浏览器或iframe的窗体大小时会触发事件，scroll&nbsp;则会在滑动内容时触发，作用于&nbsp;Document&nbsp;则不会冒泡，作用于内部元素则会冒泡。<br>MouseEvent<br><br>DOM&nbsp;事件中最常见的事件之一。<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>click&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;focus/activation&nbsp;&nbsp;div<br>dbclick&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;focus/activation/select&nbsp;&nbsp;div<br>mousedown&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;drag/scroll/text&nbsp;selection&nbsp;&nbsp;div<br>mosuemove&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseout&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseover&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseup&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;context&nbsp;menu&nbsp;&nbsp;div<br>mouseenter&nbsp;&nbsp;NO&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseleave&nbsp;&nbsp;NO&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>NOTE：mouseenter&nbsp;与&nbsp;mouseover&nbsp;的区别为前者在鼠标在子元素直接移动不会触发事件，而后者会触发。&nbsp;mouseleave&nbsp;与&nbsp;mouseout&nbsp;同上相似。<br>属性<br><br>clientX,&nbsp;clientX<br>screenX,&nbsp;screenY<br>ctrlKey,&nbsp;shiftKey,&nbsp;altKey,&nbsp;metaKey&nbsp;如果被按下则为真（true）<br>button(0,&nbsp;1,&nbsp;2)&nbsp;鼠标的间位<br><br><br>MouseEvent&nbsp;顺序<br><br>鼠标的移动过程中会产生很多事件。事件的监察频率又浏览器决定。<br>例子：从元素&nbsp;A&nbsp;上方移动过<br>mousemove&nbsp;-&gt;&nbsp;mouseover(A)&nbsp;-&gt;&nbsp;mouseenter(A)&nbsp;-&gt;&nbsp;mousemove(A)&nbsp;-&gt;&nbsp;mouseout(A)&nbsp;-&gt;&nbsp;mouseleave(A)<br>例子：点击元素<br>mousedown&nbsp;-&gt;&nbsp;[mousemove]&nbsp;-&gt;&nbsp;mouseup&nbsp;-&gt;&nbsp;click<br>实例：拖动元素<br><br>&lt;div&nbsp;id=&quot;div0&quot;&gt;&lt;/div&gt;<br>&lt;style&nbsp;media=&quot;screen&quot;&gt;<br>&nbsp;&nbsp;#div0&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;absolute;<br>&nbsp;&nbsp;&nbsp;&nbsp;top:&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;left:&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100px;<br>&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100px;<br>&nbsp;&nbsp;&nbsp;&nbsp;border:&nbsp;1px&nbsp;solid&nbsp;black;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;div0&quot;);<br>var&nbsp;clientX,&nbsp;clientY,&nbsp;isMoving;<br>var&nbsp;mouseDownHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;event&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;clientX&nbsp;=&nbsp;event.clientX;<br>&nbsp;&nbsp;clientY&nbsp;=&nbsp;event.clientY;<br>&nbsp;&nbsp;isMoving&nbsp;=&nbsp;true;<br>}<br><br>var&nbsp;mouseMoveHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(!isMoving)&nbsp;return;<br>&nbsp;&nbsp;event&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;var&nbsp;newClientX&nbsp;=&nbsp;event.clientX,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newClientY&nbsp;=&nbsp;event.clientY;<br>&nbsp;&nbsp;var&nbsp;left&nbsp;=&nbsp;parseInt(elem.style.left)&nbsp;||&nbsp;0,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top&nbsp;=&nbsp;parseInt(elem.style.top)&nbsp;||&nbsp;0;<br>&nbsp;&nbsp;elem.style.left&nbsp;=&nbsp;left&nbsp;+&nbsp;(newClientX&nbsp;-&nbsp;clientX)&nbsp;+&nbsp;&quot;px&quot;;<br>&nbsp;&nbsp;elem.style.top&nbsp;=&nbsp;top&nbsp;+&nbsp;(newClientY&nbsp;-&nbsp;clientY)&nbsp;+&nbsp;&quot;px&quot;;<br>&nbsp;&nbsp;clientX&nbsp;=&nbsp;newClientX;<br>&nbsp;&nbsp;clientY&nbsp;=&nbsp;newClientY;<br>}<br><br>var&nbsp;mouseUpHandler&nbsp;=&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;isMoving&nbsp;=&nbsp;false;<br>}<br><br>addEvent(elem,&nbsp;&quot;mousedown&quot;,&nbsp;mouseDownHandler);<br>addEvent(elem,&nbsp;&quot;mouseup&quot;,&nbsp;mouseUpHandler);<br>addEvent(elem,&nbsp;&quot;mousemove&quot;,&nbsp;mouseMoveHandler);<br>滚轮事件（Wheel）<br><br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>wheel&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;scroll&nbsp;or&nbsp;zoom&nbsp;document&nbsp;&nbsp;div<br>属性<br><br>deltaMode&nbsp;鼠标滚轮偏移量的单位<br>deltaX<br>deltaY<br>deltaZ<br>FocusEvent<br><br>其用于处理元素获得或失去焦点的事件。（例如输入框的可输入状态则为获得焦点，点击外部则失去焦点）<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>blur&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>focus&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>focusin&nbsp;&nbsp;NO&nbsp;&nbsp;window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>focusout&nbsp;&nbsp;NO&nbsp;&nbsp;window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>NOTE：blur&nbsp;失去焦点时，focus&nbsp;获得焦点时，focusin&nbsp;即将获得焦点，focusout即将失去焦点。<br>属性<br><br>一个元素失去，既另一个元素获得焦点。这里的&nbsp;relatedTarget&nbsp;则为相对的那个元素。<br>relatedTarget<br>InputEvent<br><br>输入框输入内容则会触发输入事件。<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>beforeInput&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;update&nbsp;DOM&nbsp;Element&nbsp;&nbsp;input<br>input&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;input<br>NOTE：beforeInput&nbsp;为在按键按下后即将将输入字符显示之前生成的事件。<br>NOTE+：IE&nbsp;并没有&nbsp;InputEvent&nbsp;则需使用&nbsp;onpropertychange(IE)&nbsp;来代替。<br>KeyboardEvent<br><br>其用于处理键盘事件。<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>keydown&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;beforeInput/input/focus/blur/activation&nbsp;&nbsp;div,&nbsp;input<br>keyup&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div,&nbsp;input<br>属性<br><br>key&nbsp;按下的键字符串<br>code<br>ctrlKey,&nbsp;shiftKey,&nbsp;altKey,&nbsp;metaKey<br>repeat&nbsp;代表按键不松开为&nbsp;true<br>keyCode<br>charCode<br>which<br>事件代理<br><br>事件代理是指在父节点上（可为元素最近的父节点也可为上层的其他节点）处理子元素上触发的事件，其原理是通过事件流机制而完成的。可以通过事件对象中获取到触发事件的对象（如下所示）。<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br>elem.addEventListener(&quot;click&quot;,&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;var&nbsp;target&nbsp;=&nbsp;e.target&nbsp;||&nbsp;e.srcElement;<br>&nbsp;&nbsp;//&nbsp;statements<br>});<br>优点<br><br>需要管理的事件处理函数更少<br>内存分配更少，更高效<br>增加与删除子节点可以不额外处理事件<br>缺点<br><br>事件管理的逻辑变的复杂（因为冒泡机制）<br><br>","addLink":"","date":"2016-01-07 20:29","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4},{"addArticleTtitle":"BOM","classify":"dom","addarticleContent":"BOM&nbsp;为浏览器窗口对象的一组&nbsp;API。<br>BOM&nbsp;结构图<br><br><br>属性<br><br>属性名&nbsp;&nbsp;描述<br>navigator&nbsp;&nbsp;浏览器信息<br>location&nbsp;&nbsp;浏览器定位和导航<br>history&nbsp;&nbsp;窗口浏览器历史<br>screen&nbsp;&nbsp;屏幕信息<br>navigator<br><br>navigator.userAgent<br>Chrome,&nbsp;Mozilla/5.0(Windows&nbsp;NT&nbsp;6.1;&nbsp;WOW64)&nbsp;Apple&nbsp;WebKit/37.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/40.0.2214.115&nbsp;Safari/537.36<br>Firefox,&nbsp;Mozilla/5.0(Windows&nbsp;NT&nbsp;6.1;&nbsp;WOW64;&nbsp;rv:36.0)&nbsp;Gecko/20100101&nbsp;Firefox/36.0<br>IE,&nbsp;Mozilla/5.0&nbsp;(Windows&nbsp;NT&nbsp;6.1;&nbsp;WOW64;&nbsp;Trident/7.0;&nbsp;SLCC2;&nbsp;.NET&nbsp;CLR&nbsp;2.0.50727;&nbsp;.NET&nbsp;CLR&nbsp;3.5.30729;&nbsp;.NET&nbsp;CLR&nbsp;3.0.30729;&nbsp;Media&nbsp;Center&nbsp;PC&nbsp;6.0;&nbsp;.NET4.0C;&nbsp;.NET4.0E;&nbsp;InfoPath.3;&nbsp;rv:11.0)&nbsp;like&nbsp;Gecko<br>appCodeName:&nbsp;&quot;Mozilla&quot;appName:&nbsp;&quot;Netscape&quot;appVersion:&nbsp;&quot;5.0&nbsp;(Macintosh;&nbsp;Intel&nbsp;Mac&nbsp;OS&nbsp;X&nbsp;10_10_3)&nbsp;AppleWebKit/537.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/43.0.2357.124&nbsp;Safari/537.36&quot;cookieEnabled:&nbsp;truedoNotTrack:&nbsp;&quot;1&quot;geolocation:&nbsp;GeolocationhardwareConcurrency:&nbsp;8language:&nbsp;&quot;en-US&quot;languages:&nbsp;Array[4]maxTouchPoints:&nbsp;0mimeTypes:&nbsp;MimeTypeArrayonLine:&nbsp;truepermissions:&nbsp;Permissionsplatform:&nbsp;&quot;MacIntel&quot;plugins:&nbsp;PluginArrayproduct:&nbsp;&quot;Gecko&quot;productSub:&nbsp;&quot;20030107&quot;serviceWorker:&nbsp;ServiceWorkerContaineruserAgent:&nbsp;&quot;Mozilla/5.0&nbsp;(Macintosh;&nbsp;Intel&nbsp;Mac&nbsp;OS&nbsp;X&nbsp;10_10_3)&nbsp;AppleWebKit/537.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/43.0.2357.124&nbsp;Safari/537.36&quot;vendor:&nbsp;&quot;Google&nbsp;Inc.&quot;vendorSub:&nbsp;&quot;&quot;webkitPersistentStorage:&nbsp;DeprecatedStorageQuotawebkitTemporaryStorage:&nbsp;DeprecatedStorageQuota__proto__:&nbsp;Navigator<br>NOTE：可以通过&nbsp;userAgent&nbsp;判断浏览器。<br>location<br><br>代表浏览器的定位和导航。可以使用&nbsp;location&nbsp;来操作&nbsp;URL&nbsp;中的各个部分。最常用的有&nbsp;href&nbsp;属性，当前访问资源的完整路径。<br>http://www.github.com:8080/index.html?user=li-xinyang&lang=zh-CN#home<br>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>protocol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hostname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#92;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;pathname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host<br>方法<br><br>assign(url)&nbsp;载入新的&nbsp;url，记录浏览记录<br>replace(url)&nbsp;载入新的&nbsp;url&nbsp;不记录浏览记录<br>reload()&nbsp;重新载入当前页<br>history<br><br>浏览器当前窗口的浏览历史。<br>length:&nbsp;9state:&nbsp;null&nbsp;__proto__:&nbsp;History<br>方法<br><br>back(int)&nbsp;后退<br>forward(int)&nbsp;前进<br>go(int)&nbsp;正数向前，附属向后<br>screen<br><br>其中包含屏幕信息。其中&nbsp;avil-&nbsp;开头的属性为可用属性，其余则为显示器设备属性。<br>Window&nbsp;方法<br><br>方法&nbsp;&nbsp;描述<br>alert(),&nbsp;confirm()&nbsp;返回真假,&nbsp;prompt()&nbsp;返回用户输入值&nbsp;&nbsp;三种对话框<br>setTimeout(),&nbsp;setInterval()&nbsp;&nbsp;计时器<br>open(),&nbsp;close()&nbsp;&nbsp;开启窗口，关闭窗口<br>NOTE：对话框会阻塞线程。<br>打开或关闭窗口<br>var&nbsp;w&nbsp;=&nbsp;window.open(&quot;subwindow.html&quot;,&nbsp;&quot;subwin&quot;,&nbsp;&quot;width=300,&nbsp;height=300,&nbsp;status=yes,&nbsp;resizable=yes&quot;);<br><br>//&nbsp;既可关闭窗口<br>w.close();<br>NOTE：无需记忆，更多属性在使用时查询文档。<br>Window&nbsp;事件<br><br>事件名&nbsp;&nbsp;描述<br>load&nbsp;&nbsp;文档和所有图片完成加载时<br>unload&nbsp;&nbsp;离开当前文档时<br>beforeunload&nbsp;&nbsp;和&nbsp;unload&nbsp;类似，但是它提供询问用户是否确认离开的机会<br>resize&nbsp;&nbsp;拖动改变浏览器窗口大小时<br>scroll&nbsp;&nbsp;拖动浏览器时","addLink":"","date":"2016-01-07 20:31","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":5}]}';
var dataJsonStr='{"html":[{"addArticleTtitle":"HTML简介","classify":"html","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;keywords&quot;&nbsp;content=&quot;音乐。。。&quot;&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;description&quot;&nbsp;content=&quot;网易。。。&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;网易云音乐&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;div&gt;222&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>&lt;!DOCTYPE&nbsp;html&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----------文档声明<br>&lt;head&gt;.....&lt;head&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----------文档头部<br>&lt;body&gt;......&lt;/body&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-----------文档主体<br><br>注意事项：<br>&lt;!DOCTYPE&nbsp;html&gt;&nbsp;必须首行定格<br>&lt;title&gt;&nbsp;为文档标题<br>&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;&nbsp;文档编码格式<br>&lt;meta&nbsp;name=&quot;keywords&quot;&nbsp;content=&quot;...&quot;&gt;&nbsp;和&nbsp;&lt;meta&nbsp;name=&quot;description&quot;&nbsp;content=&quot;...&quot;&gt;&nbsp;提供给搜索引擎使用<br>&lt;meta&nbsp;name=&quot;viewport&quot;&nbsp;content=&quot;width=device-width,&nbsp;initial-scale=1.0&quot;&gt;&nbsp;移动端浏览器的宽高与缩放<br>&lt;link&gt;&nbsp;标签可以引入&nbsp;favicon&nbsp;和样式表&nbsp;CSS&nbsp;文件","addLink":"","date":"2016-01-06 19:43","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"HTML标签","classify":"html","addarticleContent":"1、文档章节<br><br>&lt;body&gt;&nbsp;页面内容&nbsp;&lt;header&gt;&nbsp;文档头部&nbsp;&lt;nav&gt;&nbsp;导航&nbsp;&lt;aside&gt;&nbsp;侧边栏&nbsp;&lt;article&gt;&nbsp;定义外部内容（如外部引用的文章）&nbsp;&lt;section&gt;&nbsp;一个独立的块&nbsp;&lt;footer&gt;&nbsp;尾部<br><br><br><br>2、文本标签<br><br>&lt;!--&nbsp;默认超链接&nbsp;&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;当前窗口显示&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;_self&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;新窗口显示&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;_blacnk&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;iframe&nbsp;中打开链接&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;iframe-name&quot;&gt;Sample&lt;/a&gt;<br>&lt;iframe&nbsp;name=&quot;iframe-name&quot;&nbsp;frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;<br><br>&lt;!--&nbsp;页面中的锚点&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;#achor&quot;&gt;Achor&nbsp;Point&lt;/a&gt;<br>&lt;section&nbsp;id=&quot;achor&quot;&gt;Achor&nbsp;Content&lt;/section&gt;<br><br>&lt;!--&nbsp;邮箱及电话需系统支持&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br>&lt;!--&nbsp;多个邮箱地址&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com,&nbsp;sample-address0@me.com&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br>&lt;!--&nbsp;添加抄送，主题和内容&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com?cc=admin@me.com&subject=Help&body=sample-body-text&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br><br>&lt;!--&nbsp;电话示例&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;tel:99999999&quot;&nbsp;title=&quot;Phone&quot;&gt;Ring&nbsp;Us&lt;/a&gt;<br><br><br><br>3、组合内容标签<br><br>&lt;div&gt;<br>&lt;p&gt;<br>&lt;ol&gt;<br>&lt;ul&gt;<br>&lt;dl&gt;<br>&lt;pre&gt;<br>&lt;blockquote&gt;<br><br><br><br>4、引用<br><br>&lt;cite&gt;&nbsp;引用作品的名字、作者的名字等<br>&lt;q&gt;&nbsp;引用一小段文字（大段文字引用用&lt;blockquote&gt;）<br>&lt;blockquote&gt;&nbsp;引用大块文字<br>&lt;pre&gt;&nbsp;保存格式化的内容（其空格、换行等格式不会丢失）<br>&lt;pre&gt;<br>&nbsp;&nbsp;<br>&lt;/pre&gt;<br><br><br><br>5、代码<br>&lt;code&gt;&nbsp;引用代码<br><br><br><br>6、格式化<br><br>&lt;b&gt;&nbsp;加粗&nbsp;&lt;i&gt;&nbsp;斜体<br><br><br><br>7、强调<br><br>&lt;em&gt;&nbsp;斜体。着重于强调内容，会改变语义的强调&nbsp;&lt;strong&gt;&nbsp;粗体。着重于强调内容的重要性<br><br><br><br>8、换行<br><br>&lt;br&gt;&nbsp;换行<br><br><br><br>9、列表<br><br>无序列表<br>&lt;ul&gt;<br>&nbsp;&nbsp;&lt;li&gt;标题&lt;/li&gt;<br>&nbsp;&nbsp;&lt;li&gt;结论&lt;/li&gt;<br>&lt;/ul&gt;<br><br>有序列表<br>&lt;ol&gt;<br>&nbsp;&nbsp;&lt;li&gt;第一&lt;/li&gt;<br>&nbsp;&nbsp;&lt;li&gt;第二&lt;/li&gt;<br>&lt;/ol&gt;<br><br>自定义列表<br>&lt;dl&gt;<br>&nbsp;&nbsp;&lt;dt&gt;作者&lt;/dt&gt;<br>&nbsp;&nbsp;&lt;dd&gt;爱因斯坦&lt;/dd&gt;<br>&nbsp;&nbsp;&lt;dt&gt;作品&lt;/dt&gt;<br>&nbsp;&nbsp;&lt;dd&gt;《相对论》&lt;/dd&gt;<br>&nbsp;&nbsp;&lt;dd&gt;《时间与空间》&lt;/dd&gt;<br>&lt;/dl&gt;<br><br>一个&lt;dt&gt;可以对应多个&lt;dd&gt;<br>NOTE:&nbsp;&lt;dl&gt;&nbsp;为自定义列表，其中包含一个或多个&nbsp;&lt;dt&gt;&nbsp;及&nbsp;一个或多个&nbsp;&lt;dd&gt;，并且dt&nbsp;与&nbsp;dl列表会有缩进的效果。&lt;pre&gt;&nbsp;会保留换行和空格，通常与&nbsp;&lt;code&gt;&nbsp;一同使用。<br><br>&lt;pre&gt;<br>&nbsp;&nbsp;&lt;code&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;main(void)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&lt;/code&gt;<br>&lt;/pre&gt;<br><br>&lt;blockquote&gt;&nbsp;拥有&nbsp;cite&nbsp;属性，它包含引用文本的出处，示例如下所示：<br>&lt;blockquote&nbsp;cite=&quot;http://example.com/facts&quot;&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Quote...&lt;/p&gt;<br>&lt;/blockquote&gt;<br><br><br><br>10、嵌入<br><br>&lt;iframe&nbsp;src=&quot;&quot;&gt;&lt;/iframe&gt;&nbsp;页面操作可以不影响到iframe的内容<br><br>&lt;!--object&nbsp;embed通常用来嵌入外部资源&nbsp;--&gt;<br>&lt;object&nbsp;type=&quot;application/x-shockwave-player&quot;&gt;<br>&nbsp;&nbsp;&lt;param&nbsp;name=&quot;movie&quot;&nbsp;value=&quot;book.pdf&quot;&gt;<br>&lt;/object&gt;<br><br>&lt;!--视频&nbsp;track可以引入字幕&nbsp;autoplay可以使视频加载后自动播放，loop可以使其循环播放&nbsp;--&gt;<br>&lt;video&nbsp;autoplay&nbsp;loop&nbsp;controls=&quot;controls&quot;&nbsp;poster=&quot;poster.jpg&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.mp4&quot;&nbsp;type=&quot;video/mp4&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.webm&quot;&nbsp;type=&quot;video/webm&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.ogg&quot;&nbsp;type=&quot;video/ogg&quot;&gt;<br>&nbsp;&nbsp;&lt;track&nbsp;kind=&quot;subtitles&quot;&nbsp;src=&quot;video.vtt&quot;&nbsp;srclang=&quot;cn&quot;&nbsp;label=&quot;cn&quot;&gt;<br>&lt;/video&gt;<br><br><br><br>11、资源标签<br><br>图标签<br><br>canvas&nbsp;基于像素，性能要求比较高，可用于实时数据展示。svg&nbsp;为矢量图形图像。<br>热点区域标签<br><br>img中套用map以及area可以实现点击某部分图片触发一个链接，点击另一部分触发另一个链接<br>&lt;img&nbsp;src=&quot;mama.jpg&quot;&nbsp;width=100&nbsp;height=100&nbsp;usemap=&quot;#map&quot;&nbsp;/&gt;<br>&lt;map&nbsp;name=&quot;map&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;area&nbsp;shap=&quot;rect&quot;&nbsp;coords=&quot;0,0,50,50&quot;&nbsp;href=&quot;&quot;&nbsp;alt=&quot;&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;area&nbsp;shap=&quot;circle&quot;&nbsp;coords=&quot;75,75,25&quot;&nbsp;href=&quot;&quot;&nbsp;alt=&quot;&quot;&gt;<br>&lt;/map&gt;<br><br><br><br>12、表格<br><br>表格代码示例<br>&lt;table&gt;<br>&nbsp;&nbsp;&lt;caption&gt;table&nbsp;title&nbsp;and/or&nbsp;explanatory&nbsp;text&lt;/caption&gt;<br>&nbsp;&nbsp;&lt;thead&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;header&lt;/th&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&lt;/thead&gt;<br>&nbsp;&nbsp;&lt;tbody&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;data&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&lt;/tbody&gt;<br>&lt;/table&gt;<br>使用&nbsp;colspan=val&nbsp;进行跨列，使用&nbsp;rowspan=val&nbsp;进行跨行。<br><br><br><br>13、表单<br><br>&lt;form&nbsp;action=&quot;WebCreation_submit&quot;&nbsp;method=&quot;get&quot;&nbsp;accept-charset=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&lt;fieldset&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;legend&gt;title&nbsp;or&nbsp;explanatory&nbsp;caption&lt;/legend&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;第一种添加标签的方法&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;&lt;input&nbsp;type=&quot;text/submit/hidden/button/etc&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;第二种添加标签的方法&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for=&quot;input-id&quot;&gt;Sample&nbsp;Label&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;id=&quot;input-id&quot;&gt;<br>&nbsp;&nbsp;&lt;/fieldset&gt;<br>&nbsp;&nbsp;&lt;fieldset&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;legend&gt;title&nbsp;or&nbsp;explanatory&nbsp;caption&lt;/legend&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;只读文本框&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;readonly&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;隐藏文本框，可提交影藏数据&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;hidden-info&quot;&nbsp;value=&quot;hiden-info-value&quot;&nbsp;hidden&gt;<br>&nbsp;&nbsp;&lt;/fieldset&gt;<br>&nbsp;&nbsp;&lt;button&nbsp;type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>&nbsp;&nbsp;&lt;button&nbsp;type=&quot;reset&quot;&gt;Reset&lt;/button&gt;<br>&lt;/form&gt;<br>使用fieldset可用于对表单进行分区<br>表单中的其他控件类型：<br>textarea&nbsp;（文本框）<br>select&nbsp;与&nbsp;option&nbsp;（下拉菜单可多选）<br><br><br><br><br>14、语义化<br><br>语义化（Semantic&nbsp;Tag）是指用合适的标签标识适当的内容，它可以起到搜索引擎优化（Search&nbsp;Engine&nbsp;Optimization），提高可访问性（例如盲人使用的屏幕阅读器），与此同时还可以提高代码的可读性。简而言之也就是在正确的地方使用正确的标签<br><br>","addLink":"","date":"2016-01-06 20:07","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1}],"css":[{"addArticleTtitle":"CSS语法","classify":"css","addarticleContent":"1、语法<br><br>/*&nbsp;选择器&nbsp;*/<br>.m-userlist&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;属性声明&nbsp;*/<br>&nbsp;&nbsp;margin:&nbsp;0&nbsp;0&nbsp;30px;<br>&nbsp;&nbsp;/*&nbsp;属性名:属性值;&nbsp;*/<br>}<br>.m-userlist&nbsp;.list&nbsp;{<br>&nbsp;&nbsp;position:&nbsp;relative;<br>&nbsp;&nbsp;height:&nbsp;100px;<br>&nbsp;&nbsp;overflow:&nbsp;hidden;<br>}<br><br><br>2、浏览器私有属性<br><br>Google&nbsp;Chrome,&nbsp;Safari&nbsp;(-webkit)<br>Firefox&nbsp;(-moz-)<br>IE&nbsp;(-ms-)<br>Opera&nbsp;(-o-)<br>.pic&nbsp;{<br>&nbsp;&nbsp;-webkit-transform:&nbsp;rotate(-3deg);<br>&nbsp;&nbsp;-ms-transform:&nbsp;rotate(-3deg);<br>&nbsp;&nbsp;transform:&nbsp;rotate(-3deg);<br>}<br><br>NOTE:&nbsp;使用&nbsp;http://pleeease.io/play/&nbsp;，CSS&nbsp;预处理器（Sass，Less，Stylus）或编辑器插件可自动添加浏览器厂商的私有属性前缀。<br><br><br>3、属性值语法<br><br>margin:&nbsp;[&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;auto&nbsp;]{1,4}<br>/*&nbsp;基本元素：&lt;length&gt;,&nbsp;&lt;percentage&gt;,&nbsp;auto*/<br>/*&nbsp;组合符号：[],&nbsp;|&nbsp;*/<br>/*&nbsp;数量符号：{1,4}&nbsp;*/<br><br>基本元素<br><br>关键字<br><br>auto<br>solid<br>bold<br>...<br>类型<br><br>基本类型<br>&lt;length&gt;<br>&lt;percentage&gt;<br>&lt;color&gt;<br>...<br><br>其他类型<br>&lt;padding-width&gt;<br>&lt;color-stop&gt;<br><br>符号<br>/<br>,<br>inherit,&nbsp;initial<br><br>组合符号<br><br>&lt;font-size&gt;&nbsp;&lt;font-family&gt;&nbsp;（&nbsp;&nbsp;两项必存，顺序毕遵）<br>合法：12px&nbsp;arial<br>不合法：2em<br>不合法：arial&nbsp;14px<br>&lt;length&gt;&&&lt;color&gt;&nbsp;(&&&nbsp;两项必存，顺序无碍)<br>合法：green&nbsp;2px<br>合法：1em&nbsp;orange<br>不合法：blue<br>underline&nbsp;||&nbsp;overline&nbsp;||&nbsp;line-through&nbsp;||&nbsp;blink&nbsp;(||&nbsp;至少选一，顺序无碍)<br>合法：underline<br>合法：overline&nbsp;underline<br>&lt;color&gt;&nbsp;|&nbsp;transparent（|&nbsp;只可选一，不可共存）<br>合法：orange<br>合法：transparent<br>不合法：orange&nbsp;transparent<br>bold&nbsp;[thin&nbsp;||&nbsp;&lt;length&gt;]（[]&nbsp;分组之用，视为整体）<br>合法：bold&nbsp;thin<br>合法：bold&nbsp;2em<br><br>数量符号<br><br>&lt;length&gt;（无则表示仅可出现一次）<br>合法：1px<br>合法：10em<br>不合法：1px&nbsp;2px<br>&lt;color-stop&gt;[,&nbsp;&lt;color-stop&gt;]+&nbsp;(+&nbsp;可出现一次或多次)<br>合法：#fff,&nbsp;red<br>合法：blue,&nbsp;green&nbsp;50%,&nbsp;gray<br>不合法：red<br>inset?&&&lt;color&gt;&nbsp;(?&nbsp;表示可选)<br>合法：inset&nbsp;orange<br>合法：red<br>&lt;length&gt;{2,4}&nbsp;({2,4}&nbsp;可出现次数和最少最多出现次数)<br>合法：1px&nbsp;2px<br>合法：1px&nbsp;2px&nbsp;3px<br>不合法:&nbsp;1px<br>不合法：1px&nbsp;2px&nbsp;3px&nbsp;4px&nbsp;5px<br>&lt;time&gt;[,&nbsp;&lt;time&gt;]*（*&nbsp;出现&nbsp;0&nbsp;次或多次）<br>合法：1s<br>合法：1s,4ms<br>&lt;time&gt;#（#&nbsp;出现一次或者多次，用,分隔）<br>合法：2s,&nbsp;4s<br>不合法：1s&nbsp;2s<br><br><br><br>4、@规则语法<br><br>@import&nbsp;&quot;subs.css&quot;;<br>@charset&nbsp;&quot;utf-8&quot;;<br>@media&nbsp;print&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;property:&nbsp;value&nbsp;*/<br>}<br>@keyframes&nbsp;fadein&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;property:&nbsp;value&nbsp;*/<br>}<br>@标示符&nbsp;内容;<br>@标示符&nbsp;内容{}<br>@规则<br><br>常用的规则<br>@media&nbsp;（用于响应式布局）<br>@keyframes&nbsp;（CSS&nbsp;动画的中间步骤）<br>@font-face&nbsp;（引入外部字体）<br><br>其他规则（不常用）<br>@import<br>@charset<br>@namespace<br>@page<br>@supports<br>@document","addLink":"","date":"2016-01-06 21:03","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"CSS选择器","classify":"css","addarticleContent":"选择器可被看做表达式，通过它可以选择相应的元素并应用不同的样式。<br>简单选择器<br>元素选择器<br>组合选择器<br>简单选择器<br><br>简单选择器可组合使用。<br><br><br>1、标签选择器<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;p&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>2、类选择器<br><br>.className&nbsp;以&nbsp;.&nbsp;开头，名称可包含字母，数字，-，_，但必须以字母开头。它区分大小写并可出现多次。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&nbsp;class=&quot;special&nbsp;bold&quot;&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;p&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;.special&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;orange;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;.bold&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;font-weight:&nbsp;bold;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>3、id&nbsp;选择器<br><br>#idName&nbsp;以&nbsp;#&nbsp;开头且只可出现一次，其命名要求于&nbsp;.className&nbsp;相同。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&nbsp;id=&quot;special&quot;&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;#special&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;red;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>4、通配符选择器<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;*&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>5、属性选择器<br><br>[attr]&nbsp;或&nbsp;[attr=val]&nbsp;来选择相应的元素。#nav{...}&nbsp;既等同于&nbsp;[id=nav]{...}。IE7+<br>[attr~=val]&nbsp;可选用与选择包含&nbsp;val&nbsp;属性值的元素，像class=&quot;title&nbsp;sports&quot;&nbsp;与&nbsp;class=&quot;sports&quot;。.sports{...}&nbsp;既等同于&nbsp;[class~=sports]{...}&nbsp;IE7+<br>[attr|=val]&nbsp;可以选择val开头及开头紧接-的属性值。IE7+<br>[attr^=val]&nbsp;可选择以val开头的属性值对应的元素，如果值为符号或空格则需要使用引号&nbsp;&quot;&quot;。IE7+<br>[attr$=val]&nbsp;可选择以val结尾的属性值对应的元素。IE7+<br>[attr*=val]&nbsp;可选择以包含val属性值对应的元素。IE7+<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;form&nbsp;action=&quot;&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;value=&quot;Xinyang&quot;&nbsp;disabled&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;password&quot;&nbsp;placeholder=&quot;Password&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;button&quot;&nbsp;value=&quot;Button&quot;&gt;<br>&nbsp;&nbsp;&lt;/form&gt;<br>&lt;/div&gt;<br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;[disabled]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color:&nbsp;orange;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;[type=button]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>6、伪类选择器<br><br>常用伪类选择器：<br>:link&nbsp;IE6+<br>:visited&nbsp;IE7+<br>:hover&nbsp;IE6中仅可用于链接<br>:active&nbsp;IE6/7中仅可用于链接<br>:enabled&nbsp;IE9+<br>:disabled&nbsp;IE9+<br>:checked&nbsp;IE9+<br>:first-child&nbsp;IE8+<br>:last-child&nbsp;IE9+<br>:nth-child(even)&nbsp;可为&nbsp;odd&nbsp;even&nbsp;或数字&nbsp;IE9+<br>:nth-last-child(n)&nbsp;n从&nbsp;0&nbsp;开始计算&nbsp;IE9+<br>:only-child&nbsp;仅选择唯一的元素&nbsp;IE9+<br>:only-of-type&nbsp;IE9+<br>:first-of-type&nbsp;IE9+<br>:last-of-type&nbsp;IE9+<br>:nth-of-type(even)&nbsp;IE9+<br>:nth-last-of-type(2n)&nbsp;IE9+<br><br>不常用伪类选择器：<br>:empty&nbsp;选中页面中无子元素的标签&nbsp;IE9+<br>:root&nbsp;选择&nbsp;HTML&nbsp;根标签&nbsp;IE9+<br>:not()&nbsp;参数为一般选择器&nbsp;IE9+<br>:target&nbsp;被锚点选中的目标元素&nbsp;IE9+<br>:lang()&nbsp;选中语言值为某类特殊值的元素&nbsp;IE7+<br><br>NOTE：element:nth-of-type(n)&nbsp;指父元素下第&nbsp;n&nbsp;个&nbsp;element&nbsp;元素，element:nth-child(n)&nbsp;指父元素下第&nbsp;n&nbsp;个元素且元素为&nbsp;element，若不是，选择失败。具体细节请在使用时查找文档。<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;a&nbsp;href=&quot;http://sample-site.com&quot;&nbsp;title=&quot;Sample&nbsp;Site&quot;&gt;Sample&nbsp;Site&lt;/a&gt;<br>&lt;/div&gt;<br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;/*&nbsp;伪类属性定义有顺序要求！&nbsp;*/<br>&nbsp;&nbsp;a:link&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;gray;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:visited&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:red;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:hover&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;green;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;鼠标悬停&nbsp;*/<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:active&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;orange;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;鼠标点击&nbsp;*/<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>7、其他选择器<br><br>伪元素选择器<br><br>注意与伪类学则器的区分。<br>::first-letter&nbsp;IE6+<br>::first-line&nbsp;IE6+<br>::before{content:&nbsp;&quot;before&quot;}&nbsp;需与&nbsp;content&nbsp;一同使用&nbsp;IE8+<br>::after{content:&nbsp;&quot;after&quot;}&nbsp;需与&nbsp;content&nbsp;一同使用&nbsp;IE8+<br>::selection&nbsp;被用户选中的内容（鼠标选择高亮属性）IE9+&nbsp;Firefox需用&nbsp;-moz&nbsp;前缀<br><br>组合选择器<br><br>后代选择器&nbsp;.main&nbsp;h2&nbsp;{...}，使用&nbsp;表示&nbsp;IE6+<br>子选择器&nbsp;.main&gt;h2&nbsp;{...}，使用&gt;表示&nbsp;IE7+<br>兄弟选择器&nbsp;h2+p&nbsp;{...}，使用+表示&nbsp;IE7+<br>h2~p&nbsp;{...}，使用~表示（此标签无需紧邻）IE7+<br><br>选择器分组<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>/*&nbsp;下面两组样式声明效果一致&nbsp;*/<br>h1&nbsp;{color:&nbsp;red;}<br>h2&nbsp;{color:&nbsp;red;}<br>h3&nbsp;{color:&nbsp;red;}<br><br>h1,&nbsp;h2,&nbsp;h3&nbsp;{color:&nbsp;red;}<br>&lt;/style&gt;<br><br><br>8、继承、优先、层级<br><br>9、继承<br><br>子元素继承父元素的样式，但并不是所有属性都是默认继承的。通过文档中的&nbsp;inherited:&nbsp;yes&nbsp;来判断属性是否可以自动继承。<br><br><br>自动继承属性：<br>color<br>font<br>text-align<br>list-style<br>...<br>非继承属性：<br>background<br>border<br>position<br>...<br><br><br>10、优先<br><br>CSS&nbsp;Specificity&nbsp;Calculator&nbsp;可以在这里找到。更多关于&nbsp;CSS&nbsp;优先级别的信息可以在这里找到（英文）。<br>计算方法：<br>a&nbsp;=&nbsp;行内样式<br>b&nbsp;=&nbsp;id&nbsp;选择器的数量<br>c&nbsp;=&nbsp;类、伪类的属性选择器的数量<br>d&nbsp;=&nbsp;标签选择器和伪元素选择器的数量<br><br>NOTE：从上到下优先级一次降低，且优先级高的样式会将优先级低的样式覆盖。大致公式（并不准确）如下。<br>value&nbsp;=&nbsp;a&nbsp;*&nbsp;1000&nbsp;+&nbsp;b&nbsp;*&nbsp;100&nbsp;+&nbsp;c&nbsp;*&nbsp;10&nbsp;+&nbsp;d<br><br>改变优先级<br><br>改变样式声明先后顺序<br>提升选择器优先级<br>!important（慎用）<br><br><br>11、层叠<br><br>层叠为相同属性根据优先级覆盖，如优先级相同则后面会覆盖前面的属性，而不同属性则会合并<br><br>","addLink":"","date":"2016-01-06 21:22","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"CSS样式---文本相关","classify":"css","addarticleContent":"1、字体<br><br>改变字号<br><br>font-size:&nbsp;&lt;absolute-size&gt;&nbsp;|&nbsp;&lt;relative-size&gt;&nbsp;|&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;inherit<br>&lt;absolute-size&gt;&nbsp;有&nbsp;small&nbsp;large&nbsp;medium<br>&lt;relative-size&gt;&nbsp;有&nbsp;smaller&nbsp;larger<br>div<br>&nbsp;&nbsp;font-size&nbsp;12px<br>&nbsp;&nbsp;p#sample0<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;16px<br>&nbsp;&nbsp;p#sample1<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;2em<br>&nbsp;&nbsp;p#sample2<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;200%<br><br>NOTE：以上两值在开发中并不常用。2em&nbsp;与&nbsp;200%&nbsp;都为父元素默认大小的两倍（参照物为父元素的字体大小&nbsp;12px）。<br><br>改变字体<br><br>font-family:&nbsp;[&nbsp;&lt;family-name&gt;&nbsp;|&nbsp;&lt;generic-family&gt;&nbsp;]#<br>&lt;generic-family&gt;&nbsp;可选选项，但具体使用字体由浏览器决定<br>serif<br>sans-serif<br>cursive<br>fantasy<br>monospace<br>font-family:&nbsp;arial,&nbsp;Verdana,&nbsp;sans-serif;<br><br>NOTE：优先使用靠前的字体<br><br>加粗字体<br><br>font-weight:&nbsp;normal&nbsp;|&nbsp;bold&nbsp;|&nbsp;bolder&nbsp;|&nbsp;lighter&nbsp;|&nbsp;100&nbsp;|&nbsp;200&nbsp;|&nbsp;300&nbsp;|&nbsp;400&nbsp;|&nbsp;500&nbsp;|&nbsp;600&nbsp;|&nbsp;700&nbsp;|&nbsp;800&nbsp;|&nbsp;900<br>font-weight:&nbsp;normal;<br>font-weight:&nbsp;bold;<br><br>倾斜字体<br><br>font-style:&nbsp;normal&nbsp;|&nbsp;italic&nbsp;|&nbsp;oblique&nbsp;|&nbsp;inherit<br>italic&nbsp;使用字体中的斜体，而&nbsp;oblique&nbsp;在没有斜体字体时强制倾斜字体。<br><br>更改行距<br><br>line-height:&nbsp;normal&nbsp;|&nbsp;&lt;number&gt;&nbsp;|&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;<br>normal&nbsp;值为浏览器决定，在1.1至1.2之间（通常设置值为1.14左右）<br>/*&nbsp;length&nbsp;类型&nbsp;*/<br>line-height:&nbsp;40px;<br>line-height:&nbsp;3em;<br>/*&nbsp;percentage&nbsp;类型&nbsp;*/<br>line-height:&nbsp;300%;<br>/*&nbsp;number&nbsp;类型&nbsp;*/<br>line-height:&nbsp;3;<br><br>NOTE：当line-height为&nbsp;number&nbsp;类型时，子类直接继承其数值（不计算直接继承）。&nbsp;而当为&nbsp;percentage&nbsp;类型时，子类则会先计算再显示（先计算后继承）。<br><br>字间距（字母间距）<br><br>letter-spacing:&nbsp;normal&nbsp;|&nbsp;&lt;length&gt;<br>其用于设置字间距或者字母间距，此属性适用于中文或西文中的字母。&nbsp;如果需要设置西文中词与词的间距或标签直接的距离则需要使用&nbsp;word-spacing。<br>word-spacing:&nbsp;normal&nbsp;|&nbsp;&lt;length&gt;<br>font&nbsp;shorthand<br><br>font:&nbsp;[&nbsp;[&nbsp;&lt;‘font-style’&gt;&nbsp;||&nbsp;&lt;font-variant-css21&gt;&nbsp;||&nbsp;&lt;‘font-weight’&gt;&nbsp;||&nbsp;&lt;‘font-stretch’&gt;&nbsp;]?&nbsp;&lt;‘font-size’&gt;&nbsp;[&nbsp;/&nbsp;&lt;‘line-height’&gt;&nbsp;]?&nbsp;&lt;‘font-family’&gt;&nbsp;]&nbsp;|&nbsp;caption&nbsp;|&nbsp;icon&nbsp;|&nbsp;menu&nbsp;|&nbsp;message-box&nbsp;|&nbsp;small-caption&nbsp;|&nbsp;status-bar<br>font:&nbsp;30px/2&nbsp;&quot;Consolas&quot;,&nbsp;monospace;<br>font:&nbsp;italic&nbsp;bold&nbsp;20px/1.5&nbsp;arial,&nbsp;serif;<br>font:&nbsp;20px&nbsp;arial,&nbsp;serif;<br><br>NOTE：当其他值为空时，均被设置为默认值。<br><br>改变文字颜色<br><br>color:&nbsp;&lt;color&gt;<br>element&nbsp;{&nbsp;color:&nbsp;red;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;#f00;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;#ff0000;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgb(255,0,0);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgb(100%,&nbsp;0%,&nbsp;0%);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;hsl(0,&nbsp;100%,&nbsp;50%);&nbsp;}<br><br>/*&nbsp;50%&nbsp;translucent&nbsp;*/<br>element&nbsp;{&nbsp;color:&nbsp;rgba(255,&nbsp;0,&nbsp;0,&nbsp;0.5);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;hsla(0,&nbsp;100%,&nbsp;50%,&nbsp;0.5);&nbsp;}<br><br>/*&nbsp;全透明&nbsp;*/<br>element&nbsp;{&nbsp;color:&nbsp;transparent&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgba(0,&nbsp;0,&nbsp;0,&nbsp;0);&nbsp;}<br><br><br><br>2、对齐方式<br><br>文字居中<br><br>text-align:&nbsp;start&nbsp;|&nbsp;end&nbsp;|&nbsp;left&nbsp;|&nbsp;right&nbsp;|&nbsp;center&nbsp;|&nbsp;justify&nbsp;|&nbsp;match-parent&nbsp;|&nbsp;start&nbsp;end<br><br>NOTE：默认为文本左对齐。<br><br>文本垂直对齐<br><br>vertical-align:&nbsp;baseline&nbsp;|&nbsp;sub&nbsp;|&nbsp;super&nbsp;|&nbsp;text-top&nbsp;|&nbsp;text-bottom&nbsp;|&nbsp;middle&nbsp;|&nbsp;top&nbsp;|&nbsp;bottom&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;&lt;length&gt;<br>NOTE：&lt;percentage&gt;的参照物为line-height<br><br>文本缩进<br><br>text-indent:&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;&&&nbsp;[&nbsp;hanging&nbsp;||&nbsp;each-line&nbsp;]<br>NOTE：缩进两个字可使用&nbsp;text-indent:&nbsp;2em;<br><br><br><br>3、格式处理<br><br>保留空格格式<br><br>white-space:&nbsp;normal&nbsp;|&nbsp;pre&nbsp;|&nbsp;nowrap&nbsp;|&nbsp;pre-wrap&nbsp;|&nbsp;pre-line<br>pre&nbsp;行为同&nbsp;&lt;pre&gt;&nbsp;一致。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;New&nbsp;lines&nbsp;&nbsp;Spaces&nbsp;and&nbsp;tabs&nbsp;&nbsp;Text&nbsp;wrapping<br>normal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>nowrap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No&nbsp;wrap<br>pre&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No&nbsp;wrap<br>pre-wrap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>pre-line&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>文字换行<br><br>word-wrap:&nbsp;normal&nbsp;|&nbsp;break-word<br><br>NOTE：允许长单词自动换行。<br><br>word-break:&nbsp;normal&nbsp;|&nbsp;break-all&nbsp;|&nbsp;keep-all<br><br>NOTE：break-all&nbsp;单词中的任意字母间都可以换行。<br><br><br><br>4、文本装饰<br><br>文字阴影<br><br>text-shadow:none&nbsp;|&nbsp;&lt;shadow-t&gt;#&nbsp;或&nbsp;text-shadow:none&nbsp;|&nbsp;[&lt;length&gt;{2,3}&&&lt;color&gt;?]#<br>p&nbsp;{<br>&nbsp;&nbsp;text-shadow:&nbsp;1px&nbsp;1px&nbsp;1px&nbsp;#000,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3px&nbsp;3px&nbsp;5px&nbsp;blue;<br>}<br>value&nbsp;=&nbsp;The&nbsp;X-coordinate&nbsp;X&nbsp;轴偏移像素<br>value&nbsp;=&nbsp;The&nbsp;Y-coordinate&nbsp;Y&nbsp;轴偏移像素<br>value&nbsp;=&nbsp;The&nbsp;blur&nbsp;radius&nbsp;阴影模糊半径<br>value&nbsp;=&nbsp;The&nbsp;color&nbsp;of&nbsp;the&nbsp;shadow&nbsp;阴影颜色（默认为文字颜色）<br><br>文本装饰（下划线等）<br><br>text-decoration:&nbsp;&lt;text-decoration-line&gt;&nbsp;||&nbsp;&lt;text-decoration-style&gt;&nbsp;||&nbsp;&lt;text-decoration-color&gt;<br>h1.under&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;underline;<br>}<br>h1.over&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;overline;<br>}<br>p.line&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;line-through;<br>}<br>p.blink&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;blink;<br>}<br>a.none&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;none;<br>}<br>p.underover&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;underline&nbsp;overline;<br>}<br><br><br><br>5、高级设置<br><br>省略字符<br><br>text-overflow:&nbsp;[&nbsp;clip&nbsp;|&nbsp;ellipsis&nbsp;|&nbsp;&lt;string&gt;&nbsp;]{1,2}<br>/*&nbsp;常用配合&nbsp;*/<br>text-overflow:&nbsp;ellipsis;<br>overflow:&nbsp;hidden;&nbsp;/*&nbsp;溢出截取&nbsp;*/<br>white-space:&nbsp;nowrap;&nbsp;/*&nbsp;禁止换行&nbsp;*/<br><br>更换鼠标形状<br><br>cursor:&nbsp;[[&lt;funciri&gt;,]*&nbsp;[&nbsp;auto&nbsp;|&nbsp;crosshair&nbsp;|&nbsp;default&nbsp;|&nbsp;pointer&nbsp;|&nbsp;move&nbsp;|&nbsp;e-resize&nbsp;|&nbsp;ne-resize&nbsp;|&nbsp;nw-resize&nbsp;|&nbsp;n-resize&nbsp;|&nbsp;se-resize&nbsp;|&nbsp;sw-resize&nbsp;|&nbsp;s-resize&nbsp;|&nbsp;w-resize|&nbsp;text&nbsp;|&nbsp;wait&nbsp;|&nbsp;help&nbsp;]]&nbsp;|&nbsp;inherit<br><br>常用属性<br><br>cursor:&nbsp;[&lt;uri&gt;,]*[auto&nbsp;|&nbsp;default&nbsp;|&nbsp;none&nbsp;|&nbsp;help&nbsp;|&nbsp;pointer&nbsp;|&nbsp;zoom-in&nbsp;|&nbsp;zoom-out&nbsp;|&nbsp;move]<br>&lt;uri&gt;&nbsp;图片资源地址代替鼠标默认形状<br>&lt;default&gt;&nbsp;默认光标<br>&lt;none&gt;&nbsp;隐藏光标<br>&lt;pointer&gt;&nbsp;手型光标<br>&lt;zoom-in&gt;<br>&lt;zoom-out&gt;<br>&lt;move&gt;<br>cursor:&nbsp;pointer;<br>cursor:&nbsp;url(image-name.cur),&nbsp;pointer;<br>/*&nbsp;当&nbsp;uri&nbsp;失效时或者则会起作用&nbsp;*/<br><br>强制继承<br><br>inherit&nbsp;会强制继承父元素的属性值。<br>font-size:&nbsp;inherit;<br>font-family:&nbsp;inherit;<br>font-weight:&nbsp;inherit;<br>...<br>word-wrap:&nbsp;inherit;<br>work-break:&nbsp;inherit<br>text-showdow:&nbsp;inherit<br><br>NOTE：具体在使用时可查询文档","addLink":"","date":"2016-01-07 10:30","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2}],"javascript":[{"addArticleTtitle":"JavaScript 介绍","classify":"javascript","addarticleContent":"前端开发三要素，HTML（描述网页内容），CSS（描述样式），JavaScript（控制网页行为）。JavaScript&nbsp;为解释型编程语（程序不需要编译，程序在运行时才翻译成机器语言，每执&nbsp;行一次都要翻译一次)，运行环境也很广泛（浏览器或操作系统中&nbsp;NodeJS）。<br>JavaScript&nbsp;又分为两部分，ECMAScript&nbsp;和&nbsp;DOM。其中&nbsp;JavaScript&nbsp;的基本的语言属性（例如，变量，作用域等）都在&nbsp;ECMAScript&nbsp;中有详细的定义好比汉子在字典中的定义。DOM&nbsp;中则定义如何修改文档结构（HTML&nbsp;或&nbsp;XML&nbsp;等）。<br>JavaScript的引入方法如下：<br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;title&gt;Demo&nbsp;Page&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;以上代码忽略&nbsp;--&gt;<br><br>&nbsp;&nbsp;&lt;!--&nbsp;为性能优化需将&nbsp;javascript&nbsp;代码放置在&nbsp;body&nbsp;标签的最末端&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;外联文件&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;src=&quot;/javascripts/application.js&quot;&nbsp;type=&quot;text/javascript&quot;&nbsp;charset=&quot;utf-8&quot;&nbsp;async&nbsp;defer&gt;&lt;/script&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;内嵌代码&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;document.write(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"","date":"2016-01-06 22:54","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"基础语法","classify":"javascript","addarticleContent":"1、变量标示符<br><br>变量的命名<br><br>var&nbsp;_name&nbsp;=&nbsp;null;<br>var&nbsp;$name&nbsp;=&nbsp;null;<br>var&nbsp;name0&nbsp;=&nbsp;null;<br><br><br><br>2、关键字与保留字<br><br>JavaScript&nbsp;在语言定义中保留的字段，这些字段在语言使用中存在特殊意义或功能，在程序编写的过程中不可以当做变量或函数名称使用。无需记忆，报错修改即可。<br>关键字与保留字可以在&nbsp;Mozilla&nbsp;开发者站点找到。<br><br><br><br>3、字符敏感<br><br>字符串的大小写是有所区分的，不同字符指代不同的变量。<br><br><br><br>4、严格模式<br><br>增益<br><br>消除语法中不合理与不安全的问题，保证代码正常运行<br>提高编译效率，增加运行速度<br><br>使用方法<br><br>&lt;!--&nbsp;全局使用&nbsp;严格&nbsp;模式&nbsp;--&gt;<br>&quot;use&nbsp;strict&quot;;<br>(function(){<br>&nbsp;&nbsp;console.log(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>})()<br><br>&lt;!--&nbsp;或者在函数内部声明使用&nbsp;严格&nbsp;模式&nbsp;--&gt;<br>(function(){<br>&nbsp;&nbsp;&quot;use&nbsp;strict&quot;;<br>&nbsp;&nbsp;console.log(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>})()<br><br>严格模式与标准模式的区别：<br><br>严格模式下隐式声明或定义变量被静止<br>严格模式下对象重名的属性在严格模式下被静止<br>严格模式下&nbsp;arguments.callee()&nbsp;被禁用<br>严格模式下&nbsp;with()&nbsp;语句<br>更多限制<br><br><br><br>5、注释<br><br>/*<br>&nbsp;&nbsp;多行注释，不可嵌套<br>&nbsp;*/<br><br>//&nbsp;单行注释","addLink":"","date":"2016-01-07 11:23","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"类型","classify":"javascript","addarticleContent":"1、javascript&nbsp;类型系统可以分为标准类型和对象类型，进一步标准类型又可以分为原始类型和引用类型，而对象类型又可以分为内置对象类型、普通对象类型、自定义对象类型。<br><br><br><br>2、标准类型<br><br>标准类型共包括了6个分别是：<br>原始类型（值类型）：<br>Undefined&nbsp;undefined<br>Null&nbsp;null<br>Boolean&nbsp;true<br>String&nbsp;&quot;hello&quot;<br>Number&nbsp;123<br><br><br><br>3、引用类型（对象类型）：<br><br>Object<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>&lt;!--&nbsp;原始类型变量的包装类型如下&nbsp;--&gt;<br>var&nbsp;bool&nbsp;=&nbsp;new&nbsp;Boolean(true);<br>var&nbsp;str&nbsp;=&nbsp;new&nbsp;String(&quot;hello&quot;);<br>var&nbsp;num&nbsp;=&nbsp;new&nbsp;Number(1);<br>var&nbsp;obj0&nbsp;=&nbsp;new&nbsp;Object();<br><br><br><br>4、原始类型和引用类型的区别：<br><br>原始类型储存在栈（Stack）中储存变量的值，而引用类型在栈中保存的是所引用内容储存在堆（Heap）中的值。类似于指针的概念，引用类型并非储存变量真实数值而是地址，所以对已引用类型的复制其实只是复制了相同的地址而非实际的变量值。<br><br>Undefined&nbsp;值：undefined&nbsp;出现场景：<br><br>以声明为赋值的变量&nbsp;var&nbsp;obj;<br>获取对象不存在的属性&nbsp;var&nbsp;obj&nbsp;=&nbsp;{x:&nbsp;0};&nbsp;obj.y;<br>无返回值函数的执行结果&nbsp;function&nbsp;f(){};&nbsp;var&nbsp;obj&nbsp;=&nbsp;f();<br>函数参数没有传入&nbsp;function&nbsp;f(i){console.log(i)};&nbsp;f();<br>void(expression)<br><br>Null&nbsp;值：null&nbsp;出现场景：<br><br>获取不存在的对象&nbsp;document.getElementById(&quot;not-exist-element&quot;)<br><br>Boolean&nbsp;值：true,&nbsp;false&nbsp;出现场景：<br><br>条件语句导致的系统执行的隐式类型转换&nbsp;if(隐式转换){}<br>字面量或变量定义&nbsp;var&nbsp;bool&nbsp;=&nbsp;true;<br><br>String&nbsp;值：字符串&nbsp;出现场景：<br><br>var&nbsp;str&nbsp;=&nbsp;&quot;Hello,&nbsp;world!&quot;;<br><br>Number&nbsp;值：整型直接量，八进制直接量（0-），十六进制直接量（0x-)，浮点型直接量&nbsp;出现场景：<br><br>1026<br>3.14<br>1.2e5<br>0x10<br><br>Object&nbsp;值：属性集合&nbsp;出现场景：<br><br>var&nbsp;obj&nbsp;=&nbsp;{name:&nbsp;&quot;Xinyang&quot;};<br><br><br><br>5、变量转换表<br><br>Value&nbsp;&nbsp;Boolean&nbsp;&nbsp;Number&nbsp;&nbsp;String<br>undefined&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;undefined&quot;<br>null&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;null&quot;<br>true&nbsp;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;1&nbsp;&nbsp;&quot;true&quot;<br>false&nbsp;&nbsp;f&nbsp;alse&nbsp;&nbsp;0&nbsp;&nbsp;&quot;false&quot;<br>&quot;&quot;&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;&quot;<br>&quot;123&quot;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;123&nbsp;&nbsp;&quot;123&quot;<br>&quot;1a&quot;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;1a&quot;<br>0&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;0&quot;<br>1&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;1&nbsp;&nbsp;&quot;1&quot;<br>Infinity&nbsp;&nbsp;true&nbsp;&nbsp;Infinity&nbsp;&nbsp;&quot;Infinity&quot;<br>NaN&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;NaN&quot;<br>{}&nbsp;&nbsp;true&nbsp;&nbsp;NaN&nbsp;&nbsp;&nbsp;&nbsp;&quot;[object&nbsp;Object]&quot;<br><br><br><br>6、类型识别<br><br>typeof<br>Object.prototype.toString<br>constructor<br>instanceof<br><br>typeof：<br>可以是标准类型（Null&nbsp;除外）<br>不可识别具体的对象类型（Function&nbsp;除外）<br>Object.prototype.toString：<br>可是识别标准类型及内置对象类型（例如，Object,&nbsp;Date,&nbsp;Array）<br>不能识别自定义对象类型<br><br>constructor：<br>可以识别标准类型（Undefined/Null&nbsp;除外）<br>可识别内置对象类型<br>可识别自定义对象类型<br>function&nbsp;getConstructiorName(obj)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;obj&nbsp;&&&nbsp;obj.constructor&nbsp;&&&nbsp;obj.constructor.toString().match(/function&#92;s*([^(]*)/)[1];<br>}<br>getConstructiorName([])&nbsp;===&nbsp;&quot;Array&quot;;&nbsp;//&nbsp;true<br><br>instanceof：<br>不可判别原始类型<br>可判别内置对象类型<br>可判别自定义对象类型<br>","addLink":"","date":"2016-01-07 11:34","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"类型识别","classify":"javascript","addarticleContent":"1、类型识别<br><br>typeof<br>Object.prototype.toString<br>constructor<br>instanceof<br><br>2、typeof：<br>可以是标准类型（Null&nbsp;除外）<br>不可识别具体的对象类型（Function&nbsp;除外）<br>Object.prototype.toString：<br>可是识别标准类型及内置对象类型（例如，Object,&nbsp;Date,&nbsp;Array）<br>不能识别自定义对象类型<br><br>3、constructor：<br>可以识别标准类型（Undefined/Null&nbsp;除外）<br>可识别内置对象类型<br>可识别自定义对象类型<br><br>4、function&nbsp;getConstructiorName(obj)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;obj&nbsp;&&&nbsp;obj.constructor&nbsp;&&&nbsp;obj.constructor.toString().match(/function&#92;s*([^(]*)/)[1];<br>}<br>getConstructiorName([])&nbsp;===&nbsp;&quot;Array&quot;;&nbsp;//&nbsp;true<br><br>5、instanceof：<br>不可判别原始类型<br>可判别内置对象类型<br>可判别自定义对象类型<br>JavaScript的数据类型可以分为：标准类型和对象类型。<br>标准类型有：undefined&nbsp;Null&nbsp;Boolean&nbsp;Date&nbsp;Number&nbsp;Object<br>对象类型（构造器类型）：Boolean&nbsp;Date&nbsp;Number&nbsp;Object&nbsp;Array&nbsp;Date&nbsp;Error&nbsp;Function&nbsp;RegExp<br><br>6、用来判断数据类型的一般有四种方式，分别是：<br>typeof<br>Prototype.toString()<br>constructor<br>instanceof<br><br>7、下面我们写一个HTML来检验一下：<br><br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;JavaScript类型判断&lt;/title&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.red{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color:red;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Standard&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;a;&nbsp;&nbsp;&nbsp;&nbsp;//undefined<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;b&nbsp;=&nbsp;document.getElementById(&quot;no_exist_element&quot;);&nbsp;//null<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;c&nbsp;=&nbsp;true;&nbsp;&nbsp;&nbsp;&nbsp;//Boolean<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;d&nbsp;=&nbsp;1;&nbsp;&nbsp;&nbsp;&nbsp;//Number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;&quot;str&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//String<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;f&nbsp;=&nbsp;{name&nbsp;:&nbsp;&quot;Tom&quot;};&nbsp;&nbsp;&nbsp;&nbsp;//Object<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Object&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;g&nbsp;=&nbsp;new&nbsp;Boolean(true);&nbsp;&nbsp;&nbsp;&nbsp;//Boolean&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;h&nbsp;=&nbsp;new&nbsp;Number(1);&nbsp;&nbsp;&nbsp;&nbsp;//Number&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;i&nbsp;=&nbsp;new&nbsp;String(&quot;str&quot;);&nbsp;&nbsp;&nbsp;&nbsp;//String&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;j&nbsp;=&nbsp;new&nbsp;Object({name&nbsp;:&nbsp;&quot;Tom&quot;});&nbsp;//Object&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;k&nbsp;=&nbsp;new&nbsp;Array([1,&nbsp;2,&nbsp;3,&nbsp;4]);&nbsp;&nbsp;&nbsp;&nbsp;//Array&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;l&nbsp;=&nbsp;new&nbsp;Date();&nbsp;&nbsp;&nbsp;&nbsp;//Date&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;m&nbsp;=&nbsp;new&nbsp;Error();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;n&nbsp;=&nbsp;new&nbsp;Function();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;o&nbsp;=&nbsp;new&nbsp;RegExp(&quot;&#92;&#92;d&quot;);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Self-Defined&nbsp;Object&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Use&nbsp;the&nbsp;Prototype.toString()&nbsp;to&nbsp;judge&nbsp;the&nbsp;type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;type(obj){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Object.prototype.toString.call(obj).slice(8,&nbsp;-1).toLowerCase();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&nbsp;border=&quot;1&quot;&nbsp;cellspacing=&quot;0&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;typeof&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;toString&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;constructor&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;instanceof&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;undefined&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;a)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(a))&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(a.constructor)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(a&nbsp;instanceof&nbsp;&quot;undefined&quot;)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Null&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;b);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(b));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(b.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(b&nbsp;instanceof&nbsp;&quot;null&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Boolean&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;c);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(c));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(c.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(c&nbsp;instanceof&nbsp;&quot;boolean&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Number&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;d);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(d));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(d.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(d&nbsp;instanceof&nbsp;&quot;number&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;String&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;e);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(e));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(e.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(e&nbsp;instanceof&nbsp;&quot;string&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;f);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(f));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(f.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(f&nbsp;instanceof&nbsp;&quot;object&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&lt;td&nbsp;colspan=&quot;5&quot;&gt;-----------------------&lt;/td&gt;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Boolean&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;g);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(g));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(g.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(g&nbsp;instanceof&nbsp;Boolean);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Number&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;h);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(h));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(h.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(h&nbsp;instanceof&nbsp;Number);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;String&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;i);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(i));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(i.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(i&nbsp;instanceof&nbsp;String);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Object&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;j);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(j));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(j.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(j&nbsp;instanceof&nbsp;Object);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Array&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;k);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(k));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(k.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(k&nbsp;instanceof&nbsp;Array);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Date&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;l);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(l));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(l.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(l&nbsp;instanceof&nbsp;Date);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Error&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;m);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(m));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(m.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(m&nbsp;instanceof&nbsp;Error);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Function&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;n);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(n));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(n.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(n&nbsp;instanceof&nbsp;Function);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;RegExp&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;o);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(o));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(o.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(o&nbsp;instanceof&nbsp;RegExp);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&lt;td&nbsp;colspan=&quot;5&quot;&gt;-----------------------&lt;/td&gt;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Point&nbsp;Objct&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;p);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(p));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(p.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(p&nbsp;instanceof&nbsp;Point);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>","addLink":"","date":"2016-01-07 12:32","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"内置对象","classify":"javascript","addarticleContent":"通常情况下只有对象才存在方法，但&nbsp;JavaScript&nbsp;不同它具有12种内置对象。内置对象又分为两类，普通对象（属性和方法）与构造器对象（可用于实例化普通对象，它还包含原型对象属性和方法，及实例对象属性和方法）。<br><br>1、JavaScript&nbsp;对象原型链的简要说明<br><br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>p.move(2,2);<br><br>__proto__&nbsp;称之为原型链，有如下特点：<br>__proto__&nbsp;为对象内部的隐藏属性<br>__proto__&nbsp;为实例化该对象的构造器的&nbsp;prototype&nbsp;对象的引用，因此可以直接方法&nbsp;prototype&nbsp;的所有属性和方法<br>除了&nbsp;Object&nbsp;每个对象都有一个&nbsp;__proto__&nbsp;属性且逐级增长形成一个链，原型链顶端是一个&nbsp;Object&nbsp;对象。<br>在调用属性或方法时，引擎会查找自身的属性如果没有则会继续沿着原型链逐级向上查找，直到找到该方法并调用。<br>__proto__&nbsp;跟浏览器引擎实现相关，不同的引擎中名字和实现不尽相同(chrome、firefox中名称是&nbsp;__proto__&nbsp;，并且可以被访问到，IE中无法访问)。基于代码兼容性、可读性等方面的考虑，不建议开发者显式访问&nbsp;__proto__&nbsp;属性或通过&nbsp;__proto__更改原型链上的属性和方法，可以通过更改构造器prototype&nbsp;对象来更改对象的&nbsp;__proto__&nbsp;属性。<br><br><br><br>2、构造器对象与普通对象的区别<br><br>1、构造器对象原型链中的&nbsp;__proto__&nbsp;是一个&nbsp;Function.prototype&nbsp;对象的引用，因此可以调用&nbsp;Function.prototype的属性及方法<br>2、构造器对象本身有一个&nbsp;prototype&nbsp;属性，用该构造器实例化对象时该&nbsp;prototype&nbsp;会被实例对象的&nbsp;__proto__&nbsp;所引用<br>3、构造器对象本身是一个&nbsp;function&nbsp;对象，因此也会有自身属性<br><br><br><br>3、标准内置对象<br><br>构造器对象<br>Object<br>Boolean<br>String<br>Number<br>Function<br>Array<br>RegExp<br>Date<br>Error<br><br>其他对象<br><br>Math<br>JSON<br><br>全局对象<br><br>内置对象，其实也叫内置构造器，它们可以通过&nbsp;new&nbsp;的方式创建一个新的实例对象。内置对象所属的类型就叫内置对象类型。其声明方式如下：<br>var&nbsp;i&nbsp;=&nbsp;new&nbsp;String(&quot;str&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;String&nbsp;Object<br>var&nbsp;h&nbsp;=&nbsp;new&nbsp;Number(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Number&nbsp;Object<br>var&nbsp;g&nbsp;=&nbsp;new&nbsp;Boolean(true);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Boolean&nbsp;Object<br>var&nbsp;j&nbsp;=&nbsp;new&nbsp;Object({name&nbsp;:&nbsp;&quot;Tom&quot;});&nbsp;//&nbsp;Object&nbsp;Object<br>var&nbsp;k&nbsp;=&nbsp;new&nbsp;Array([1,&nbsp;2,&nbsp;3,&nbsp;4]);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Array&nbsp;Object<br>var&nbsp;l&nbsp;=&nbsp;new&nbsp;Date();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Date&nbsp;Object<br>var&nbsp;m&nbsp;=&nbsp;new&nbsp;Error();<br>var&nbsp;n&nbsp;=&nbsp;new&nbsp;Function();<br>var&nbsp;o&nbsp;=&nbsp;new&nbsp;RegExp(&quot;&#92;&#92;d&quot;);<br><br>注意：虽然标准类型中有Boolean&nbsp;String&nbsp;Number&nbsp;Object，内置对象类型中也有Boolean&nbsp;String&nbsp;Number&nbsp;Object，但它们其实是通过不同的声明方式来进行区别的。标准类型通过直接赋值，而对象类型则是通过构造器实现初始化。<br><br><br><br>4、Object<br><br>构造器的原型对象在对象实例化时将会被添加到实例对象的原型链当中。&nbsp;__proto__&nbsp;为原型链属性，编码时不可被显像调用。但是实例化对象可以调用原型链上的方法。<br>用&nbsp;String/Number&nbsp;等构造器创建的对象原型链顶端对象始终是一个Object对象，因此这些对象可以调用Object的原型对象属性和方法。所以&nbsp;String/Number&nbsp;等构造器是&nbsp;Object&nbsp;的子类。<br>更多关于&nbsp;Object&nbsp;的内容可以在这里找到。<br><br>构造器说明：<br>Object&nbsp;是属性和方法的集合<br>String/Number/Boolean/Array/Date/Error&nbsp;构造器均为&nbsp;Object&nbsp;的子类并集成&nbsp;Object&nbsp;原型对象的属性及方法。<br>实例化方法<br>var&nbsp;obj0&nbsp;=&nbsp;new&nbsp;Object({name:&nbsp;&quot;X&quot;,&nbsp;age:&nbsp;13});<br>//&nbsp;常用方法<br>var&nbsp;obj1&nbsp;=&nbsp;{name:&nbsp;&quot;Q&quot;,&nbsp;age:&nbsp;14};<br>属性及方法<br>prototype<br>create<br>keys<br>...<br>**原型对象属性及其方法<br>constructor<br>toString<br>valueOf<br>hasOwnProperty<br>...<br>实例对象属性及方法<br>无<br><br>Object.create<br><br>功能：基于原型对象创造新对象<br>//&nbsp;Object.create(prototype[,&nbsp;propertiesObject])<br>var&nbsp;prototype&nbsp;=&nbsp;{name:&nbsp;&quot;X&quot;,&nbsp;age:&nbsp;13};<br>var&nbsp;obj&nbsp;=&nbsp;Object.create(proto);<br>Object.prototype.toString<br><br>功能：获取方法调用者的标准类型<br>//&nbsp;objectInstance.toString()<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>obj.toString();&nbsp;//&nbsp;Object<br>Object.prototype.hasOwnProperty<br><br>功能：判断一个属性是否是一个对象的自身属性<br>//&nbsp;objectInstance.hasOwnProperty(&quot;propertyName&quot;)<br>var&nbsp;obj&nbsp;=&nbsp;Object.create({a:&nbsp;1,&nbsp;b:&nbsp;2});<br>obj.c&nbsp;=&nbsp;3;<br>obj.hasOwnProperty(&quot;a&quot;);&nbsp;//&nbsp;false<br>obj.hasOwnProperty(&quot;c&quot;);&nbsp;//&nbsp;true<br>Boolean<br><br>构造器说明：值为&nbsp;true&nbsp;与&nbsp;false<br>属性及方法<br>prototype<br>**原型对象属性及其方法<br>constructor,&nbsp;toString,&nbsp;valueOf<br>String<br><br>构造器说明：单双引号内的字符串<br>实例化方法<br>&quot;Hello,&nbsp;world!&quot;<br>var&nbsp;str0&nbsp;=&nbsp;&quot;Xinyang&quot;;<br>var&nbsp;str1&nbsp;=&nbsp;new&nbsp;String(&quot;Xinyang&quot;);<br>属性及方法<br>prototype<br>fromCharCode（转换&nbsp;ASCII&nbsp;代码为字符）<br>原型对象属性及其方法<br>constructor<br>indexOf<br>replace<br>slice<br>split<br>charCodeAt<br>toLowerCase<br>...<br>String.prototype.indexOf<br><br>功能：获取子字符串在字符串中的索引<br>//&nbsp;stringObject.indexOf(searchValue,&nbsp;fromIndex)<br>var&nbsp;str&nbsp;=&nbsp;&quot;I&nbsp;am&nbsp;X.&nbsp;From&nbsp;China!&quot;;<br>var&nbsp;index&nbsp;=&nbsp;str.indexOf(&quot;a&quot;);&nbsp;//&nbsp;2<br>str.indexOf(&quot;a&quot;,&nbsp;index&nbsp;+&nbsp;1);&nbsp;//&nbsp;16<br>str.indexOf(&quot;Stupid&quot;);&nbsp;//&nbsp;-1&nbsp;字符串不存在<br>String.prototype.replace<br><br>功能：查找字符串替换成目标文字<br>//&nbsp;stringObject.replace(regexp/substr,&nbsp;replacement)<br>var&nbsp;str&nbsp;=&nbsp;&quot;apple&nbsp;is&nbsp;bad&quot;;<br>str&nbsp;=&nbsp;str.replace(&quot;bad&quot;,&nbsp;&quot;awesome&quot;);<br>String.prototype.split<br><br>功能：按分隔符将分隔符分成字符串数组<br>//&nbsp;stringObject.split(separator,&nbsp;arrayLength)<br>var&nbsp;str&nbsp;=&nbsp;&quot;1&nbsp;2&nbsp;3&nbsp;4&quot;;<br>str.split(&quot;&nbsp;&quot;);&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;];<br>str.split(&quot;&nbsp;&quot;,&nbsp;3);&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;];<br>str.split(/&#92;d+/);&nbsp;//&nbsp;[&quot;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&quot;]<br>Number<br><br>构造器说明：整型直接量，八进制直接量（0-），十六进制直接量（0x-)，浮点型直接量<br>实例化方法<br>10<br>1.2e5<br>var&nbsp;count&nbsp;=&nbsp;0x10;<br>var&nbsp;pi&nbsp;=&nbsp;new&nbsp;Number(3.1415);<br>属性及方法<br>prototype<br>MAX_VALUE<br>MIN_VALUE<br>NaN<br>NEGATIVE_INFINITY<br>POSITIVE_INFINITY<br>原型对象属性及其方法<br>constructor<br>toFixed<br>toExponential<br>...<br>Number.prototype.toFixed<br><br>功能：四舍五入至指定小数位<br>//&nbsp;numberObject.toFixed(num)<br>var&nbsp;num0&nbsp;=&nbsp;3.14;<br>num0.toFixed(1);&nbsp;//&nbsp;3.1<br>var&nbsp;num1&nbsp;=&nbsp;3.35;<br>num1.toFixed(1);&nbsp;//&nbsp;3.4<br>Array<br><br>构造器说明：定义数组对象<br>实例化方法<br>var&nbsp;a0&nbsp;=&nbsp;[1,&nbsp;&quot;abc&quot;,&nbsp;true,&nbsp;function(){}];<br>var&nbsp;a1&nbsp;=&nbsp;new&nbsp;Array();<br>var&nbsp;a2&nbsp;=&nbsp;new&nbsp;Array(1,&nbsp;&quot;abc&quot;,&nbsp;true);<br>属性及方法<br>prototype<br>isArray<br>原型对象属性及其方法<br>constructor<br>splice<br>forEach<br>find<br>concat<br>pop<br>push<br>reverse<br>shift<br>slice<br>...<br>Array.prototype.splice<br><br>功能：从数组中删除或添加元素，返回被删除的元素列表（作用域原有数组）<br>//&nbsp;arrayObject.splice(start,&nbsp;deleteCount[,&nbsp;item1[,&nbsp;item2[,&nbsp;...]]])<br>var&nbsp;arr&nbsp;=&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;a&quot;,&nbsp;&quot;b&quot;,&nbsp;&quot;6&quot;];<br>var&nbsp;ret&nbsp;=&nbsp;arr.splice(2,&nbsp;2,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;,&nbsp;&quot;5&quot;);&nbsp;//&nbsp;[&quot;a&quot;,&nbsp;&quot;b&quot;]<br>arr;&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;,&nbsp;5&quot;,&nbsp;&quot;6&quot;]<br>Array.prototype.forEach<br><br>功能：遍历元素组并调用回调函数<br>//&nbsp;arrayObject.forEach(callback[,&nbsp;thisArg])<br>//&nbsp;回调函数<br>//&nbsp;function&nbsp;callback(value,&nbsp;index,&nbsp;arrayObject)&nbsp;{...}<br>//&nbsp;value&nbsp;-&nbsp;当前值&nbsp;index&nbsp;-&nbsp;当前索引&nbsp;arrayObject&nbsp;-&nbsp;数组本身<br>function&nbsp;logArray(value,&nbsp;index,&nbsp;arrayObject)&nbsp;{<br>&nbsp;&nbsp;console.log(value);<br>&nbsp;&nbsp;console.log(value&nbsp;===&nbsp;array[index]);<br>}<br>[2,&nbsp;5,&nbsp;6,&nbsp;9].forEach(logArray);<br>Function<br><br>构造器说明：定义函数或新增对象构造器<br>实例化方法<br>//&nbsp;对象实例化<br>var&nbsp;f0&nbsp;=&nbsp;new&nbsp;Function(&quot;i&quot;,&nbsp;&quot;j&quot;,&nbsp;&quot;return&nbsp;(i&nbsp;+&nbsp;j)&quot;);<br>//&nbsp;函数关键字语句<br>function&nbsp;f1(i,&nbsp;j){return&nbsp;i&nbsp;+&nbsp;j;}<br>//&nbsp;函数表达式<br>var&nbsp;f3&nbsp;=&nbsp;function(i,&nbsp;j){return&nbsp;i&nbsp;+&nbsp;j;};<br>属性及方法<br>prototype<br>原型对象属性及其方法<br>constructor<br>apply<br>call<br>bind<br>实例对象属性和方法<br>length<br>prototype<br>arguments<br>caller<br>自定义对象构造器<br><br>下面的代码声明一个&nbsp;Point&nbsp;增加了一个move方法，最后创建了一个&nbsp;Point&nbsp;的实例对象。<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;2);<br>Function.prototype.apply<br><br>功能：通过参数指定调用者和函数参数并执行该函数<br>//&nbsp;functionObj.apply(thisArg[,&nbsp;argsArray])<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;1,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br>p.move.apply(circle,&nbsp;[2,&nbsp;1]);&nbsp;//&nbsp;{x:&nbsp;3,&nbsp;y:&nbsp;2,&nbsp;r:&nbsp;1}<br>Function.prototype.bind<br><br>功能：通过参数指定函数调用者和函数参数并返回该函数的引用<br>//&nbsp;functionObj.bind(thisArg[,&nbsp;arg1[,&nbsp;arg2[,&nbsp;...]]])<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;1,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br>var&nbsp;circleMoveRef&nbsp;=&nbsp;p.move.bind(circle,&nbsp;2,&nbsp;1);<br>setTimeout(circleMoveRef,&nbsp;1000);&nbsp;//&nbsp;{x:&nbsp;3,&nbsp;y:&nbsp;2,&nbsp;r:&nbsp;1}<br><br>//&nbsp;之间使用&nbsp;circleMoveRef()&nbsp;效果等同于&nbsp;apply()<br>circleMoveRef();<br>子类构造器<br><br>function&nbsp;Circle(x,&nbsp;y,&nbsp;r)&nbsp;{<br>&nbsp;&nbsp;Point.apply(this,&nbsp;[x,&nbsp;y]);<br>&nbsp;&nbsp;this.radius&nbsp;=&nbsp;r;<br>}<br>Circle.prototype&nbsp;=&nbsp;Object.create(Point.prototype);<br>Circle.prototype.constructor&nbsp;=&nbsp;Circle;<br>Circle.prototype.area&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;return&nbsp;Math.PI&nbsp;*&nbsp;this.radius&nbsp;*&nbsp;this.radius;<br>}<br><br>var&nbsp;c&nbsp;=&nbsp;new&nbsp;Circle(1,&nbsp;2,&nbsp;3);<br>c.move(2,&nbsp;2);<br>c.area();<br>函数调用<br><br>()<br>apply<br>call<br>函数参数<br><br>形参个数不一定等于实参个数<br>值专递<br>通过参数类型检查实现函数重载<br>arguments<br><br>arguments&nbsp;的常用属性<br>length&nbsp;实参个数<br>0...arguments.length-1&nbsp;实参属性名称（key）<br>callee&nbsp;函数本身<br>function&nbsp;max(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(max.length&nbsp;===&nbsp;arguments.length)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a&gt;b?a:b;<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;_max&nbsp;=&nbsp;arguments[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;arguments.length;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(_max&nbsp;&lt;&nbsp;arguments[i])&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_max&nbsp;=&nbsp;arguments[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_max;<br>&nbsp;&nbsp;}<br>}<br>值专递<br><br>函数参数的值专递是参数复制都是栈内存中的复制。<br><br>//&nbsp;原始类型<br>function&nbsp;plusplus(num)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;num++;<br>}<br>var&nbsp;count&nbsp;=&nbsp;0;<br>var&nbsp;result&nbsp;=&nbsp;plusplus(count);&nbsp;//&nbsp;result&nbsp;=&nbsp;1;&nbsp;count&nbsp;=&nbsp;0;<br><br>//&nbsp;引用类型<br>function&nbsp;setName(obj)&nbsp;{<br>&nbsp;&nbsp;obj.name&nbsp;=&nbsp;&quot;obama&quot;;<br>}<br>var&nbsp;president&nbsp;=&nbsp;{name:&nbsp;&quot;bush&quot;};<br>setName(president);&nbsp;//&nbsp;{name:&nbsp;&quot;obama&quot;};<br>函数重载<br><br>以&nbsp;Require.JS&nbsp;中的&nbsp;define()&nbsp;为例：<br>define(function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>define([&quot;lib&quot;],&nbsp;function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>define(&quot;math&quot;,&nbsp;[&quot;lib&quot;],&nbsp;function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>//&nbsp;define&nbsp;的实现代码<br>/**<br>&nbsp;*&nbsp;The&nbsp;function&nbsp;that&nbsp;handles&nbsp;definitions&nbsp;of&nbsp;modules.&nbsp;Differs&nbsp;from<br>&nbsp;*&nbsp;require()&nbsp;in&nbsp;that&nbsp;a&nbsp;string&nbsp;for&nbsp;the&nbsp;module&nbsp;should&nbsp;be&nbsp;the&nbsp;first&nbsp;argument,<br>&nbsp;*&nbsp;and&nbsp;the&nbsp;function&nbsp;to&nbsp;execute&nbsp;after&nbsp;dependencies&nbsp;are&nbsp;loaded&nbsp;should<br>&nbsp;*&nbsp;return&nbsp;a&nbsp;value&nbsp;to&nbsp;define&nbsp;the&nbsp;module&nbsp;corresponding&nbsp;to&nbsp;the&nbsp;first&nbsp;argument&quot;s<br>&nbsp;*&nbsp;name.<br>&nbsp;*/<br>define&nbsp;=&nbsp;function&nbsp;(name,&nbsp;deps,&nbsp;callback)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;node,&nbsp;context;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//Allow&nbsp;for&nbsp;anonymous&nbsp;modules<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(typeof&nbsp;name&nbsp;!==&nbsp;&quot;string&quot;)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Adjust&nbsp;args&nbsp;appropriately<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback&nbsp;=&nbsp;deps;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deps&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//This&nbsp;module&nbsp;may&nbsp;not&nbsp;have&nbsp;dependencies<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!isArray(deps))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback&nbsp;=&nbsp;deps;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deps&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;省略以下代码<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...<br>};<br>RegExp<br><br>构造器说明：用于定义正则表达式，一个&nbsp;RegExp&nbsp;对象包含一个正则表达式和关联的标志<br>定义方法<br><br>/pattern/flags<br>new&nbsp;RegExp(pattern[,&nbsp;flags]);<br>属性及方法<br>prototype<br>原型对象属性及其方法<br>constructor<br>test<br>exec<br>...<br>RegExp.prototype.test<br><br>功能：使用正则表达式对字符串进行测试，并返回测试结果<br>//&nbsp;regexObj.text(str)<br>var&nbsp;reg&nbsp;=&nbsp;/^abc/i;<br>reg.test(&quot;Abc123&quot;);&nbsp;//&nbsp;true<br>reg.test(&quot;1Abc1234&quot;);&nbsp;//&nbsp;false<br>Date<br><br>构造器说明：用于定义日期对象<br>定义方法<br><br>var&nbsp;date0&nbsp;=&nbsp;new&nbsp;Date();<br>var&nbsp;date1&nbsp;=&nbsp;new&nbsp;Date(2014,&nbsp;3,&nbsp;1,&nbsp;7,&nbsp;1,&nbsp;1,&nbsp;100);<br>属性及方法<br>prototype<br>parse<br>now<br>...<br>原型对象属性及其方法<br>constructor<br>Date<br>getDate<br>getHours<br>setDate<br>setHours<br>...<br>标准内置对象<br><br>Math<br><br>对象说明：拥有属性和方法的单一对象主要用于数字计算<br>对象属性：<br>E<br>PI<br>SQRT2<br>...<br>对象方法：<br>floor<br>random<br>abs<br>max<br>cos<br>ceil<br>Math.floor<br><br>功能：向下取整<br>//&nbsp;Math.floor(num)<br>Math.floor(0.97);&nbsp;//&nbsp;0<br>Math.floor(5.1);&nbsp;//&nbsp;5<br>Math.floor(-5.1);&nbsp;//6<br>相似方法：ceil，round<br>Math.random<br><br>功能：返回&nbsp;0~1&nbsp;之间的浮点数<br>//&nbsp;Math.random()<br>Math.random();&nbsp;//&nbsp;0.14523562323461<br>JSON<br><br>对象说明：用于存储和交换文本信息<br>对象方法：<br>parse<br>stringify<br>JSON.stringify<br><br>功能：将&nbsp;JSON&nbsp;对象转换为字符转<br>//&nbsp;JSON.stringify(value[,&nbsp;replacer[,&nbsp;space]])<br>var&nbsp;json&nbsp;=&nbsp;{&quot;name&quot;:&nbsp;&quot;X&quot;};<br>JSON.stringify(json);&nbsp;//&nbsp;&quot;{&quot;name&quot;:&quot;X&quot;}&quot;<br>JSON.parse<br><br>功能：将&nbsp;JSON&nbsp;字符转转换为对象<br>//&nbsp;JSON.parse(text[,&nbsp;reviver])<br>var&nbsp;jsonStr&nbsp;=&nbsp;&quot;{&quot;name&quot;:&quot;X&quot;}&quot;;<br>JSON.parse(jsonStr);&nbsp;//&nbsp;{name:&nbsp;&quot;X&quot;}<br>全局对象<br><br>全局对象定义了一系列的属性和方法在编程过程中可以被之间调用。<br>属性：NaN，Infinity，undefined<br>方法：<br><br>parseInt<br>parseFloat<br>isNaN<br>isFinite<br>eval<br>处理&nbsp;URI&nbsp;方法：<br>encodedURIComponent<br>decodeURIComponent<br>encodedURI<br>decodeURI<br>构造器属性：<br>Boolean<br>String<br>Number<br>Object<br>Function<br>Array<br>Date<br>Error<br>...<br>对象属性：<br>Math<br>JSON<br>NaA<br><br>非数字值：表示错误或无意义的运算结果，NaN&nbsp;参与运算仍会返回&nbsp;NaA，且&nbsp;NaN&nbsp;不等于任何值，包括它本身。可以使用&nbsp;isNaN()&nbsp;判断运算结果的类型是否为&nbsp;NaN。<br>isNaN(NaN);&nbsp;//&nbsp;true<br>isNaN(4&nbsp;-&nbsp;&quot;2a&quot;);&nbsp;//&nbsp;true;<br>parseInt<br><br>功能：转换字符串成数字<br>//&nbsp;parseInt(string[,&nbsp;radix])<br>//&nbsp;radix&nbsp;-&nbsp;为进制数<br>parseInt(&quot;010&quot;);&nbsp;//&nbsp;10<br>parseInt(&quot;010&quot;,&nbsp;8)&nbsp;//&nbsp;8<br>parseInt(&quot;010&quot;,&nbsp;16)&nbsp;//&nbsp;16<br><br>parseInt(&quot;0x1f&quot;);&nbsp;//&nbsp;31<br>parseInt(&quot;0x1f&quot;,&nbsp;16);&nbsp;//&nbsp;31<br>parseInt(&quot;1f&quot;);&nbsp;//&nbsp;1<br>parseInt(&quot;1f&quot;,&nbsp;16);&nbsp;//&nbsp;31<br>eval<br><br>功能：计算字符串并执行其中的&nbsp;JavaScript&nbsp;代码（会带来安全性和代码逻辑问题，通常不建议使用）<br>//&nbsp;eval(string)<br>var&nbsp;res&nbsp;=&nbsp;&quot;{&quot;error&quot;:&nbsp;&quot;0&quot;,&nbsp;&quot;msg&quot;:&nbsp;&quot;OK&quot;};<br>var&nbsp;obj;<br>if&nbsp;(!JSON)&nbsp;{<br>&nbsp;&nbsp;obj&nbsp;=&nbsp;eval(&quot;(&quot;&nbsp;+&nbsp;res&nbsp;+&nbsp;&quot;)&quot;);<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;obj&nbsp;=&nbsp;JSON.parse(res);<br>}<br>encodedURIComponent<br><br>功能：将&nbsp;URI&nbsp;参数中的特殊字符，中文等作为&nbsp;URI&nbsp;的一部分进行编码<br>var&nbsp;uri&nbsp;=&nbsp;&quot;http://w3schools.com/my&nbsp;test.asp?name=ståle&car=saab&quot;;<br>var&nbsp;res&nbsp;=&nbsp;encodeURIComponent(uri);<br><br>//&nbsp;结果<br>//&nbsp;http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst%C3%A5le%26car%3Dsaab","addLink":"","date":"2016-01-07 14:58","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4},{"addArticleTtitle":"变量作用域","classify":"javascript","addarticleContent":"变量的作用域值的是变量的生命周期和作用范围（全局与局部作用域的区别）。<br>作用域介绍<br><br>静态作用域<br><br>静态作用域有称为词法作用域，即指其在编译的阶段就可以决定变量的引用。静态作用域只更变量定义的位置有关与代码执行的顺序无关。<br>var&nbsp;x&nbsp;=&nbsp;0;<br>function&nbsp;foo()&nbsp;{<br>&nbsp;&nbsp;alert(x);<br>}<br><br>function&nbsp;bar()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;20;<br>&nbsp;&nbsp;foo();<br>}<br><br>foo();<br><br><br>动态作用域<br><br>动态作用域的变量引用只可在程序运行时刻决定（其通常通过动态栈来进行管理）。<br>var&nbsp;x&nbsp;=&nbsp;0;<br>function&nbsp;foo()&nbsp;{<br>&nbsp;&nbsp;alert(x);<br>}<br><br>function&nbsp;bar()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;20;<br>&nbsp;&nbsp;foo();<br>}<br><br>foo();<br><br><br>JavaScript&nbsp;变量作用域<br><br>JavaScript&nbsp;（1）使用静态作用域，（2）其没有块级作用域（只有函数作用域，就是只有&nbsp;function&nbsp;用于可以定义作用域），（3）在&nbsp;ES5&nbsp;之作使用词法环境来管理作用域。<br>词法环境<br><br>组成<br><br>词法环境用来描述静态作用域的数据结构。它由环节记录和外部词法环境的引用组成。+<br><br>环境记录（record）（指形参，变量，函数等）<br>外部词法环境的引用（outer）<br>创建<br><br>在一段代码执行之前，先初始化词法环境。会被初始化的有：<br>形参<br>函数定义（创建函数对象，会保存当前作用域。见下图）<br>变量定义（所有初始化值均为&nbsp;undefined）<br><br>结构<br><br>var&nbsp;x&nbsp;=&nbsp;10;<br>function&nbsp;foo(y)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;z&nbsp;=&nbsp;30;<br>&nbsp;&nbsp;function&nbsp;bar(q)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y&nbsp;+&nbsp;z&nbsp;+&nbsp;q;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return&nbsp;bar;<br>}<br>var&nbsp;bar&nbsp;=&nbsp;foo(20);<br>bar(40);<br>全局词法作用域（初始化状态）<br><br>关于词法环境的问题<br><br>命名冲突<br><br>形参，函数定义，变量名称命名冲突。其中的优先级的排序如下：<br>函数定义&nbsp;&gt;&nbsp;形参&nbsp;&gt;&nbsp;变量<br>arguments&nbsp;的使用<br>为函数中定义好的变量。<br>函数表达式与函数定义的区别<br>函数表达式是在执行时才创建函数对象。<br>函数定义为在代码执行之前就进行创建的。<br>with&nbsp;语句<br><br>with&nbsp;会创造一个临时作用域。<br>var&nbsp;foo&nbsp;=&nbsp;&quot;abc&quot;;<br>with({<br>&nbsp;&nbsp;foo:&nbsp;&quot;bar&quot;;<br>})&nbsp;{<br>&nbsp;&nbsp;function&nbsp;f()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(foo);<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;(function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(foo);<br>&nbsp;&nbsp;})();<br>&nbsp;&nbsp;f();<br>}<br>try-catch&nbsp;句法<br><br>try&nbsp;{<br>&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;10;<br>&nbsp;&nbsp;throw&nbsp;new&nbsp;Error();<br>}&nbsp;catch&nbsp;(e)&nbsp;{<br>&nbsp;&nbsp;function&nbsp;f()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(e);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;(function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(e);<br>&nbsp;&nbsp;})();<br>&nbsp;&nbsp;f();<br>}<br>带名称的函数表达式<br><br>当一个函数表达式有了名称之后，JavaScript&nbsp;会创建一个新的词法环境。并在这个词法环境中用有一个属性&nbsp;A&nbsp;指向这个函数，同时这个属性&nbsp;A&nbsp;指向的函数是不可被修改的。<br>下面例子为不常规的写法<br>(function&nbsp;A(){<br>&nbsp;&nbsp;A&nbsp;=&nbsp;1;<br>&nbsp;&nbsp;alert(A);<br>})();","addLink":"","date":"2016-01-07 15:01","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":5},{"addArticleTtitle":"表达式与运算符","classify":"javascript","addarticleContent":"表达式<br><br>表达式为&nbsp;JavaScript&nbsp;的短语可执行并生成值。<br>1.7&nbsp;//&nbsp;字面量<br>&quot;1.7&quot;<br>var&nbsp;a&nbsp;=&nbsp;1;<br>var&nbsp;b&nbsp;=&nbsp;&quot;2&quot;;<br>var&nbsp;c&nbsp;=&nbsp;(1.7&nbsp;+&nbsp;a)&nbsp;*&nbsp;&quot;3&quot;&nbsp;-&nbsp;b<br>运算符<br><br>算数运算符&nbsp;（+&nbsp;-&nbsp;*&nbsp;/&nbsp;%）<br>关系运算符&nbsp;（&gt;&nbsp;&lt;&nbsp;==&nbsp;!=&nbsp;&gt;=&nbsp;&lt;=&nbsp;===&nbsp;!==)<br>逻辑运算符&nbsp;（!&nbsp;&&&nbsp;||）<br>位运算符&nbsp;（&&nbsp;|&nbsp;^&nbsp;~&nbsp;&lt;&lt;&nbsp;&gt;&gt;）<br>负值运算符&nbsp;（=）<br>条件运算符&nbsp;（?:）<br>逗号运算符&nbsp;（,）<br>对象运算符&nbsp;（new&nbsp;delete&nbsp;.&nbsp;[]&nbsp;instanceof）<br>===&nbsp;全等符号<br><br>全等运算符用于盘对左右两边的对象或值是否类型相同且值相等。<br>伪代码拆解<br>function&nbsp;totalEqual(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;类型相同)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;是引用类型)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;是同一引用)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;值类型<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;值相等)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;}<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;&quot;123&quot;;<br>var&nbsp;b&nbsp;=&nbsp;&quot;123&quot;;<br>var&nbsp;c&nbsp;=&nbsp;&quot;4&quot;;<br>var&nbsp;aObj&nbsp;=&nbsp;new&nbsp;String(&quot;123&quot;);<br>var&nbsp;bObj&nbsp;=&nbsp;new&nbsp;String(&quot;123&quot;);<br>var&nbsp;cObj&nbsp;=&nbsp;aObj;<br><br>a&nbsp;===&nbsp;aObj&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;false<br>aObj&nbsp;===&nbsp;bObj&nbsp;&nbsp;&nbsp;//&nbsp;false<br>aObj&nbsp;===&nbsp;cObj&nbsp;&nbsp;&nbsp;//&nbsp;true<br>a&nbsp;===&nbsp;b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;true<br>a&nbsp;===&nbsp;c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;false<br>==<br><br>==&nbsp;用于判断操作符两边的对象或值是否相等。<br>伪代码拆解<br>function&nbsp;equal(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;类型相同)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a&nbsp;===&nbsp;b;<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;类型不同<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Number(a)&nbsp;===&nbsp;Number(b);&nbsp;//&nbsp;优先转换数值类型<br>&nbsp;&nbsp;}<br>}<br>例子<br><br>&quot;99&quot;&nbsp;==&nbsp;99;&nbsp;//&nbsp;true<br>new&nbsp;String(&quot;99&quot;)&nbsp;==&nbsp;99;&nbsp;//&nbsp;true<br>true&nbsp;==&nbsp;1;&nbsp;//&nbsp;true<br>false&nbsp;==&nbsp;0;&nbsp;//&nbsp;true<br>&quot;&#92;n&#92;n&#92;n&quot;&nbsp;==&nbsp;//&nbsp;true<br>例外规则<br><br>null&nbsp;==&nbsp;undefined&nbsp;结果为真&nbsp;true<br>在有&nbsp;null/undefined&nbsp;参与的&nbsp;==&nbsp;运算是不进行隐式转换。<br>0&nbsp;==&nbsp;null;&nbsp;//&nbsp;false<br>null&nbsp;==&nbsp;false;&nbsp;//&nbsp;false<br>&quot;undefined&quot;&nbsp;==&nbsp;undefined;&nbsp;//&nbsp;false<br>!&nbsp;取反<br><br>!x&nbsp;用于表达&nbsp;x&nbsp;表达式的运行结果转换成布尔值（Boolean）之后取反的结果。!!x&nbsp;则表示取&nbsp;x&nbsp;表达式的运行结果的布尔值。<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>var&nbsp;a&nbsp;=&nbsp;!obj&nbsp;//&nbsp;false;<br>var&nbsp;a&nbsp;=&nbsp;!!obj&nbsp;//&nbsp;true;<br>&&&nbsp;逻辑与<br><br>x&nbsp;&&&nbsp;y&nbsp;如果&nbsp;x&nbsp;表达式的运行交过转换成&nbsp;Boolean&nbsp;值为&nbsp;false&nbsp;则不运行表达式&nbsp;y&nbsp;而直接返回&nbsp;x&nbsp;表达式的运行结果。相反，如果&nbsp;x&nbsp;表达式的运行交过转换成&nbsp;Boolean&nbsp;值为&nbsp;true&nbsp;则运行表达式&nbsp;y&nbsp;并返回&nbsp;y&nbsp;表达式的运行结果。<br>伪代码拆解<br>var&nbsp;ret&nbsp;=&nbsp;null;<br>if&nbsp;(!!(ret&nbsp;=&nbsp;x))&nbsp;{<br>&nbsp;&nbsp;return&nbsp;y;<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;return&nbsp;ret;<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;0&nbsp;&&&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;0<br>var&nbsp;b&nbsp;=&nbsp;1&nbsp;&&&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;2<br>||&nbsp;逻辑或<br><br>x&nbsp;||&nbsp;y&nbsp;如果&nbsp;x&nbsp;表达式的运行结果转换为&nbsp;Boolean&nbsp;值为&nbsp;true，则不运行&nbsp;表达式&nbsp;y&nbsp;而直接返回表达式&nbsp;x&nbsp;的运算结果。（与&nbsp;&&&nbsp;方式相反）<br>伪代码拆解<br>var&nbsp;ret&nbsp;=&nbsp;null;<br>if&nbsp;(!!(ret&nbsp;=&nbsp;x))&nbsp;{<br>&nbsp;&nbsp;return&nbsp;ret;<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;return&nbsp;y;<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;0&nbsp;||&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;2<br>var&nbsp;b&nbsp;=&nbsp;1&nbsp;||&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;1<br>元算符优先级（Operator&nbsp;Precedence）<br><br>+&nbsp;-&nbsp;*&nbsp;/&nbsp;高于&nbsp;&&<br>*&nbsp;/&nbsp;高于&nbsp;+&nbsp;-<br>&&&nbsp;高于&nbsp;?:<br>()&nbsp;内优先级高于之外<br>NOTE：和数学上的算术优先级类似，同级从左到右计算。如有疑问加上&nbsp;()&nbsp;既可解决优先级问题。<br>Precedence&nbsp;&nbsp;Operator&nbsp;type&nbsp;&nbsp;Associativity&nbsp;&nbsp;Individual&nbsp;operators<br>19&nbsp;&nbsp;Grouping&nbsp;&nbsp;n/a&nbsp;&nbsp;(&nbsp;…&nbsp;)<br>18&nbsp;&nbsp;Member&nbsp;Access&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;.&nbsp;…<br>Computed&nbsp;Member&nbsp;Access&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;[&nbsp;…&nbsp;]<br>new&nbsp;(with&nbsp;argument&nbsp;list)&nbsp;&nbsp;n/a&nbsp;&nbsp;new&nbsp;…&nbsp;(&nbsp;…&nbsp;)<br>17&nbsp;&nbsp;Function&nbsp;Call&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;(&nbsp;…&nbsp;)<br>new&nbsp;(without&nbsp;argument&nbsp;list)&nbsp;&nbsp;right-to-left&nbsp;&nbsp;new&nbsp;…<br>16&nbsp;&nbsp;Postfix&nbsp;Increment&nbsp;&nbsp;n/a&nbsp;&nbsp;…&nbsp;++<br>Postfix&nbsp;Decrement&nbsp;&nbsp;n/a&nbsp;&nbsp;…&nbsp;--<br>15&nbsp;&nbsp;Logical&nbsp;NOT&nbsp;&nbsp;right-to-left&nbsp;&nbsp;!&nbsp;…<br>Bitwise&nbsp;NOT&nbsp;&nbsp;right-to-left&nbsp;&nbsp;~&nbsp;…<br>Unary&nbsp;Plus&nbsp;&nbsp;right-to-left&nbsp;&nbsp;+&nbsp;…<br>Unary&nbsp;Negation&nbsp;&nbsp;right-to-left&nbsp;&nbsp;-&nbsp;…<br>Prefix&nbsp;Increment&nbsp;&nbsp;right-to-left&nbsp;&nbsp;++&nbsp;…<br>Prefix&nbsp;Decrement&nbsp;&nbsp;right-to-left&nbsp;&nbsp;--&nbsp;…<br>typeof&nbsp;&nbsp;right-to-left&nbsp;&nbsp;typeof&nbsp;…<br>void&nbsp;&nbsp;right-to-left&nbsp;&nbsp;void&nbsp;…<br>delete&nbsp;&nbsp;right-to-left&nbsp;&nbsp;delete&nbsp;…<br>14&nbsp;&nbsp;Multiplication&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;*&nbsp;…<br>Division&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;/&nbsp;…<br>Remainder&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;%&nbsp;…<br>13&nbsp;&nbsp;Addition&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;+&nbsp;…<br>Subtraction&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;-&nbsp;…<br>12&nbsp;&nbsp;Bitwise&nbsp;Left&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;&lt;&nbsp;…<br>Bitwise&nbsp;Right&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&gt;&nbsp;…<br>Bitwise&nbsp;Unsigned&nbsp;Right&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&gt;&gt;&nbsp;…<br>11&nbsp;&nbsp;Less&nbsp;Than&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;&nbsp;…<br>Less&nbsp;Than&nbsp;Or&nbsp;Equal&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;=&nbsp;…<br>Greater&nbsp;Than&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&nbsp;…<br>Greater&nbsp;Than&nbsp;Or&nbsp;Equal&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;=&nbsp;…<br>in&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;in&nbsp;…<br>instanceof&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;instanceof&nbsp;…<br>10&nbsp;&nbsp;Equality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;==&nbsp;…<br>Inequality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;!=&nbsp;…<br>Strict&nbsp;Equality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;===&nbsp;…<br>Strict&nbsp;Inequality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;!==&nbsp;…<br>9&nbsp;&nbsp;Bitwise&nbsp;AND&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&&nbsp;…<br>8&nbsp;&nbsp;Bitwise&nbsp;XOR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;^&nbsp;…<br>7&nbsp;&nbsp;Bitwise&nbsp;OR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;|&nbsp;…<br>6&nbsp;&nbsp;Logical&nbsp;AND&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&&&nbsp;…<br>5&nbsp;&nbsp;Logical&nbsp;OR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;||&nbsp;…<br>4&nbsp;&nbsp;Conditional&nbsp;&nbsp;right-to-left&nbsp;&nbsp;…&nbsp;?&nbsp;…&nbsp;:&nbsp;…<br>3&nbsp;&nbsp;Assignment&nbsp;&nbsp;right-to-left&nbsp;&nbsp;…&nbsp;=&nbsp;…<br>…&nbsp;+=&nbsp;…<br>…&nbsp;-=&nbsp;…<br>…&nbsp;*=&nbsp;…<br>…&nbsp;/=&nbsp;…<br>…&nbsp;%=&nbsp;…<br>…&nbsp;&lt;&lt;=&nbsp;…<br>…&nbsp;&gt;&gt;=&nbsp;…<br>…&nbsp;&gt;&gt;&gt;=&nbsp;…<br>…&nbsp;&=&nbsp;…<br>…&nbsp;^=&nbsp;…<br>…&nbsp;|=&nbsp;…<br>2&nbsp;&nbsp;yield&nbsp;&nbsp;right-to-left&nbsp;&nbsp;yield&nbsp;…<br>1&nbsp;&nbsp;Spread&nbsp;&nbsp;n/a&nbsp;&nbsp;...&nbsp;…<br>0&nbsp;&nbsp;Comma&nbsp;/&nbsp;Sequence&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;,&nbsp;…","addLink":"","date":"2016-01-07 15:04","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":6},{"addArticleTtitle":"语句","classify":"javascript","addarticleContent":"条件控制语句<br><br>其中expression可以使用整型，字符串，甚至表达式<br>if&nbsp;(expression0)&nbsp;{statement0}<br>else&nbsp;if&nbsp;(expression1)&nbsp;{statement1}<br>else&nbsp;{statement2}<br><br>//&nbsp;JavaScript&nbsp;中的&nbsp;case&nbsp;可以使用整型，字符串，甚至表达式<br>switch(persion.type)&nbsp;{<br>&nbsp;&nbsp;case&nbsp;&quot;teacher&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement1<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case&nbsp;&quot;student&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement2<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement3<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}<br>循环控制语句<br><br>while(expression)&nbsp;{statement}<br><br>//&nbsp;至少执行一次<br>do&nbsp;{statement}&nbsp;while(expression);<br><br>for&nbsp;(initialise;&nbsp;test_expresiion;&nbsp;increment)&nbsp;{statement}<br><br>//&nbsp;跳过下面代码并进入下一轮循环<br>continue;<br><br>//&nbsp;退出当前循环<br>break;<br>for-in<br><br>用于遍历对象的全部属性。<br>function&nbsp;Car(id,&nbsp;type,&nbsp;color)&nbsp;{<br>&nbsp;&nbsp;this.type&nbsp;=&nbsp;type;<br>&nbsp;&nbsp;this.color&nbsp;=&nbsp;color;<br>&nbsp;&nbsp;this.id&nbsp;=&nbsp;id;<br>}<br><br>var&nbsp;benz&nbsp;=&nbsp;new&nbsp;Car(&quot;benz&quot;,&nbsp;&quot;black&quot;,&nbsp;&quot;red&quot;);<br>Car.prototype.start&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.type&nbsp;+&nbsp;&quot;&nbsp;start&quot;);<br>}<br><br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>}<br><br>//&nbsp;输出结果<br>type:black<br>color:red<br>id:benz<br>start:function&nbsp;(){<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.type&nbsp;+&nbsp;&quot;&nbsp;start&quot;);<br>}<br><br>//&nbsp;-----------<br><br>//&nbsp;如不需原型对象上的属性可以使用&nbsp;hasOwnProperty<br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(benz.hasOwnProperty(key))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;输出结果<br>type:black<br>color:red<br>id:benz<br>如不需原型对象上的属性可以使用&nbsp;hasOwnProperty<br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(benz.hasOwnProperty(key))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>&nbsp;&nbsp;}<br>}<br>/*&nbsp;输出结果<br>type:black<br>color:red<br>id:benz&nbsp;*/<br>异常处理语句<br><br>try{<br>&nbsp;&nbsp;//&nbsp;statements<br>&nbsp;&nbsp;throw&nbsp;new&nbsp;Error();<br>catch(e){<br>&nbsp;&nbsp;//&nbsp;statements<br>}<br>finally{<br>&nbsp;&nbsp;//&nbsp;statements<br>}<br>with&nbsp;语句<br><br>with&nbsp;语句是&nbsp;JavaScript&nbsp;中特有的语句形式，它主要有两个作用：<br>其一，其用于缩短特定情况下必须书写的代码量。它可以暂时改变变量的作用域。<br>//&nbsp;使用&nbsp;with&nbsp;之前<br>(function(){<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;Math.cos(3&nbsp;*&nbsp;Math.PI)&nbsp;+&nbsp;Math.sin(Math.LN10);<br>&nbsp;&nbsp;var&nbsp;y&nbsp;=&nbsp;Math.tan(14&nbsp;*&nbsp;Math.E);<br>})();<br><br>//&nbsp;使用&nbsp;with<br>(function(){<br>&nbsp;&nbsp;with(Math)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;cos(3&nbsp;*&nbsp;PI)&nbsp;+&nbsp;sin(LN10);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;y&nbsp;=&nbsp;tan(14&nbsp;*&nbsp;E);<br>&nbsp;&nbsp;}<br>})();<br><br><br>其二，改变变量的作用域，将with语句中的对象添加至作用域链的头部。<br>frame[1].document.forms[0].name.value&nbsp;=&nbsp;&quot;&quot;;<br>frame[1].document.forms[0].address.value&nbsp;=&nbsp;&quot;&quot;;<br>frame[1].document.forms[0].email.value&nbsp;=&nbsp;&quot;&quot;;<br><br>with(frame[1].document.[0])&nbsp;{<br>&nbsp;&nbsp;name.value&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;address.value&nbsp;=&nbsp;&quot;&quot;<br>&nbsp;&nbsp;email.value&nbsp;=&nbsp;&quot;&quot;;<br>}<br>缺点就是导致&nbsp;JavaScript&nbsp;语句的可执行性下降，所以通常情况下因尽可能的避免使用。","addLink":"","date":"2016-01-07 15:08","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":7},{"addArticleTtitle":"闭包","classify":"javascript","addarticleContent":"闭包有函数和与其相关的引用环境的组合而成<br>闭包允许函数访问其引用环境中的变量（又称自由变量）<br>广义上来说，所有&nbsp;JavaScript&nbsp;的函数都可以成为闭包，因为&nbsp;JavaScript&nbsp;函数在创建时保存了当前的词法环境。<br>function&nbsp;add()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;i&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;return&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(i++);<br>&nbsp;&nbsp;}<br>}<br>var&nbsp;f&nbsp;=&nbsp;add();<br>f();<br>f();<br>闭包的应用<br><br>保存变量现场<br><br><br>//&nbsp;错误方法<br>var&nbsp;addHandlers&nbsp;=&nbsp;function(nodes)&nbsp;{<br>&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;len&nbsp;=&nbsp;nodes.length;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;nodes[i].onclick&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;正确方法<br>var&nbsp;addHandlers&nbsp;=&nbsp;function(nodes)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;helper&nbsp;=&nbsp;function(i)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;var&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;len&nbsp;=&nbsp;nodes.length;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;nodes[i].onclick&nbsp;=&nbsp;helper(i);<br>&nbsp;&nbsp;}<br>}<br>封装<br><br><br>//&nbsp;将&nbsp;observerList&nbsp;封装在&nbsp;observer&nbsp;中<br>var&nbsp;observer&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;observerList&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;function(obj)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observerList.push(obj);<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;empty:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observerList&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;getCount:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;observerList.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;get:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;observerList;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;};<br>})();","addLink":"","date":"2016-01-07 15:10","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":8},{"addArticleTtitle":"面向对象","classify":"javascript","addarticleContent":"程序设计方法<br><br>程序设计描述系统如何通过程序来实现的过程，其为一种设计方法与语言实现无关。常见的设计方法有面向流程与面向对象。<br>面向过程<br><br>以程序的过程为中心，采用自定而下逐步细化的方法来实现。常见的面向过程语言有&nbsp;C、Fortran、Pascall。<br><br>面向对象<br><br>将对象作为程序的基本单元，将程序分解为数据和操作的集合。常见的面向过程语言有&nbsp;smalltalk（也是&nbsp;Objective-C&nbsp;的父亲）、Java、C++。<br><br>概念<br><br>类（Class）、对象（Object）<br>属性（Property）、方法（Method）<br>基本特点<br><br>继承（Inheritance）<br>封装（Encapsulation）<br>多态（Polymorphism）<br>JavaScript&nbsp;面向对象<br><br>constructor<br><br>对象的构造器，也可称之为构造类型。<br>//&nbsp;使用&nbsp;new&nbsp;关键字创建<br>var&nbsp;o&nbsp;=&nbsp;new&nbsp;Object();<br>var&nbsp;a&nbsp;=&nbsp;new&nbsp;Array();<br>var&nbsp;d&nbsp;=&nbsp;new&nbsp;Date();<br>&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;object&nbsp;&nbsp;&nbsp;&nbsp;constructor<br><br>//&nbsp;使用直接量创建<br>var&nbsp;o&nbsp;=&nbsp;{name:&nbsp;&quot;Xinyang&quot;};<br>var&nbsp;a&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3];<br>自定义构造器<br><br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Person(&quot;Q&quot;,&nbsp;12,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>创建构造器的方法（3&nbsp;种）<br><br>function&nbsp;ClassName()&nbsp;{...}<br>var&nbsp;Class&nbsp;=&nbsp;function()&nbsp;{...}<br>var&nbsp;Class&nbsp;=&nbsp;new&nbsp;Function()<br>NOTE:&nbsp;并不是所有函数都可以被当成构造器，例如&nbsp;var&nbsp;o&nbsp;=&nbsp;new&nbsp;Math.min()。通常自定义的函数均可当做构造器来使用。内置对象的构造器也可被当做构造器。<br>NOTE+：如果构造器有返还值并为对象类型，则对象将被直接返回。<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;//&nbsp;!!!&nbsp;注意这里<br>&nbsp;&nbsp;return&nbsp;{};<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;X&quot;,&nbsp;13,&nbsp;new&nbsp;Date());<br>console.log(X.name);&nbsp;//&nbsp;undefined;<br>this<br><br>this&nbsp;在不同环境中指代的对象不同（this&nbsp;指代的值可在函数运行过程中发生改变）。<br>出现场景&nbsp;&nbsp;所指代值<br>全局环境&nbsp;&nbsp;全局对象（window&nbsp;在浏览器环境中时）<br>constructor&nbsp;&nbsp;创建的新实例对象<br>函数调用&nbsp;&nbsp;函数的调用者<br>new&nbsp;Function()&nbsp;&nbsp;全局对象<br>eval()&nbsp;&nbsp;调用上下文中的&nbsp;this<br>全局环境中<br><br>全局环境中&nbsp;this&nbsp;指代全局对象，既&nbsp;window&nbsp;在浏览器环境中。<br>//&nbsp;以下的所有&nbsp;this&nbsp;均指代全局对象<br>var&nbsp;a&nbsp;=&nbsp;10;<br>alert(this.a);<br><br>this.b&nbsp;=&nbsp;20;<br>alert(b);<br><br>c&nbsp;=&nbsp;30;<br>alert(this.c);<br>构造器中<br><br>构造器中的&nbsp;this&nbsp;指代的是即将被创建出的对象。<br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;下面的指代即将被创建的对象<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Person(&quot;Q&quot;,&nbsp;12,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>函数中<br><br>函数中的&nbsp;this&nbsp;指代函数的调用者。<br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;下面的指代即将被创建的对象<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;this.gretting&nbsp;=&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;!!!&nbsp;下面这个&nbsp;this&nbsp;指代调用它的对象，既上面的<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;上面的&nbsp;gretting&nbsp;左边的&nbsp;this，既为即将被创建的对象<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Hi,&nbsp;I&nbsp;am&nbsp;&quot;&nbsp;+&nbsp;this.name)<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>X.gretting();<br>NOTE:&nbsp;new&nbsp;Function(&quot;console.log(this)&quot;)&nbsp;中的&nbsp;this&nbsp;均指代全局对象。eval(&quot;console.log(this)&nbsp;则为调用上下文指代的&nbsp;this。<br>this&nbsp;实例<br><br>下面的例子使用&nbsp;apply&nbsp;与&nbsp;call。通过这两个方法来将一个对象中&nbsp;this&nbsp;指代的目标进行改变。<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>&nbsp;&nbsp;this.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>&nbsp;&nbsp;}<br>}<br><br>var&nbsp;point&nbsp;=&nbsp;new&nbsp;Point(0,&nbsp;0);<br>point.move(1,&nbsp;1);<br><br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;0,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br><br>//&nbsp;改变&nbsp;point&nbsp;中&nbsp;move&nbsp;方法&nbsp;this&nbsp;指代的对象至&nbsp;circle<br>point.move.apply(circle,&nbsp;[1,&nbsp;1]);<br>//&nbsp;同样可以用类似的&nbsp;call&nbsp;方法，区别为参数需依次传入<br>point.move.call(circle,&nbsp;1,&nbsp;1);<br><br>原型继承<br><br>使用原型（prototype）可以解决重复定义实例对象拥有的完全一致的属性或方法（既共享原型中的属性或方法）。<br>function&nbsp;Boss()&nbsp;{<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.tasks&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;this.title&nbsp;=&nbsp;&quot;Boss&quot;;<br>&nbsp;&nbsp;this.gretting&nbsp;=&nbsp;function()&nbsp;{console.log(&quot;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);};<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;中具有完全一致（不必唯一的属性或方法）<br>//&nbsp;并耗用内存的共享部分<br>//&nbsp;this.title&nbsp;与&nbsp;this.gretting<br>改造后的构造器<br>function&nbsp;Boss()&nbsp;{<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.tasks&nbsp;=&nbsp;[];<br>}<br>Boss.prototype&nbsp;=&nbsp;{<br>&nbsp;&nbsp;title:&nbsp;&quot;Boss&quot;,<br>&nbsp;&nbsp;gretting:&nbsp;function(){console.log(&quot;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);}<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;中具有完全一致（不必唯一的属性或方法）<br>//&nbsp;并耗用内存的共享部分<br>//&nbsp;this.title&nbsp;与&nbsp;this.gretting<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;拥有相同的原型&nbsp;Boss.prototype<br>原型链<br><br>使用原型继承的方法会产生原型链。JavaScript&nbsp;中对于对象的查找、修改和删除都是通过原型链来完成的。<br>判断属性是否为对象本身<br>objectName.hasOwnProperty(&quot;propertyName&quot;);<br>//&nbsp;返回布尔值&nbsp;true&nbsp;或&nbsp;false<br>属性查找<br><br>对象的属性查找会更随原型链依次查找，如果在当前环境中无法找到需要的属性则会继续向下一层原型中继续寻找。<br>属性修改<br><br>在&nbsp;JavaScript&nbsp;中对于对象属性的修改永远只修改对象自身的属性（不论是来源于对象本身还是对象的原型）。当创建当前对象不存在属性时（即便原型拥有此属性），也会为此对象增加改属性。<br>修改原型上的属性<br>修改原型属性会印象所有被创建出的对象现有的属性和方法。<br>ClassName.prototype.propertyName&nbsp;=&nbsp;&quot;new&nbsp;value&quot;;<br>ClassName.prototype.methodName&nbsp;=&nbsp;function(){...};<br>属性删除<br><br>delete&nbsp;objectName.propertyName&nbsp;只可删除对象自身的属性，无法删除对象的原型属性。<br>Object.create(proto[,&nbsp;propertiesObject])<br><br>其为ECMAScript&nbsp;5&nbsp;中提出的新建立对象的方式。在&nbsp;X&nbsp;中使用隐式的原型对象指向&nbsp;boss&nbsp;对象，并将其设为&nbsp;X&nbsp;对象的原型。<br>var&nbsp;boss&nbsp;=&nbsp;{<br>&nbsp;&nbsp;title:&nbsp;&quot;Boss&quot;,<br>&nbsp;&nbsp;gretting:&nbsp;function(){console.log(&quot;Hi,&nbsp;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);}<br>};<br><br>var&nbsp;X&nbsp;=&nbsp;Object.create(boss);<br>X.gretting();&nbsp;//&nbsp;Hi,&nbsp;I&nbsp;am&nbsp;a&nbsp;Boss!<br>低版本中实现&nbsp;Object.create&nbsp;功能<br>此种方式仍需使用&nbsp;ClassName.prototype&nbsp;的方式来实现。<br>var&nbsp;clone&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;F&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;return&nbsp;function(proto)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;F.prototype&nbsp;=&nbsp;proto;<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;F();<br>&nbsp;&nbsp;}<br>})();<br>面向对象的应用<br><br>全局变量<br><br>全局变量可在程序任意位置进行访问和修改的变量。滥用全局变量会导致，命名冲突，导致程序不稳定。<br>全局标量的三种定义方法：<br>var&nbsp;gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;。<br>window.gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;附加于&nbsp;window&nbsp;对象上<br>gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;不使用&nbsp;var&nbsp;关键字，也附加于&nbsp;windwo&nbsp;对象<br>NOTE：delete&nbsp;无法删除在代码最顶端定义的全局标量&nbsp;var&nbsp;globale<br>封装<br><br>信息隐藏可以保证程序的稳定，将内部信息进行隐藏。其他语言中可词用访问权限来实现封装的概念，像&nbsp;private、public。<br>JavaScript&nbsp;中的封装可使用函数的方法（闭包）。<br>//&nbsp;模拟&nbsp;private&nbsp;的属性<br>function&nbsp;ClassName(){<br>&nbsp;&nbsp;var&nbsp;_property&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.getProperty&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_property;<br>&nbsp;&nbsp;};<br>}<br><br>//&nbsp;模拟&nbsp;protected&nbsp;属性，使用人为约束规则<br>var&nbsp;pro&nbsp;=&nbsp;ClassName.prototype;<br>pro._protectedMethod&nbsp;=&nbsp;function(){...};<br>pro.publicMethod&nbsp;=&nbsp;function(){...};<br>继承<br><br>原型继承<br><br>原型继承的方式为&nbsp;JavaScript&nbsp;中固有的继承方式。<br>var&nbsp;proto&nbsp;=&nbsp;{<br>&nbsp;&nbsp;action1:&nbsp;function(){},<br>&nbsp;&nbsp;action2:&nbsp;function(){}<br>}<br><br>var&nbsp;obj&nbsp;=&nbsp;Object.create(proto);<br>在不支持&nbsp;EM5&nbsp;中的实现方法：<br>var&nbsp;clone&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;F&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;return&nbsp;function(proto)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;F.prototype&nbsp;=&nbsp;proto;<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;F();<br>&nbsp;&nbsp;}<br>})();<br>类继承<br><br>使用原型链继承的方式模拟其他语言类继承的特性。<br>function&nbsp;ClassA()&nbsp;{<br>&nbsp;&nbsp;ClassA.classMethod&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;ClassA.prototype.api&nbsp;=&nbsp;function(){};<br><br>&nbsp;&nbsp;function&nbsp;ClassB()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;ClassA.apply(this,&nbsp;argument);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;ClassB.prototype&nbsp;=&nbsp;new&nbsp;ClassA();<br>&nbsp;&nbsp;ClassB.prototype.constructor&nbsp;=&nbsp;ClassB;<br>&nbsp;&nbsp;ClassB.prototype.api&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;ClassA.prototype.api.apply(this,&nbsp;arguments);<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;ClassA&nbsp;为父类<br>//&nbsp;ClassB&nbsp;为子类<br><br>var&nbsp;b&nbsp;=&nbsp;new&nbsp;ClassB();<br>b.api();","addLink":"","date":"2016-01-07 15:13","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":9},{"addArticleTtitle":"正则表达式","classify":"javascript","addarticleContent":"正则表达式为标书字符串规则的表达式。下面为两个例子为在&nbsp;JavaScript&nbsp;中的使用，<br>/pattern/attrs<br>new&nbsp;RegExp(pattern,&nbsp;attrs)<br>锚点<br><br>锚点用于匹配一个位置，下列为常用的锚点<br>^&nbsp;起始的位置&nbsp;/^http/<br>$&nbsp;结尾的位置&nbsp;/&#92;.jpg$/<br>&#92;b&nbsp;单词边界<br>字符类<br><br>字符类用于匹配一类字符中的一个，下面为几个常用的例子，<br>[abc]&nbsp;可用于匹配&nbsp;a&nbsp;b&nbsp;还有&nbsp;c<br>[0-9]&nbsp;可用于匹配一个数字<br>[^0-9]&nbsp;可用于匹配一个非数字<br>[a-z]&nbsp;可用于匹配一个字母<br>.&nbsp;任意字符但换行符除外<br>元字符<br><br>元字符为具有特殊意义的字符。常见的有，<br>^,&nbsp;$,&nbsp;&#92;b<br>&#92;d&nbsp;用于匹配数字&nbsp;[0-9]<br>&#92;D&nbsp;用于匹配&nbsp;[^&#92;d]<br>&#92;s&nbsp;用于匹配空白符<br>&#92;S&nbsp;用于匹配非空白符&nbsp;[^&#92;s]<br>&#92;w&nbsp;用于匹配任意单词字符（例如程序中的变量字符）&nbsp;[A-Za-z0-9_]<br>&#92;W&nbsp;用于匹配非单词字符&nbsp;[^&#92;W]<br>量词<br><br>量词用于表现字符出现的次数。可用的连词如下，<br>{m,n}&nbsp;用于表示出现&nbsp;m&nbsp;到&nbsp;n&nbsp;次之间。<br>*&nbsp;用于表示出现&nbsp;0&nbsp;到无穷之间也就等同于&nbsp;{0,}<br>?&nbsp;用于表示出现&nbsp;0&nbsp;次到&nbsp;1&nbsp;次也等同于&nbsp;{0,1}<br>+&nbsp;用于表现出现&nbsp;1&nbsp;次以及一次以上也等同于&nbsp;{1,}<br>转移符<br><br>转义符需要在匹配的字符是元字符的时候使用。使用&nbsp;&#92;&nbsp;来进行转移即可。2<br><br>多选分支<br><br>多选分支用于表示或的概念。/thi(c|n)k/&nbsp;其又等同于&nbsp;/thi[cn]k/。其还可以用于匹配文件扩展名&nbsp;/&#92;.(png|jpg|jpeg|gif)$/&nbsp;。<br>常用方法<br><br>测试：regxObj.test(str)<br><br>其用于测试正则表达式与指定字符串是否匹配。<br>/123/.test(123);&nbsp;//&nbsp;true<br>/123/.test(111);&nbsp;//&nbsp;false<br>/123/.test(&quot;x123&quot;);&nbsp;//&nbsp;true<br>捕获<br><br>其用于保存所匹配到的字符串为后续开发所用。()&nbsp;可用于捕获，正则表达式再运行时会将其保存下来，(?:)&nbsp;则不予保存。<br>//&nbsp;str.match(regexp)<br>var&nbsp;url&nbsp;=&nbsp;&quot;http://www.google.com/query?test=li-xinyang#cool&quot;;<br>var&nbsp;reg&nbsp;=&nbsp;/(https?:)&#92;/&#92;/([^&#92;/]+)(&#92;/[^&#92;?]*)?(&#92;?[^#]*)?(#,*)?/;<br><br>var&nbsp;arr&nbsp;=&nbsp;url.match(reg);<br>var&nbsp;protocol&nbsp;=&nbsp;arr[1];<br>var&nbsp;host&nbsp;=&nbsp;arr[2];<br>var&nbsp;pathname&nbsp;=&nbsp;arr[3];<br>var&nbsp;search&nbsp;=&nbsp;arr[4];<br>var&nbsp;hash&nbsp;=&nbsp;arr[5];<br>搜索与替换<br><br>regexpObj.exec(str)&nbsp;可以提供更强大的检索，它可以提供更详尽的结果&nbsp;index&nbsp;也可以提供过程状态&nbsp;lastIndex。<br>str.replace(regex/substr,&nbsp;replacement)&nbsp;可以使用正则表达式来对字符串进行替换。","addLink":"","date":"2016-01-07 15:15","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":10}],"jquery":[{"addArticleTtitle":"特点：选择网页元素---模拟css选择元素","classify":"jquery","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;模拟css选择元素&lt;/title&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;src=&quot;jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;div1&quot;&nbsp;class=&quot;box&quot;&gt;div&lt;/div&gt;<br>&nbsp;&nbsp;&lt;span&nbsp;class=&quot;box&quot;&gt;span&lt;/span&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;div2&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;divdiv&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;pp&lt;/p&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#div1&quot;).css(&quot;background&quot;,&quot;red&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;div&quot;).css(&quot;background&quot;,&quot;green&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;.box&quot;).css(&quot;background&quot;,&quot;blue&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#div2&nbsp;p&quot;).css(&quot;background&quot;,&quot;red&quot;);<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>","addLink":"","date":"2016-01-06 23:07","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0}],"zepto":[],"git":[],"flex":[],"layout":[{"addArticleTtitle":"居中布局---实现父元素不定宽高、子元素水平居中的几种方法","classify":"layout","addarticleContent":"1.inline-block+text-align<br>特点：<br>&nbsp;&nbsp;兼容性好，给display:&nbsp;inline-block;做兼容（*display:inline;*zoom:1;）<br><br>后可以支持到IE6<br>实现方法：<br>&nbsp;&nbsp;.child1{display:&nbsp;inline-block;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.parent1{text-align:&nbsp;center;}<br><br>2.table+margin<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性：display:&nbsp;table&nbsp;IE8以上，如果想支持IE6、7可以把div换位table结<br><br>构<br>实现方法：<br>&nbsp;&nbsp;.child2{display:&nbsp;table;margin:&nbsp;0&nbsp;auto;&nbsp;background-color:&nbsp;black;}<br><br>3.absolute+transform&nbsp;<br>特点：<br>&nbsp;&nbsp;兼容性：transform&nbsp;IE9以上&nbsp;&nbsp;优点：设置position:&nbsp;absolute;的元素脱离文<br><br>档流，不影响其他子元素<br>实现方法：<br>&nbsp;&nbsp;.parent3{position:&nbsp;relative;}<br>&nbsp;&nbsp;.child3{position:&nbsp;absolute;left:&nbsp;50%;transform:translateX(-<br><br>50%);background-color:&nbsp;black;}<br><br>4.flex<br>特点：<br>&nbsp;&nbsp;兼容性：flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent4{display:&nbsp;flex;justify-content:center;}<br>&nbsp;&nbsp;.child4{background-color:&nbsp;black;}<br>","addLink":"<a href=&quot;./layout/demo1.html&quot;>以上实现方法Demo<a/>","date":"2016-01-05 00:14","author":"xxz","good":3,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"居中布局---实现父元素不定高度，子元素垂直居中的几种方法","classify":"layout","addarticleContent":"1.table-cell+vertical-align<br>特点：<br>&nbsp;&nbsp;兼容到IE8以上，如果想兼容IE6、7,把&nbsp;DIV改成table<br>实现方法：<br>&nbsp;&nbsp;.parent1{display:&nbsp;table-cell;vertical-align:&nbsp;middle;background-color:&nbsp;black;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child1{background-color:&nbsp;white;}&nbsp;<br><br>2.absolute+transform&nbsp;<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{position:&nbsp;relative;height:&nbsp;100px;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.child2{position:&nbsp;absolute;top:50%;&nbsp;transform:translateY(-50%);&nbsp;background-color:&nbsp;white;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;&nbsp;align-items:center;&nbsp;background-color:&nbsp;black;&nbsp;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child3{background-color:&nbsp;white;}<br>","addLink":"<a href=&quot;./layout/demo2.html&quot;>Demo<a/>","date":"2016-01-05 10:09","author":"xxz","good":1,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"居中布局---实现父元素不定宽高、子元素居中的几种方法","classify":"layout","addarticleContent":"1.inline-block+text-align+table-cell+vertical-align<br>特点：<br>&nbsp;&nbsp;兼容性好<br>实现方法：<br>&nbsp;&nbsp;.parent1{text-align:&nbsp;center;&nbsp;display:&nbsp;table-cell;vertical-align:&nbsp;middle;background-color:&nbsp;black;height:&nbsp;100px;width:&nbsp;100px;}<br>&nbsp;&nbsp;.child1{display:&nbsp;inline-block;&nbsp;background-color:&nbsp;white;}<br><br>2.absolute+transform<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{position:&nbsp;relative;height:&nbsp;100px;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.child2{position:&nbsp;absolute;top:50%;left:&nbsp;50%;&nbsp;transform:translate(-50%,-50%);&nbsp;background-color:&nbsp;white;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性：兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;justify-content:center;&nbsp;align-items:center;&nbsp;background-color:&nbsp;black;&nbsp;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child3{background-color:&nbsp;white;}","addLink":"<a href=&quot;./layout/demo3.html&quot;>Demo<a/>","date":"2016-01-05 10:19","author":"xxz","good":2,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"多列布局---实现一列定宽，一列自适应的几种方法","classify":"layout","addarticleContent":"1.float+margin<br>特点：<br>&nbsp;&nbsp;不足：当right中子元素有清除浮动时，会对布局有影响&nbsp;&nbsp;margin-right:&nbsp;-100px;兼容IE6<br>实现方法：<br>&nbsp;&nbsp;.left1{float:&nbsp;left;width:&nbsp;100px;&nbsp;background-color:&nbsp;#ccc;margin-right:&nbsp;-100px;}<br>&nbsp;&nbsp;.right1{margin-left:&nbsp;120px;&nbsp;background-color:&nbsp;#555;}<br><br>2.float+margin+(fix)<br>特点：&nbsp;<br>&nbsp;&nbsp;第一个方案的改进，right中有浮动子元素，不影响。兼容IE6<br>实现方法：<br>&nbsp;&nbsp;.left2{float:&nbsp;left;width:&nbsp;100px;position:&nbsp;relative;&nbsp;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right-fix{float:&nbsp;right;width:&nbsp;100%;margin-left:-100px;&nbsp;}<br>&nbsp;&nbsp;.right2{margin-left:&nbsp;120px;&nbsp;background-color:&nbsp;#555;}<br><br>3.float+hidden<br>特点：<br>&nbsp;&nbsp;不支持IE6<br>实现方法：<br>&nbsp;&nbsp;.left3{float:&nbsp;left;width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right3{overflow:&nbsp;hidden;&nbsp;background-color:&nbsp;#555;}<br><br>4.table<br>特点：<br>&nbsp;&nbsp;<br>实现方法：<br>&nbsp;&nbsp;.parent4{display:&nbsp;table;width:&nbsp;100%;}<br>&nbsp;&nbsp;.left4,.right4{display:&nbsp;table-cell;background-color:&nbsp;#555;}<br>&nbsp;&nbsp;.left4{width:&nbsp;100px;padding-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br><br>5.flex<br>特点：<br>&nbsp;&nbsp;兼容性：兼容性差，flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent5{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left5{width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right5{flex:1;background-color:&nbsp;#555;}<br><br>6.两列定宽+一列自适应，方法跟上面类似<br>float+margin实现方法：<br>&nbsp;&nbsp;.left6,.middle6{float:&nbsp;left;width:&nbsp;100px;&nbsp;background-color:&nbsp;#ccc;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.middle6{margin-right:&nbsp;-100px;}<br>&nbsp;&nbsp;.right6{margin-left:&nbsp;240px;&nbsp;background-color:&nbsp;#555;}<br><br><br><br><br>","addLink":"<a href=&quot;./layout/demo4.html&quot;>Demo<a/>","date":"2016-01-05 10:53","author":"xxz","good":2,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"多列布局---实现一列不定宽，一列自适应的几种方法","classify":"layout","addarticleContent":"1.float+overflow<br>特点：<br>&nbsp;&nbsp;兼容性好<br>实现方法：<br>&nbsp;&nbsp;.left1{float:&nbsp;left;background-color:&nbsp;#ddd;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.right1{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>2.table<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性好&nbsp;&nbsp;&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{display:&nbsp;table;width:&nbsp;100%;}<br>&nbsp;&nbsp;.left2,.right2{display:&nbsp;table-cell;}<br>&nbsp;&nbsp;.left2{width:&nbsp;0.1%;padding-right:&nbsp;20px;&nbsp;background-color:&nbsp;#ddd;}<br>&nbsp;&nbsp;.right2{background-color:&nbsp;#555;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性差<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left3{margin-right:&nbsp;20px;background-color:&nbsp;#ddd;}<br>&nbsp;&nbsp;.right3{flex:1;background-color:&nbsp;#555;}&nbsp;&nbsp;<br><br>4.两列不定宽+自适应<br>特点：<br>&nbsp;&nbsp;&nbsp;新增加的列和左列样式一样&nbsp;<br>实现方法：<br>&nbsp;&nbsp;.left4,.middle4{float:&nbsp;left;background-color:&nbsp;#ddd;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.right4{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>","addLink":"<a href=&quot;./layout/demo5.html&quot;>Demo<a/>","date":"2016-01-05 14:10","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4},{"addArticleTtitle":"多列等分布局---实现父元素不定宽度，子元素多列等分布局的几种方法","classify":"layout","addarticleContent":"1.float<br>特点：<br>&nbsp;&nbsp;兼容性好&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent1{margin-left:&nbsp;-20px;}<br>&nbsp;&nbsp;.column{float:&nbsp;left;width:&nbsp;25%;padding-left:&nbsp;20px;box-sizing:border-box;}<br>&nbsp;&nbsp;.div1&nbsp;p{background-color:&nbsp;red;}<br>&nbsp;&nbsp;.div2&nbsp;p{background-color:&nbsp;green;}<br>&nbsp;&nbsp;.div3&nbsp;p{background-color:&nbsp;blue;}<br>&nbsp;&nbsp;.div4&nbsp;p{background-color:&nbsp;black;}<br><br>2.table<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性好&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent-fix{margin-left:&nbsp;-20px;}<br>&nbsp;&nbsp;.parent2{display:&nbsp;table;width:&nbsp;100%;table-layout:&nbsp;fixed;}<br>&nbsp;&nbsp;.column2{display:&nbsp;table-cell;padding-left:&nbsp;20px;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性：flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;}<br>&nbsp;&nbsp;.column3{flex:1;}<br>&nbsp;&nbsp;.column3+.column3{margin-left:&nbsp;20px;}<br><br>","addLink":"<a href=&quot;./layout/demo6.html&quot;>Demo<a/>","date":"2016-01-05 14:23","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":5},{"addArticleTtitle":"多列等高布局---实现子元素多列等高布局的几种方法","classify":"layout","addarticleContent":"1.table<br>实现方法：<br>&nbsp;&nbsp;.parent1{display:&nbsp;table;width:&nbsp;100%;table-layout:&nbsp;fixed;}<br>&nbsp;&nbsp;.left1,.right1{display:&nbsp;table-cell;background-color:&nbsp;#555;}<br>&nbsp;&nbsp;.left1{width:&nbsp;100px;padding-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br><br>2.flex<br>实现方法：<br>&nbsp;&nbsp;.parent2{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left2{width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right2{flex:1;background-color:&nbsp;#555;}<br><br>3.float<br>实现方法：<br>&nbsp;&nbsp;.parent3{overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;.left3,.right3{padding-bottom:&nbsp;9999px;margin-bottom:&nbsp;-9999px;}<br>&nbsp;&nbsp;.left3{float:&nbsp;left;&nbsp;width:&nbsp;100px;&nbsp;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right3{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>","addLink":"<a href=&quot;./layout/demo7.html&quot;>Demo<a/>","date":"2016-01-05 14:42","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":6},{"addArticleTtitle":"全屏布局---position实现方案","classify":"layout","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;水平居中&lt;/title&gt;<br>&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*兼容性:IE6不兼容，可以用hash*/&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;html,body,.parent{height:&nbsp;100%;overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.top{position:&nbsp;absolute;top:0;left:&nbsp;0;right:&nbsp;0;height:&nbsp;100px;background-color:&nbsp;#222;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.left{position:&nbsp;absolute;top:&nbsp;100px;left:&nbsp;0;bottom:&nbsp;50px;width:&nbsp;200px;background-color:&nbsp;#444;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.right{position:&nbsp;absolute;top:&nbsp;100px;bottom:&nbsp;50px;left:&nbsp;200px;right:&nbsp;0;background-color:&nbsp;#666;overflow:&nbsp;auto;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.bottom{position:&nbsp;absolute;left:&nbsp;0;right:&nbsp;0;bottom:&nbsp;0;height:&nbsp;50px;background-color:&nbsp;#888;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.inner{min-height:&nbsp;1000px;}<br>&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;&nbsp;&nbsp;<br>&nbsp;&nbsp;&lt;div&nbsp;class=&quot;parent&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;top&quot;&gt;top&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;left&quot;&gt;left&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;right&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;inner&quot;&gt;inner&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"<a href=&quot;./layout/demo8.html&quot;>Demo<a/>","date":"2016-01-05 15:21","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":7},{"addArticleTtitle":"全屏布局---flex方案","classify":"layout","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;水平居中&lt;/title&gt;<br>&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*兼容性IE9以下不兼容，可以用hash*/&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;html,body,.parent{height:&nbsp;100%;overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.parent{display:&nbsp;flex;flex-direction:column;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.top{height:&nbsp;100px;background-color:&nbsp;#222;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.bottom{height:&nbsp;50px;background-color:&nbsp;#888;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.middle{flex:1;display:&nbsp;flex;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.left{width:&nbsp;200px;background-color:&nbsp;#444;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.right{flex:1;background-color:&nbsp;#666;overflow:&nbsp;auto;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.inner{min-height:&nbsp;1000px;}<br>&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;&nbsp;&nbsp;<br>&nbsp;&nbsp;&lt;div&nbsp;class=&quot;parent&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;top&quot;&gt;top&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;middle&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;left&quot;&gt;left&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;right&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;inner&quot;&gt;inner&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"<a href=&quot;./layout/demo9.html&quot;>Demo<a/>","date":"2016-01-05 15:43","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":8}],"buildWebsite":[],"resources":[],"encourage":[{"addArticleTtitle":"穷人思维","classify":"encourage","addarticleContent":"穷人为什么穷？无论中国美国，主流对此都有种没明说但心照不宣的观点：因为他们懒、酗酒、赌博……曾有条被疯转微博，一位妈妈卖盗版光盘被城管追赶跳入水中，当时，一位女博士点评说北京好月嫂都月入过万了，何必要选这么苦情的生活方式？此微博后被证实为谣言，但抱小孩卖毛片的中年女性的确曾是北京一景。中产阶级的眼界不是穷人的眼界，正如本书作者也苦苦思索，劳工为何不要求加薪，或寻找更高薪工作，甚至组织工会，维护自身权益？答案是，越贫困，越无力。<br><br>畅销书女作家芭芭拉•艾伦瑞克进入美国底层，体验在时薪6~8美元下，辛勤工作是否能生活下去，她的答案是：不能。除非你跟别人合租房子，或者打两份工。<br><br>她在三个城市当过餐厅服务员、旅馆服务员、清洁女工、看护护理及沃尔玛的售货员，她努力工作，也努力尝试收支平衡，为此她曾勇猛打两份工，一周工作七天，每周还能在打工的看护之家免费吃两三餐，这些都帮助了她。但到旅游旺季，房租将上涨三倍，身为女佣的她，只能再次破产。<br><br>作者有穷人没有的优势：在前面的几十年，她有高于一般水平的医疗照顾、良好饮食、她常年练举重，身体“是不寻常的结实”。并且，就这个实验来说，她作弊了，她给自己租车，用信用卡付费；每到一个城市，她备有一千多美元的起头基金；她开了外挂，却仍然没有打赢。<br><br>我一度觉得这本《我在底层的生活——当专栏作家化身女服务员》是来黑美国的，因为美剧、好莱坞电影不曾说过，还有这么个美国存在：低薪白人劳工，三四人挤在一个小房间里生活；怀孕的清洁工摔伤也不敢请假，一天没薪水，第二天就没钱买杂物；沃尔玛的员工付不起房租，住在收容所；背着十几磅重的吸尘器吸尘、跪在地上擦地，女佣们话题热点是哪个牌子的止痛药最好用；没有健康保险，因为太贵，这意味如果生病，你要比别人多花钱。<br><br>女招待考虑搬入每晚40~60美金的汽车旅馆（她每天才挣四十多美金），作家惊讶问她怎么想的，同事像看笨蛋一样看着女作家：我上哪儿弄一个月的租金跟押金去租公寓？而女作家，之所以能租到月租500的公寓，是拜她从自己的现实世界带来的1000美金付押金及头一月租金所赐。<br><br>不断上涨的房租是穷人的噩梦，作者发现，穷人越来越多住在汽车旅馆。后者可以按天结账，犹如鸦片，诱惑现金紧张的穷人陷进去，微薄的积蓄被烧光，更加不可能有钱租公寓。作者发现有两个男人轮流睡一张床，一个人睡觉时另一个在车上打盹。而我忽然明白卡佛小说里的那些穷人，那些卖掉农庄，揣着全部积蓄进城找工作的一家人，在一间汽车旅馆里住下去，某一天又一声不吭地走掉——他们就是汽车旅馆鸦片的受害者，他们不是走掉，是掉入地狱的更下一层。<br><br>作者认为，穷人破产，因为薪水太低，而房租太贵。这一点中国读者想必也深有共鸣。当房租犹如奥运会田径赛道上的博尔特般一路狂奔，穷人只能不停搬家，搬入一间又一间不带家具的公寓，锅碗瓢勺家具又是一笔钱；或入住汽车旅馆胶囊公寓，只剩一张床那么大小的房间，你证悟到睡觉和死亡何其相似。而无法做饭的后果，是你要花更多钱在吃饭上。最终，她，还有我们，均不难发现一条荒谬定律，如果你穷，你就得比不穷的人花更多的钱，才能活下去。这不是美剧中的美国，但它并不陌生。全世界的金钱流动法则相同：钱生育钱，贫困生育贫困。<br><br>作者有强烈的政治立场，而她真实凶残的打工经历平衡了她的倾向。说到底这并不是一本坐在空调房间凭政治理念写出来的书，她一天工作九小时，住在没有纱窗空调电扇的旅馆，因为锁不上门，不得不合衣而睡。而她的工作，是在35度高温下打扫“有五套浴厕的房子”，撅起屁股，跪于大理石地板，用抹布擦过每一寸地面，擦干净整排玻璃门上的每一个指纹，而且遵循女仆美德，不在主人家喝水；是每周六日服侍近四十名阿兹海默症老年病人吃三餐、清理餐具、擦桌吸地，“我只能全力跟上洗碗机吐出盘子和脏盘子涌进来的速度”；午饭是高速路上停车上厕所时的五分钟；上厕所要打卡。即使这样，仍有几次，她不得不求助于慈善机构，后者提供的免费食物，对没有冰箱的穷人来说并不实用；而一个“平价”通铺床位，每晚也要19美元，慈善机构的小姐建议她“搬进收容所”，以便存到足够的钱交第一个月的房租和押金。<br><br>她将自己奉献为小白鼠，而我们得以观察，贫穷是如何侵蚀一个人的精神。<br><br>作者自己能从时薪5.15美元的餐厅跳槽至时薪7.5，因为她有车，可四处应聘，上班范围更有弹性。她的同事若换工作，交通是大问题，甚至需更换住处。穷人比富人更保守，更不愿意改变，就像奴隶比奴隶主更保守。物质上的窘迫，使他们承受不起改变，冒不起一周没工作的风险。那意味着他们会挨饿，从现在的房子被赶出去，掉到地狱更可怕的下一层。<br><br>但作者在找工作时呈现的状态，她的精神活力、她的勇气才是她和她的同事们之最大区别。同样被羞辱及盘剥，她跃跃欲试组织工会，她的同事却只希望偶尔请一天假，第二天还能有钱买点杂货。这一部分也可用来解释教育的重要所在，作者隐瞒了博士学位，却拿不走自己的思维。精神的贫困是穷人解脱贫穷的最大障碍。<br><br>两个多月的底层生活后，作者的背伤复发、全身起了疱疹，并且，她身为“民主社会主义者”“女性主义者”，对底层人民抱有的博爱之情，慢慢变淡，代之以麻木，甚至仇恨。一个身高不到1米4的女售货员跟她起了纠纷，她看着后者踩着梯子才够得着高处衣服，一股恶意涌上，“希望能看到她啪地一声摔到地上”；而残疾员工忧伤地坐在轮椅里，她看到第一感觉是“至少你还坐着。”——她忽然意识到，如果自己的父亲没有脱离矿工身份，如果去掉自己的教育程度，也许自己就是现在这样：苛刻、狡猾、满怀怨恨。她没有强调，但读者可以自行总结：穷人仇恨穷人。这不是什么新鲜事，却让人难以面对——穷人不都是善良的么？法国作家塞利纳在他1935年的《长夜行》里写道：“我们之间有五个法郎的隔阂，就足以产生恨，希望他们统统死光。”“五个法郎”，可以换成小升初的一个名额、一个工作机会，甚至仅仅是高峰期公车上的一个座位、它仍然“足以产生恨，希望他们统统死光”。不信你看北京上海贴吧里，那些铺天盖地的“外地人滚出去”。<br><br>贫穷是一种专制，它培养自己的奴隶。当你习惯于被剥夺自尊，习惯于被当做一个小偷/懒虫/酒鬼对待，当你常年生活在社会边缘、你存在的意义被抹去，宛如你根本不存在。而打开电视——无论中美——都是老板，男女白领，即使是喊着奋斗的北漂，住的也是你这辈子都住不上的三室两厅，它会让你以为“只有我自己才是不正常的”。精神上的专制就此完成。穷奴大抵上有两种，一种借仇恨别人获得自己高人一等的存在价值感，一种则接受自己是最弱的，就像那些被迫在自己的社会体系中落入屈从位置的沮丧的猴子，它们变得焦虑而退缩，不再挣扎，甚至对自卫也毫无兴趣。<br><br>借助铁丝和剪刀，能培养出自然界不存在的侏儒松，定型成功，即使松开捆扎铁丝，那些松树也固定在扭曲的姿态。同样，精神上的专制，令你在内心相信自己就是个侏儒。芭芭拉•艾伦瑞克细腻雄辩地写出精神的毁灭之路，我却在其中看到熟悉的人脸，作为经历了大饥荒的幸存者的后代，她绘出的精神贫穷者的肖像我并不陌生。那些脸在我们周围漫游，如恒河河沙，又似幽灵。<br><br>怎么办？也许没有一个药方可以取消贫困，但至少下次看到一个走投无路的穷人，在指责他懒惰、酗酒之前还可以多想一秒钟；在大吼“外地人滚出去”之前，还可以思考一下这仇恨从何而来；即使我们的初始值是一棵被剪成侏儒的盆景，也可以在松绑后尝试站起来，笔直地站成一棵树。<br><br>开外挂的女作家，无论如何也做不到收支平衡。但实在要流浪街头时，她可以挖出自己的信用卡，大吃一顿。可是现实中真正的穷人，她的同事们呢？<br><br>我想起《没有人给他写信的上校》的最后一段：绝望的妻子揪着上校的领子，问这些天我们吃什么？<br><br>“上校活了七十五岁——用他一生中分分秒秒积累起来的七十五岁——才到了这个关头。他自觉心灵清透，坦坦荡荡，什么事也难不住他。他说：<br><br>‘吃屎’。”","date":"2016-01-04 20:15","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"行走，回首","classify":"encourage","addarticleContent":"&nbsp;&nbsp;人生路，漫漫而行。一阵秋雨洒落，驻足回首，秋叶纷飞。踩过一叠厚厚堆积的落叶，仿佛就像生命中一堆纠缠不清的人和事，渐渐遗忘，渐渐随风。<br>　　<br>　　往事过眼，便是回忆。你的呢喃，清晰在耳畔。但我的眼眸，已失去了你的色彩。人生这条路，走的越远，失去的就越多，想抓也抓不住，想停也只能一直走下去。<br>　　<br>　　昨日的温存，已成了今日的怀恋。依稀记得梦中的清风随了夜，划在心底的寒，淡淡的痛。你说的话语，凋零在上一个叶落，满地的残朵。我却傻傻祈求，时光捡起，成为我心中不忘的那朵。<br>　　<br>　　转眼间秋风舞动，一声呓语飘落清冷，像一场邂逅，一次回眸。记忆在残风中流逝，那样匆匆，那样落寞，连呼喊都来不及停留，便消散在天边不见。书刻思念的篇章，空白，黯淡，碎散一地无法拼凑。寥寥秋落，回忆是那么的无助，那么令人叹息，苍白的嘴唇自嘲苦笑，连握笔的手指都那么的无力，消瘦。<br>　　<br>　　告诉我什么是孤独？我们还会再见吗？最后的旅程擦肩而过，时光带走了一切，但我只求留下最后的思念。<br>　　<br>　　醉念红尘，抚桥流水。岁月铸就的青石板路，寸草难生，如同霜寒舞天的夜月，哀叹了生命的流逝。一曲残星滑落，蓦然回首。这条路，孤独的没有任何生命。<br>　　<br>　　时间匆忙，我们来不及休息。风景匆匆而来又匆匆而去，看到了风景却落下了脚程。人的使命就是在孤独寂寞中寻索，可人自己，却想看看尘世的美艳。这一世为使命，还是为自己？<br>　　<br>　　又是那条无人的街道，一个人漫步远去，莫名的情绪，莫名在颤动。眼神茫然地注视着前方，寒风带起的落叶，如思念般那么无助那么遥远，像根丝线般，缠绕着你绷紧的心弦，连雨落到脸上，还依旧倔强地走着。<br>　　<br>　　那些人再也不回来，那片天最后模糊了色彩。我们都是孤独的，都在黑夜中寻找被云雾遮掩的星空，却看到了流星失落的雨夜。期盼着刺目的阳光，却在逆光的地方，看着自己沉默的倒影。以为世界会关注自己，转过身看着消失的彼岸，却不得不为世界而哭泣。<br>　　<br>　　一条沉默的路，一个狼狈的背影。彷徨，无助。孤独的感觉似幽风徘徊在耳边，拉动了最后的心弦，凄厉地惨叫。奔跑，跌撞。无人的世界，无人的寂静。回首，期盼的眼眸望不到熟悉的轻语;行走，孤独的身影望不到漆黑的彼方。泪断的雨线，渐渐模糊了记忆的错觉……<br>　　<br>　　虚无的世界，虚无的路，孤独的人，孤独地走。耳边飘来了熟悉的话语:不是所有委屈都可以呐喊，不是所有心事都可以述说，有些事只有自己能做，别人帮不了你。这条路，注定是寂寞的。回首，充满了期待却是更残酷的等待。<br>　　<br>　　秋季，等待了一地叶落，像那些荒芜的岁月，像是旅人，望着沉默的斑驳古路，带着落寞，行走，回首……","date":"2016-01-04 20:24","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"一直努力，直至成功","classify":"encourage","addarticleContent":"&nbsp;&nbsp;所谓理想就是把我们的愿景放在一个价值观的尺度上度量，然后决定人生往哪里走？去哪里？走多远？和谁走？<br>　　<br>　　从民营企业角度看，我做生意是被迫的一个开始，但习惯于用自己的价值观来引导我做判断，因此一直把丧事当喜事办。因为我总觉得自己要去心中期待的某个地方，这时我会经常想起鲁迅的一个小说《过客》。这个过客腿脚不好，他一直不停地走，有天他到一个茶水摊和一个老人和小孩对话，询问前方的路该怎么走？老人告诉他：过了一个坟地，再往前一拐，差不多就到了。他又问那小孩儿，小孩告诉他，你看见那片鲜花了，再往前走就到了。同样一个地方，老人眼里看见的是坟墓，而年轻人眼里看见的是鲜花，可见视野和心态截然不同。而这个过客心里只有一句话，就是——我要走，我要走，我要走。<br>　　<br>　　我在创业和折腾的过程中经常会想起这个故事，我心里有两个地方可以去，一个是坟墓，一个是鲜花，不管是哪个，当下就是“我要走”这样一个状态，这种想法陪伴我，从开始很被动的创业，甚至到后来哪怕负债累累，人生已经到了最绝望的时候，始终没有放弃，仍然把丧事当喜事办，因为我意识到理想是希望的风，是黑暗尽头的那道光，有了它，我能驱走黑暗与恐惧，虽然不知道前方有多远，但是依然有坚持下去的力量。<br>　　<br>　　50岁生日前夕，我决定送给自己的一份特别、有纪念意义的生日礼物，去台湾骑自行车环岛旅行。那时正值酷暑，我每天骑行80多公里，总共环岛5500公里，路上看到一个老太太比我还猛，她磕头环岛。我问她，您怎么走？她说，我就拜拜拜拜，一直走没停过。我很是敬佩，送给她一瓶水，她接着继续走。真的很难想象一个瘦老太太单薄的身躯下，哪来这么大能量？只有一个答案：她心里有佛，有信念，有理想和快乐的天堂，所以才有如此的毅力和能量，不停地拜下去，也许有一天膝盖流血她却浑然不知，也许有一天她会劳累晕眩，但她心里追求的天堂不会坠落。<br>　　<br>　　我再说一个崔永元的故事，原来我们俩很不搭界，相信他对“黑心开发商”也抱有道德上的不满，而在央视看到的小崔似乎也有点装，老讲长征、理想什么的，后来我听一个朋友介绍说他在做一个口述历史的节目。某天，我们在一家酒店中见面，香格里拉见面，他送我一些小人书和他做的口述史的资料，我才发现原来屏幕以外的小崔很了不起。<br>　　<br>　　有个夏天我把这个故事讲给王石，带着王石去了小崔的工作室，到了工作室以后，我们看到崔永元花了十几、二十年的时间一直在做一件事情，就是记录当下中国人的状态，而且默默无闻地到处筹资。这让我看到了一个有责任感的男人，这个男人没事儿找事儿，把别人事儿当自己事儿，自己的事儿不当回事儿，自己都快抑郁了，还是操心民族的历史是不是能记录下来，着实感动了我，也感动了王石。后来，我们成了好朋友，也参与到了口述历史的项目中，共同记录这个时代以及这个时代中人们的想法和事迹。<br>　　<br>　　古人讲：势必有坚韧不拔之志，才有坚韧不拔之力。志向是带来毅力的事儿，就像磕头环岛的老太太，如果她心里没有佛，怎会有毅力去磕头环岛？毅力依附于信念和理想之上，不是欺骗也不是虚妄，理想除了让我们获得能量、财富外，还会在我们遭遇痛苦和不幸时支撑我们活下去。否则，当我们遇到巨大的困难时，很可能会选择逃避，甚至会在不为人知的时候选择死亡。在这个纷繁、价值观多元的时代，希望我们对“理想”这个词不再拒绝，不再隔膜，不再离它而去，而是从脚下做起，一天天努力，直到成功为止。","date":"2016-01-04 20:26","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2}],"noCategory":[],"dom":[{"addArticleTtitle":"文档树","classify":"dom","addarticleContent":"Document&nbsp;Object&nbsp;Model&nbsp;(DOM)&nbsp;为文档对象模型，&nbsp;它使用对象的表示方式来表示对应的文档结构及其中的内容。<br><br>下面为一个样例&nbsp;p&nbsp;元素在文档中的对象所包含的所有属性。<br>&lt;p&nbsp;id=&quot;target&quot;&gt;Hello,&nbsp;World!&lt;/p&gt;<br>p#targetaccessKey:&nbsp;&quot;&quot;<br>align:&nbsp;&quot;&quot;<br>attributes:&nbsp;Named<br>NodeMapbaseURI:&nbsp;&quot;&quot;<br>childElementCount:&nbsp;0<br>childNodes:&nbsp;NodeList[1]<br>children:&nbsp;HTMLCollection[0]<br>classList:&nbsp;DOMTokenList[0]<br>className:&nbsp;&quot;&quot;<br>clientHeight:&nbsp;0<br>clientLeft:&nbsp;0<br>clientTop:&nbsp;0<br>clientWidth:&nbsp;0<br>contentEditable:&nbsp;&quot;inherit&quot;<br>dataset:&nbsp;DOM<br>StringMapdir:&nbsp;&quot;&quot;<br>draggable:&nbsp;false<br>firstChild:&nbsp;text<br>firstElementChild:&nbsp;null<br>hidden:&nbsp;false<br>id:&nbsp;&quot;target&quot;<br>innerHTML:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>innerText:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>isContentEditable:&nbsp;false<br>lang:&nbsp;&quot;&quot;<br>lastChild:&nbsp;text<br>lastElementChild:&nbsp;null<br>localName:&nbsp;&quot;p&quot;<br>namespaceURI:&nbsp;&quot;http://www.w3.org/1999/xhtml&quot;<br>nextElementSibling:&nbsp;null<br>nextSibling:&nbsp;null<br>nodeName:&nbsp;&quot;P&quot;<br>nodeType:&nbsp;1<br>nodeValue:&nbsp;null<br>offsetHeight:&nbsp;0<br>offsetLeft:&nbsp;0<br>offsetParent:&nbsp;null<br>offsetTop:&nbsp;0<br>offsetWidth:&nbsp;0<br>onabort:&nbsp;null<br>onautocomplete:&nbsp;null<br>onautocompleteerror:&nbsp;null<br>onbeforecopy:&nbsp;null<br>onbeforecut:&nbsp;null<br>onbeforepaste:&nbsp;null<br>onblur:&nbsp;null<br>oncancel:&nbsp;null<br>oncanplay:&nbsp;null<br>oncanplaythrough:&nbsp;null<br>onchange:&nbsp;null<br>onclick:&nbsp;null<br>onclose:&nbsp;null<br>oncontextmenu:&nbsp;null<br>oncopy:&nbsp;null<br>oncuechange:&nbsp;null<br>oncut:&nbsp;null<br>ondblclick:&nbsp;null<br>ondrag:&nbsp;null<br>ondragend:&nbsp;null<br>ondragenter:&nbsp;null<br>ondragleave:&nbsp;null<br>ondragover:&nbsp;null<br>ondragstart:&nbsp;null<br>ondrop:&nbsp;null<br>ondurationchange:&nbsp;null<br>onemptied:&nbsp;null<br>onended:&nbsp;null<br>onerror:&nbsp;null<br>onfocus:&nbsp;null<br>oninput:&nbsp;null<br>oninvalid:&nbsp;null<br>onkeydown:&nbsp;null<br>onkeypress:&nbsp;null<br>onkeyup:&nbsp;null<br>onload:&nbsp;null<br>onloadeddata:&nbsp;null<br>onloadedmetadata:&nbsp;null<br>onloadstart:&nbsp;null<br>onmousedown:&nbsp;null<br>onmouseenter:&nbsp;null<br>onmouseleave:&nbsp;null<br>onmousemove:&nbsp;null<br>onmouseout:&nbsp;null<br>onmouseover:&nbsp;null<br>onmouseup:&nbsp;null<br>onmousewheel:&nbsp;null<br>onpaste:&nbsp;null<br>onpause:&nbsp;null<br>onplay:&nbsp;null<br>onplaying:&nbsp;null<br>onprogress:&nbsp;null<br>onratechange:&nbsp;null<br>onreset:&nbsp;null<br>onresize:&nbsp;null<br>onscroll:&nbsp;null<br>onsearch:&nbsp;null<br>onseeked:&nbsp;null<br>onseeking:&nbsp;null<br>onselect:&nbsp;null<br>onselectstart:&nbsp;null<br>onshow:&nbsp;null<br>onstalled:&nbsp;null<br>onsubmit:&nbsp;null<br>onsuspend:&nbsp;null<br>ontimeupdate:&nbsp;null<br>ontoggle:&nbsp;null<br>onvolumechange:&nbsp;null<br>onwaiting:&nbsp;null<br>onwebkitfullscreenchange:&nbsp;null<br>onwebkitfullscreenerror:&nbsp;null<br>onwheel:&nbsp;null<br>outerHTML:&nbsp;&quot;&lt;p&nbsp;id=&quot;target&quot;&gt;Hello,&nbsp;World!&lt;/p&gt;&quot;<br>outerText:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>ownerDocument:&nbsp;document<br>parentElement:&nbsp;null<br>parentNode:&nbsp;null<br>prefix:&nbsp;null<br>previousElementSibling:&nbsp;null<br>previousSibling:&nbsp;null<br>scrollHeight:&nbsp;0<br>scrollLeft:&nbsp;0<br>scrollTop:&nbsp;0<br>scrollWidth:&nbsp;0<br>shadowRoot:&nbsp;null<br>spellcheck:&nbsp;true<br>style:&nbsp;CSSStyle<br>DeclarationtabIndex:&nbsp;-1<br>tagName:&nbsp;&quot;P&quot;<br>textContent:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>title:&nbsp;&quot;&quot;<br>translate:&nbsp;true<br>webkitdropzone:&nbsp;&quot;&quot;<br>__proto__:&nbsp;HTMLParagraphElement<br><br>通过使用&nbsp;DOM&nbsp;提供的&nbsp;API&nbsp;(Application&nbsp;Program&nbsp;Interface)&nbsp;可以动态的修改节点（node），也就是对&nbsp;DOM&nbsp;树的直接操作。&nbsp;浏览器中通过使用&nbsp;JavaScript&nbsp;来实现对于&nbsp;DOM&nbsp;树的改动。<br><br>DOM&nbsp;包含<br><br>DOM&nbsp;Core<br>DOM&nbsp;HTML<br>DOM&nbsp;Style<br>DOM&nbsp;Event<br><br>HTML&nbsp;转换&nbsp;DOM&nbsp;树<br><br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&nbsp;&nbsp;&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;My&nbsp;title&lt;/title&gt;<br>&nbsp;&nbsp;&lt;/head&gt;<br>&nbsp;&nbsp;&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href=&quot;&quot;&gt;My&nbsp;Link&lt;/a&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;My&nbsp;header&lt;/h1&gt;<br>&nbsp;&nbsp;&lt;/body&gt;<br>&lt;/html&gt;<br><br><br>节点遍历<br><br>在元素节点中提取自己所需的节点，并予以操作。<br>//&nbsp;Document.getElementsByTagName()<br>//&nbsp;更具标签名找到目标节点的集合，此例中为&nbsp;&lt;h1&gt;My&nbsp;header&lt;/h1&gt;<br>var&nbsp;node&nbsp;=&nbsp;document.getElementsByTagName(&quot;h1&quot;)[0];<br><br>//&nbsp;Node.parentNode;<br>//&nbsp;获得目标节点的父节点，此例中为&nbsp;body&nbsp;元素<br>node.parentNode;<br><br>//&nbsp;Node.firstChild<br>//&nbsp;获得目标节点的第一个子节点，此例中为&nbsp;&quot;My&nbsp;header&quot;<br>node.firstChild;<br><br>//&nbsp;Node.lastChild<br>//&nbsp;获得目标节点的最后一个子节点，此例中为&nbsp;&quot;My&nbsp;header&quot;<br>node.lastChild;<br><br>//&nbsp;Node.previousSibling;<br>//&nbsp;获得目标节点的前一个相邻节点<br>node.previousSibling;<br><br>//&nbsp;Node.nextSibling;<br>//&nbsp;获得目标节点的下一个相邻节点<br>node.nextSibling;<br><br>节点类型<br><br>常用节点类型<br>ELEMENT_NODE&nbsp;可使用&nbsp;Document.createElement(&quot;elementName&quot;);&nbsp;创建<br>TEXT_NODE&nbsp;可使用&nbsp;Document.createTextNode(&quot;Text&nbsp;Value&quot;);&nbsp;创建<br><br>不常用节点类型<br>COMMENT_NODE<br>DOCUMENT_TYPE_NODE<br><br>不同节点对应的NodeType类型<br>此值可以通过&nbsp;Node.nodeType&nbsp;来获取。<br><br>节点编号&nbsp;&nbsp;节点名称<br>1&nbsp;&nbsp;Element<br>2&nbsp;&nbsp;Attribute<br>3&nbsp;&nbsp;Text<br>4&nbsp;&nbsp;CDATA&nbsp;Section<br>5&nbsp;&nbsp;Entity&nbsp;Reference<br>6&nbsp;&nbsp;Entity<br>7&nbsp;&nbsp;Processing&nbsp;Instrucion<br>8&nbsp;&nbsp;Comment<br>9&nbsp;&nbsp;Document<br>10&nbsp;&nbsp;Document&nbsp;Type<br>11&nbsp;&nbsp;Document&nbsp;Fragment<br>12&nbsp;&nbsp;Notation<br><br>NOTE：此处需要清楚节点和元素的区别。我们平常说的元素&nbsp;其实指的是节点中得元素节点，所以说节点包含元素，节点还包括文本节点、实体节点等。<br><br>元素遍历<br><br>元素节点符合&nbsp;HTML&nbsp;DOM&nbsp;树规则，所以它与&nbsp;DOM&nbsp;中存在的节点相似。<br>&lt;p&gt;<br>&nbsp;&nbsp;Hello,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;em&gt;Xinyang&lt;/em&gt;!<br>&nbsp;&nbsp;回到<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主页<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;<br>&nbsp;&nbsp;。<br>&lt;/p&gt;<br>//&nbsp;在选取元素节点后<br><br>p.firstElementChild;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;em&gt;Xinyang&lt;/em&gt;<br>p.lastElementChild;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;主页&lt;/a&gt;<br><br>em.nextElementSibling;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;主页&lt;/a&gt;<br>em.previousElementSibling;&nbsp;//&nbsp;&quot;Hello,&quot;","addLink":"","date":"2016-01-07 18:27","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"节点操作","classify":"dom","addarticleContent":"因为&nbsp;DOM&nbsp;的存在，这使我们可以通过&nbsp;JavaScript&nbsp;来获取、创建、修改、或删除节点。<br><br>NOTE：下面提供的例子中的&nbsp;element&nbsp;均为元素节点。<br><br>1、获取节点<br><br>父子关系<br><br>element.parentNode<br>element.firstChild/element.lastChild<br>element.childNodes/element.children<br><br>兄弟关系<br><br>element.previousSibling/element.nextSibling<br>element.previousElementSibling/element.nextElementSibling<br><br>通过节点直接的关系获取节点会导致代码维护性大大降低（节点之间的关系变化会直接影响到获取节点），而通过接口则可以有效的解决此问题。<br><br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;ELEMENT_NODE&nbsp;&&nbsp;TEXT_NODE&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;ul&nbsp;id=&quot;ul&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;First&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Second&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Third&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Fourth&lt;/li&gt;<br>&nbsp;&nbsp;&lt;/ul&gt;<br>&nbsp;&nbsp;&lt;p&gt;Hello&lt;/p&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;ulNode&nbsp;=&nbsp;document.getElementsByTagName(&quot;ul&quot;)[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.parentNode);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;body&gt;&lt;/body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.previousElementSibling);&nbsp;//null<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.nextElementSibling);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;p&gt;Hello&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.firstElementChild);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;li&gt;First&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.lastElementChild);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;li&gt;Fourth&lt;/li&gt;<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>NTOE：细心地人会发现，在节点遍历的例子中，body、ul、li、p节点之间是没有空格的，因为如果有空格，那么空格就会被当做一个TEXT节点，从而用ulNode.previousSibling获取到得就是一个空的文本节点，而不是&nbsp;&lt;li&gt;First&lt;/li&gt;&nbsp;节点了。即节点遍历的几个属性会得到所有的节点类型，而元素遍历只会得到相对应的元素节点。一般情况下，用得比较多得还是元素节点的遍历属性。<br><br>实现浏览器兼容版的element.children<br>有一些低版本的浏览器并不支持&nbsp;element.children&nbsp;方法，但我们可以用下面的方式来实现兼容。<br><br>&lt;html&nbsp;lang&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charest=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;Compatible&nbsp;Children&nbsp;Method&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&nbsp;id=&quot;body&quot;&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;item&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;123&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;ppp&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;h1&lt;/h1&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;getElementChildren(e){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(e.children){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;e.children;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;compatible&nbsp;other&nbsp;browse&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;i,&nbsp;len,&nbsp;children&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;child&nbsp;=&nbsp;element.firstChild;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(child&nbsp;!=&nbsp;element.lastChild){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(child&nbsp;!=&nbsp;null){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(child.nodeType&nbsp;==&nbsp;1){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children.push(child);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child&nbsp;=&nbsp;child.nextSibling;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children.push(child);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;children;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Test&nbsp;method&nbsp;getElementChildren(e)&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;item&nbsp;=&nbsp;document.getElementById(&quot;item&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;children&nbsp;=&nbsp;getElementChildren(item);<br>&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i&nbsp;=0;&nbsp;i&nbsp;&lt;&nbsp;children.length;&nbsp;i++){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(children[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>NOTE：此兼容方法为初稿，还未进行兼容性测试。<br><br><br><br>2、接口获取元素节点<br><br>getElementById<br>getElementsByTagName<br>getElementsByClassName<br>querySelector<br>querySelectorAll<br><br>API&nbsp;&nbsp;只作用于&nbsp;document&nbsp;&nbsp;唯一返回值&nbsp;&nbsp;live<br>getElementById&nbsp;&nbsp;√&nbsp;&nbsp;√&nbsp;&nbsp;<br>getElementsByTagName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;√<br>getElementsByClassName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;√<br>querySelectorAll&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>querySelector&nbsp;&nbsp;&nbsp;&nbsp;√&nbsp;&nbsp;<br>getElementById<br><br>获取文档中指定&nbsp;id&nbsp;的节点对象。<br>var&nbsp;element&nbsp;=&nbsp;document.getElementById(&quot;id&quot;);<br>getElementsByTagName<br><br>动态的获取具有指定标签元素节点的集合（其返回值会被&nbsp;DOM&nbsp;的变化所影响，其值会发生变化）。此接口可直接通过元素而获取，不必直接作用于&nbsp;document&nbsp;之上。<br>//&nbsp;示例<br>var&nbsp;collection&nbsp;=&nbsp;element.getElementsByTagName(&quot;tagName&quot;);<br><br>//&nbsp;获取指定元素的所有节点<br>var&nbsp;allNodes&nbsp;=&nbsp;document.getElementsByTagName(&quot;*&quot;);<br><br>//&nbsp;获取所有&nbsp;p&nbsp;元素的节点<br>var&nbsp;elements&nbsp;=&nbsp;document.getElementsByTagName(&quot;p&quot;);<br>//&nbsp;取出第一个&nbsp;p&nbsp;元素<br>var&nbsp;p&nbsp;=&nbsp;elements[0];<br>getElementsByClassName<br><br>获取指定元素中具有指定&nbsp;class&nbsp;的所有节点。多个&nbsp;class&nbsp;可的选择可使用空格分隔，与顺序无关。<br>var&nbsp;elements&nbsp;=&nbsp;element.getElementsByClassName(&quot;className&quot;);<br><br>NOTE：IE9&nbsp;及一下版本不支持&nbsp;getElementsByClassName<br>兼容方法<br><br>function&nbsp;getElementsByClassName(root,&nbsp;className)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;特性侦测<br>&nbsp;&nbsp;if&nbsp;(root.getElementsByClassName)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;优先使用&nbsp;W3C&nbsp;规范接口<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;root.getElementsByClassName(className);<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取所有后代节点<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;elements&nbsp;=&nbsp;root.getElementsByTagName(&quot;*&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;element&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;classNameStr&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;flag&nbsp;=&nbsp;null;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;className&nbsp;=&nbsp;className.split(&quot;&nbsp;&quot;);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;选择包含&nbsp;class&nbsp;的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;element;&nbsp;element&nbsp;=&nbsp;elements[i];&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;classNameStr&nbsp;=&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;element.getAttribute(&quot;class&quot;)&nbsp;+&nbsp;&quot;&nbsp;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag&nbsp;=&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;j&nbsp;=&nbsp;0,&nbsp;name;&nbsp;name&nbsp;=&nbsp;className[j];&nbsp;j++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(classNameStr.indexOf(&quot;&nbsp;&quot;&nbsp;+&nbsp;name&nbsp;+&nbsp;&quot;&nbsp;&quot;)&nbsp;===&nbsp;-1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag&nbsp;=&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(flag)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push(element);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result;<br>&nbsp;&nbsp;}<br>}<br><br>querySelector&nbsp;/&nbsp;querySelectorAll<br><br>获取一个&nbsp;list&nbsp;（其返回结果不会被之后&nbsp;DOM&nbsp;的修改所影响，获取后不会再变化）符合传入的&nbsp;CSS&nbsp;选择器的第一个元素或全部元素。<br>var&nbsp;listElementNode&nbsp;=&nbsp;element.querySelector(&quot;selector&quot;);<br>var&nbsp;listElementsNodes&nbsp;=&nbsp;element.querySelectorAll(&quot;selector&quot;);<br><br>var&nbsp;sampleSingleNode&nbsp;=&nbsp;element.querySelector(&quot;#className&quot;);<br>var&nbsp;sampleAllNodes&nbsp;=&nbsp;element.querySelectorAll(&quot;#className&quot;);<br>NOTE:&nbsp;IE9&nbsp;一下不支持&nbsp;querySelector&nbsp;与&nbsp;querySelectorAll<br><br><br>3、创建节点<br><br>创建节点&nbsp;-&gt;&nbsp;设置属性&nbsp;-&gt;&nbsp;插入节点<br>var&nbsp;element&nbsp;=&nbsp;document.createElement(&quot;tagName&quot;);<br><br><br>4、节点<br><br>textContent<br>获取或设置节点以及其后代节点的文本内容（对于节点中的所有文本内容）。<br>element.textContent;&nbsp;//&nbsp;获取<br>element.textContent&nbsp;=&nbsp;&quot;New&nbsp;Content&quot;;<br>NOTE：不支持&nbsp;IE&nbsp;9&nbsp;及其一下版本。<br><br>innerText&nbsp;（不符合&nbsp;W3C&nbsp;规范）<br>获取或设置节点以及节点后代的文本内容。其作用于&nbsp;textContent&nbsp;几乎一致。<br>element.innerText;<br><br>NOTE：不符合&nbsp;W3C&nbsp;规范，不支持&nbsp;FireFox&nbsp;浏览器。<br>FireFox&nbsp;兼容方案<br>if&nbsp;(!(&quot;innerText&quot;&nbsp;in&nbsp;document.body))&nbsp;{<br>&nbsp;&nbsp;HTMLElement.prototype.__defineGetter__(&quot;innerText&quot;,&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.textContent;<br>&nbsp;&nbsp;});<br>&nbsp;&nbsp;HTMLElement.prototype.__defineSetter__(&quot;innerText&quot;,&nbsp;function(s)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.textContent&nbsp;=&nbsp;s;<br>&nbsp;&nbsp;});<br>}<br><br><br>5、插入节点<br><br>appendChild<br><br>在指定的元素内追加一个元素节点。<br>var&nbsp;aChild&nbsp;=&nbsp;element.appendChild(aChild);<br>insertBefore<br><br>在指定元素的指定节点前插入指定的元素。<br>var&nbsp;aChild&nbsp;=&nbsp;element.insertBefore(aChild,&nbsp;referenceChild);<br><br><br>6、删除节点<br><br>删除指定的节点的子元素节点。<br>var&nbsp;child&nbsp;=&nbsp;element.removeChild(child);<br>innerHTML<br><br>获取或设置指定节点之中所有的&nbsp;HTML&nbsp;内容。替换之前内部所有的内容并创建全新的一批节点（去除之前添加的事件和样式）。innerHTML&nbsp;不检查内容，直接运行并替换原先的内容。<br><br>NOTE：只建议在创建全新的节点时使用。不可在用户可控的情况下使用。<br>var&nbsp;elementsHTML&nbsp;=&nbsp;element.innerHTML;<br>存在的问题<br>低版本&nbsp;IE&nbsp;存在内存泄露<br>安全问题（用户可以在名称中运行脚本代码）","addLink":"","date":"2016-01-07 18:32","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"属性操作","classify":"dom","addarticleContent":"1、HTML&nbsp;属性与&nbsp;DOM&nbsp;属性的对应<br><br>每个&nbsp;HTML&nbsp;属性都会对应相应的&nbsp;DOM&nbsp;对象属性。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;label&nbsp;for=&quot;username&quot;&gt;User&nbsp;Name:&nbsp;&lt;/label&gt;<br>&nbsp;&nbsp;&lt;input&nbsp;type=&quot;input&quot;&nbsp;name=&quot;username&quot;&nbsp;id=&quot;username&quot;&nbsp;class=&quot;text&quot;&nbsp;value=&quot;&quot;&gt;<br>&lt;/div&gt;<br>input.id;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br>input.type;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;text&quot;<br>input.className;&nbsp;//&nbsp;&quot;text&quot;<br><br>label.htmlFor;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br><br><br><br>2、属性操作方式<br><br>3、Property&nbsp;Accessor<br><br>通过属性方法符得到的属性为转换过的实例对象（并非全字符串）。<br>特点<br><br>X&nbsp;通用行差（命名异常，使用不同的命名方式进行访问）<br>X&nbsp;扩展性差<br>√&nbsp;实用对象（取出后可直接使用）<br><br>读取属性<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;label&nbsp;for=&quot;username&quot;&gt;User&nbsp;Name:&nbsp;&lt;/label&gt;<br>&nbsp;&nbsp;&lt;input&nbsp;type=&quot;input&quot;&nbsp;name=&quot;username&quot;&nbsp;id=&quot;username&quot;&nbsp;class=&quot;text&quot;&nbsp;value=&quot;&quot;&gt;<br>&lt;/div&gt;<br>input.className;&nbsp;//&nbsp;&quot;text&quot;<br>input[id];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br><br>写入属性<br><br>可增加新的属性或改写已有属性。<br>input.value&nbsp;=&nbsp;&quot;new&nbsp;value&quot;;<br>input[id]&nbsp;=&nbsp;&quot;new-id&quot;;<br><br><br><br>4、getAttribute&nbsp;/&nbsp;setAttribute<br><br>特点<br><br>X&nbsp;仅可获取字符串（使用时需转换）<br>√&nbsp;通用性强<br><br>读取属性<br><br>获取到的均为属性的字符串。<br>var&nbsp;attribtue&nbsp;=&nbsp;element.getAttribute(&quot;attributeName&quot;);<br><br>写入属性<br><br>可增加新的属性或改写已有属性。<br>element.setAttribute(&quot;attributeName&quot;,&nbsp;value);<br>dataset<br><br>自定义属性，其为&nbsp;HTMLElement&nbsp;上的属性也是&nbsp;data-*&nbsp;的属性集。主要用于在元素上保存数据。获取的均为属性字符串。数据通常使用&nbsp;AJAX&nbsp;获取并存储在节点之上。<br>&lt;div&nbsp;id=&quot;user&quot;&nbsp;data-id=&quot;1234&quot;&nbsp;data-username=&quot;x&quot;&nbsp;data-email=&quot;mail@gmail.com&quot;&gt;&lt;/div&gt;<br>div.dataset.id;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;1234&quot;<br>div.dataset.username;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;x&quot;<br>div.dataset.email;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;mail@gmail.com&quot;<br>NOTE：dataset&nbsp;在低版本&nbsp;IE&nbsp;不可使用，但可通过&nbsp;getAttribute&nbsp;与&nbsp;setAttribute&nbsp;来做兼容。","addLink":"","date":"2016-01-07 19:19","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"样式操作","classify":"dom","addarticleContent":"通过&nbsp;JavaScript&nbsp;动态修改页面样式。<br>CSS&nbsp;对应&nbsp;DOM&nbsp;对象<br><br><br><br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;sample.css&quot;&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;link&quot;);<br>//&nbsp;对应于&nbsp;element.sheet<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&nbsp;media=&quot;screen&quot;&gt;<br>&nbsp;&nbsp;body&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;30px<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;style&quot;);<br>//&nbsp;对应于&nbsp;element.sheet<br><br>//&nbsp;整个页面的全部样式（不包括行内样式）<br>document.styleSheets<br><br>&lt;p&nbsp;style=&quot;color:red&quot;&gt;Text&nbsp;Color&lt;/p&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;p&quot;);<br>//&nbsp;对应于&nbsp;element.style<br>内部样式表<br><br>&lt;style&gt;<br>&nbsp;&nbsp;body{margin:30;}<br>&nbsp;&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>&lt;/style&gt;<br><br>//&nbsp;1.对应所有样式的列表<br>//&nbsp;body{margin:30;}<br>//&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>element.sheet.cssRules;<br><br>//&nbsp;2.对应相应的&nbsp;CSS&nbsp;选择器<br>//&nbsp;p<br>element.sheet.cssRules[1].selectorText;<br><br>//&nbsp;3.对应一个样式<br>//&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>element.sheet.cssRules[1]<br><br>//&nbsp;4.对应所有样式的键值对<br>//&nbsp;color:&nbsp;#aaa;&nbsp;line-height:20px<br>element.sheet.cssRules[1].style;<br><br>//&nbsp;5.对应的属性值<br>//&nbsp;#aaa<br>element.sheet.cssRules[1].stlye.color;<br>element.sheet.cssRules[1].lineHeight;<br>行内样式<br><br>其对应于&nbsp;CSSStyleDeclaration&nbsp;的对象。<br>element.style.color;<br>//&nbsp;获取行内样式的键值对<br>更新样式<br><br>element.style<br><br>element.style.color&nbsp;=&nbsp;&quot;red&quot;;<br>element.style.background&nbsp;=&nbsp;&quot;black&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;style=&quot;color:&nbsp;red;&nbsp;background:&nbsp;black;&quot;&gt;&lt;/div&gt;<br>缺点<br><br>每个属性的更新都需要一个命令<br>命名异常（以驼峰命名法命名属性）<br>element.style.cssText<br><br>一次同时设置多个行内样式，其结果同&nbsp;element.style&nbsp;单独设置相同。<br>element.style.cssText&nbsp;=&nbsp;&quot;color:&nbsp;red;&nbsp;background:&nbsp;black&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;style=&quot;color:&nbsp;red;&nbsp;background:&nbsp;black;&quot;&gt;&lt;/div&gt;<br>以上两种方式均将样式混合在逻辑当中。<br>更新&nbsp;class<br><br>首先需要创建对应样式的&nbsp;CSS&nbsp;样式。<br>.angry&nbsp;{<br>&nbsp;&nbsp;color:&nbsp;red;<br>&nbsp;&nbsp;background:&nbsp;black;<br>}<br>然后再在&nbsp;JavaScript&nbsp;中，在对应的事件中给元素添加需要的类即可。<br>element.className&nbsp;+=&nbsp;&quot;&nbsp;angry&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;class=&quot;angry&quot;&gt;&lt;/div&gt;<br>统一更新多个元素样式<br><br>以上方法均不适合同时更新多个样式，通过更换样式表的方式则可同时更改多个页面中的样式。将需要的大量样式也在一个皮肤样式表中，通过&nbsp;JavaScript&nbsp;来直接更换样式表来进行样式改变。（此方法也可用于批量删除样式）<br><br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;base.css&quot;&gt;<br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;style1.css&quot;&gt;<br>element.setAttribute(&quot;href&quot;,&nbsp;&quot;style2.css&quot;);<br>获取样式<br><br>element.style<br><br>其对应的为元素的行内样式表而不是实际样式表。<br>&lt;input&nbsp;type=&quot;checkbox&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;<br>element.style.color;&nbsp;//&nbsp;&quot;&quot;<br>line-height:&nbsp;200px<br>window.getComputedStyle()<br><br>将需要取出样式的目标元素传入&nbsp;window.getComputedStyle()&nbsp;函数中，即可得到对应元素的实际样式。注意的是这里获取到的样式值为只读属性不可修改！<br>NOTE：获取的实际为&nbsp;CSSStyleDeclaration&nbsp;的实例对象。&nbsp;NOTE+：此方法不支持&nbsp;IE9&nbsp;以下版本，IE9&nbsp;中需使用&nbsp;element.currentStyle&nbsp;来做兼容。<br>var&nbsp;style&nbsp;=&nbsp;window.getComputedStyle(element[,&nbsp;pseudoEle]);<br>&lt;input&nbsp;type=&quot;checkbox&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;<br>window.getComputedStyle(element).color;&nbsp;//&nbsp;&quot;rgb(0,0,0)&quot;","addLink":"","date":"2016-01-07 19:38","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"DOM 事件","classify":"dom","addarticleContent":"何为&nbsp;DOM&nbsp;事件，HTML&nbsp;DOM&nbsp;使JavaScript&nbsp;有能力对&nbsp;HTML&nbsp;事件做出反应。（例如，点击&nbsp;DOM&nbsp;元素，键盘被按，输入框输入内容以及页面加载完毕等）<br>事件流<br><br>一个&nbsp;DOM&nbsp;事件可以分为捕获过程、触发过程、冒泡过程。&nbsp;DOM&nbsp;事件流为&nbsp;DOM&nbsp;事件的处理及执行的过程。<br><br>事件注册<br><br>事件注册，取消以及触发其作用对象均为一个&nbsp;DOM&nbsp;元素。<br>注册事件<br><br>eventTarget.addEventListener(type,&nbsp;listener[,useCapture])<br>evenTarget&nbsp;表示要绑定事件的DOM元素<br>type&nbsp;表示要绑定的事件，如：&quot;click&quot;<br>listener&nbsp;表示要绑定的函数<br>useCapture&nbsp;可选参数，表示是否捕获过程<br>NOTE：useCapture&nbsp;为设定是否为捕获过程，默认事件均为冒泡过程，只有&nbsp;useCapture&nbsp;为&nbsp;true&nbsp;时才会启用捕获过程。<br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;事件处理函数<br>var&nbsp;clickHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;statements<br>};<br><br>//&nbsp;注册事件<br>elem.addEventListener(&quot;click&quot;,&nbsp;clickHandler,&nbsp;false);<br><br>//&nbsp;第二种方式，不建议使用<br>elem.onclick&nbsp;=&nbsp;clickHandler;<br>//&nbsp;或者来弥补只可触发一个处理函数的缺陷<br>elem.onclick&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;clickHandler();<br>&nbsp;&nbsp;func();<br>&nbsp;&nbsp;//&nbsp;其他处理函数<br>};<br><br>取消事件<br><br>eventTarget.removeEventListener(type,&nbsp;listener[,useCapture]);<br>evenTarget&nbsp;表示要绑定事件的DOM元素<br>type&nbsp;表示要绑定的事件，如：&quot;click&quot;<br>listener&nbsp;表示要绑定的函数<br>useCapture&nbsp;可选参数，表示是否捕获过程<br><br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;取消事件<br>elem.removeEventListener(&quot;click&quot;,&nbsp;clickHandler,&nbsp;false);<br><br>//&nbsp;第二种方式。不建议使用<br>elem.onclick&nbsp;=&nbsp;null;<br><br>触发事件<br><br>点击元素，按下按键均会触发&nbsp;DOM&nbsp;事件，当然也可以以通过代码来触发事件。<br>eventTarget.dispatchEvent(type);<br><br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;触发事件<br>elem.dispatchEvent(&quot;click&quot;);<br><br>浏览器兼容型<br><br>以上均为&nbsp;W3C定义的标准定义，但早期浏览器&nbsp;IE8&nbsp;及其以下版本，均没有采用标准的实现方式。不过这些低版本浏览器也提供了对于&nbsp;DOM&nbsp;事件的注册、取消以及触发的实现。<br>事件注册与取消，attchEvent/detachEvent。事件触发，fireEvent(e)，其也不存在捕获阶段（Capture&nbsp;Phase）。<br>兼容低版本代码实现<br><br>注册事件<br><br>var&nbsp;addEvent&nbsp;=&nbsp;document.addEventListener&nbsp;?<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.addEventListener(type,&nbsp;listener,&nbsp;useCapture);<br>&nbsp;&nbsp;}&nbsp;:<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.attachEvent(&quot;on&quot;&nbsp;+&nbsp;type,&nbsp;listener);<br>&nbsp;&nbsp;}<br><br>取消事件<br><br>var&nbsp;addEvent&nbsp;=&nbsp;document.removeElementListener&nbsp;?<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.removeElementListener(type,&nbsp;listener,&nbsp;useCapture);<br>&nbsp;&nbsp;}&nbsp;:<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.detachEvent(&quot;on&quot;&nbsp;+&nbsp;type,&nbsp;listener);<br>&nbsp;&nbsp;}<br><br>事件对象<br><br>调用事件处理函数时传入的信息对象，这个对象中含有关于这个事件的详细状态和信息，它就是事件对象&nbsp;event。其中可能包含鼠标的位置，键盘信息等。<br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;事件处理函数<br>var&nbsp;clickHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;statements<br>};<br><br>//&nbsp;注册事件<br>elem.addEventListener(&quot;click&quot;,&nbsp;clickHandler,&nbsp;false);<br><br>NOTE：在低版本&nbsp;IE&nbsp;中事件对象是被注册在&nbsp;window&nbsp;之上而非目标对象上。使用下面的兼容代码既可解决。<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;事件处理函数<br>var&nbsp;clickHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;event&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;//&nbsp;statements<br>};<br><br>属性和方法<br><br>通用属性和方法<br><br>属性<br><br>type&nbsp;事件类型<br>target(srcElement&nbsp;IE&nbsp;低版本)&nbsp;事件触发节点<br>currentTarget&nbsp;处理事件的节点<br>方法<br><br>stopPropagation&nbsp;阻止事件冒泡传播<br>preventDefault&nbsp;阻止默认行为<br>stopImmediatePropagation&nbsp;阻止冒泡传播<br><br>阻止事件传播<br><br>event.stopPropagation()（W3C规范方法），如果在当前节点已经处理了事件，则可以阻止事件被冒泡传播至&nbsp;DOM&nbsp;树最顶端即&nbsp;window&nbsp;对象。<br>event.stopImmediatePropagation()&nbsp;此方法同上面的方法类似，除了阻止将事件冒泡传播值最高的&nbsp;DOM&nbsp;元素外，还会阻止在此事件后的事件的触发。<br>event.cancelBubble=true&nbsp;为&nbsp;IE&nbsp;低版本中中对于阻止冒泡传播的实现。<br><br>阻止默认行为<br><br>默认行为是指浏览器定义的默认行为（点击一个链接的时候，链接默认就会打开。当我们双击文字的时候，文字就会被选中），比如单击链接可以打开新窗口。<br>Event.preventDefault()&nbsp;为&nbsp;W3C&nbsp;规范方法，在&nbsp;IE&nbsp;中的实现方法为&nbsp;Event.returnValue=false。<br><br>事件分类<br><br>Event<br><br><br><br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>load&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Document,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;image,&nbsp;iframe<br>unload&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Document,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window<br>error&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;image<br>select&nbsp;&nbsp;NO&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;input,&nbsp;textarea<br>abort&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;image<br>window<br><br>load&nbsp;页面全部加载完毕<br>unload&nbsp;离开本页之前的卸载<br>error&nbsp;页面异常<br>abort&nbsp;取消加载<br>image<br><br>load&nbsp;图片加载完毕<br>error&nbsp;图标加载错误<br>abort&nbsp;取消图标加载<br>在目标图标不能正常载入时，载入备份替代图来提供用户体验。<br>&lt;img&nbsp;src=&quot;http://sample.com/img.png&quot;&nbsp;onerror=&quot;this.src=&quot;http://sample.com/default.png&quot;&quot;&gt;<br>UIEvent<br><br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>resize&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;iframe<br>scroll&nbsp;&nbsp;NO/YES&nbsp;&nbsp;Document,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;document,&nbsp;div<br>NOTE：resize&nbsp;为改变浏览器或iframe的窗体大小时会触发事件，scroll&nbsp;则会在滑动内容时触发，作用于&nbsp;Document&nbsp;则不会冒泡，作用于内部元素则会冒泡。<br>MouseEvent<br><br>DOM&nbsp;事件中最常见的事件之一。<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>click&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;focus/activation&nbsp;&nbsp;div<br>dbclick&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;focus/activation/select&nbsp;&nbsp;div<br>mousedown&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;drag/scroll/text&nbsp;selection&nbsp;&nbsp;div<br>mosuemove&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseout&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseover&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseup&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;context&nbsp;menu&nbsp;&nbsp;div<br>mouseenter&nbsp;&nbsp;NO&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseleave&nbsp;&nbsp;NO&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>NOTE：mouseenter&nbsp;与&nbsp;mouseover&nbsp;的区别为前者在鼠标在子元素直接移动不会触发事件，而后者会触发。&nbsp;mouseleave&nbsp;与&nbsp;mouseout&nbsp;同上相似。<br>属性<br><br>clientX,&nbsp;clientX<br>screenX,&nbsp;screenY<br>ctrlKey,&nbsp;shiftKey,&nbsp;altKey,&nbsp;metaKey&nbsp;如果被按下则为真（true）<br>button(0,&nbsp;1,&nbsp;2)&nbsp;鼠标的间位<br><br><br>MouseEvent&nbsp;顺序<br><br>鼠标的移动过程中会产生很多事件。事件的监察频率又浏览器决定。<br>例子：从元素&nbsp;A&nbsp;上方移动过<br>mousemove&nbsp;-&gt;&nbsp;mouseover(A)&nbsp;-&gt;&nbsp;mouseenter(A)&nbsp;-&gt;&nbsp;mousemove(A)&nbsp;-&gt;&nbsp;mouseout(A)&nbsp;-&gt;&nbsp;mouseleave(A)<br>例子：点击元素<br>mousedown&nbsp;-&gt;&nbsp;[mousemove]&nbsp;-&gt;&nbsp;mouseup&nbsp;-&gt;&nbsp;click<br>实例：拖动元素<br><br>&lt;div&nbsp;id=&quot;div0&quot;&gt;&lt;/div&gt;<br>&lt;style&nbsp;media=&quot;screen&quot;&gt;<br>&nbsp;&nbsp;#div0&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;absolute;<br>&nbsp;&nbsp;&nbsp;&nbsp;top:&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;left:&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100px;<br>&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100px;<br>&nbsp;&nbsp;&nbsp;&nbsp;border:&nbsp;1px&nbsp;solid&nbsp;black;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;div0&quot;);<br>var&nbsp;clientX,&nbsp;clientY,&nbsp;isMoving;<br>var&nbsp;mouseDownHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;event&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;clientX&nbsp;=&nbsp;event.clientX;<br>&nbsp;&nbsp;clientY&nbsp;=&nbsp;event.clientY;<br>&nbsp;&nbsp;isMoving&nbsp;=&nbsp;true;<br>}<br><br>var&nbsp;mouseMoveHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(!isMoving)&nbsp;return;<br>&nbsp;&nbsp;event&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;var&nbsp;newClientX&nbsp;=&nbsp;event.clientX,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newClientY&nbsp;=&nbsp;event.clientY;<br>&nbsp;&nbsp;var&nbsp;left&nbsp;=&nbsp;parseInt(elem.style.left)&nbsp;||&nbsp;0,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top&nbsp;=&nbsp;parseInt(elem.style.top)&nbsp;||&nbsp;0;<br>&nbsp;&nbsp;elem.style.left&nbsp;=&nbsp;left&nbsp;+&nbsp;(newClientX&nbsp;-&nbsp;clientX)&nbsp;+&nbsp;&quot;px&quot;;<br>&nbsp;&nbsp;elem.style.top&nbsp;=&nbsp;top&nbsp;+&nbsp;(newClientY&nbsp;-&nbsp;clientY)&nbsp;+&nbsp;&quot;px&quot;;<br>&nbsp;&nbsp;clientX&nbsp;=&nbsp;newClientX;<br>&nbsp;&nbsp;clientY&nbsp;=&nbsp;newClientY;<br>}<br><br>var&nbsp;mouseUpHandler&nbsp;=&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;isMoving&nbsp;=&nbsp;false;<br>}<br><br>addEvent(elem,&nbsp;&quot;mousedown&quot;,&nbsp;mouseDownHandler);<br>addEvent(elem,&nbsp;&quot;mouseup&quot;,&nbsp;mouseUpHandler);<br>addEvent(elem,&nbsp;&quot;mousemove&quot;,&nbsp;mouseMoveHandler);<br>滚轮事件（Wheel）<br><br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>wheel&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;scroll&nbsp;or&nbsp;zoom&nbsp;document&nbsp;&nbsp;div<br>属性<br><br>deltaMode&nbsp;鼠标滚轮偏移量的单位<br>deltaX<br>deltaY<br>deltaZ<br>FocusEvent<br><br>其用于处理元素获得或失去焦点的事件。（例如输入框的可输入状态则为获得焦点，点击外部则失去焦点）<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>blur&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>focus&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>focusin&nbsp;&nbsp;NO&nbsp;&nbsp;window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>focusout&nbsp;&nbsp;NO&nbsp;&nbsp;window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>NOTE：blur&nbsp;失去焦点时，focus&nbsp;获得焦点时，focusin&nbsp;即将获得焦点，focusout即将失去焦点。<br>属性<br><br>一个元素失去，既另一个元素获得焦点。这里的&nbsp;relatedTarget&nbsp;则为相对的那个元素。<br>relatedTarget<br>InputEvent<br><br>输入框输入内容则会触发输入事件。<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>beforeInput&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;update&nbsp;DOM&nbsp;Element&nbsp;&nbsp;input<br>input&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;input<br>NOTE：beforeInput&nbsp;为在按键按下后即将将输入字符显示之前生成的事件。<br>NOTE+：IE&nbsp;并没有&nbsp;InputEvent&nbsp;则需使用&nbsp;onpropertychange(IE)&nbsp;来代替。<br>KeyboardEvent<br><br>其用于处理键盘事件。<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>keydown&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;beforeInput/input/focus/blur/activation&nbsp;&nbsp;div,&nbsp;input<br>keyup&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div,&nbsp;input<br>属性<br><br>key&nbsp;按下的键字符串<br>code<br>ctrlKey,&nbsp;shiftKey,&nbsp;altKey,&nbsp;metaKey<br>repeat&nbsp;代表按键不松开为&nbsp;true<br>keyCode<br>charCode<br>which<br>事件代理<br><br>事件代理是指在父节点上（可为元素最近的父节点也可为上层的其他节点）处理子元素上触发的事件，其原理是通过事件流机制而完成的。可以通过事件对象中获取到触发事件的对象（如下所示）。<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br>elem.addEventListener(&quot;click&quot;,&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;var&nbsp;target&nbsp;=&nbsp;e.target&nbsp;||&nbsp;e.srcElement;<br>&nbsp;&nbsp;//&nbsp;statements<br>});<br>优点<br><br>需要管理的事件处理函数更少<br>内存分配更少，更高效<br>增加与删除子节点可以不额外处理事件<br>缺点<br><br>事件管理的逻辑变的复杂（因为冒泡机制）<br><br>","addLink":"","date":"2016-01-07 20:29","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4},{"addArticleTtitle":"BOM","classify":"dom","addarticleContent":"BOM&nbsp;为浏览器窗口对象的一组&nbsp;API。<br>BOM&nbsp;结构图<br><br><br>属性<br><br>属性名&nbsp;&nbsp;描述<br>navigator&nbsp;&nbsp;浏览器信息<br>location&nbsp;&nbsp;浏览器定位和导航<br>history&nbsp;&nbsp;窗口浏览器历史<br>screen&nbsp;&nbsp;屏幕信息<br>navigator<br><br>navigator.userAgent<br>Chrome,&nbsp;Mozilla/5.0(Windows&nbsp;NT&nbsp;6.1;&nbsp;WOW64)&nbsp;Apple&nbsp;WebKit/37.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/40.0.2214.115&nbsp;Safari/537.36<br>Firefox,&nbsp;Mozilla/5.0(Windows&nbsp;NT&nbsp;6.1;&nbsp;WOW64;&nbsp;rv:36.0)&nbsp;Gecko/20100101&nbsp;Firefox/36.0<br>IE,&nbsp;Mozilla/5.0&nbsp;(Windows&nbsp;NT&nbsp;6.1;&nbsp;WOW64;&nbsp;Trident/7.0;&nbsp;SLCC2;&nbsp;.NET&nbsp;CLR&nbsp;2.0.50727;&nbsp;.NET&nbsp;CLR&nbsp;3.5.30729;&nbsp;.NET&nbsp;CLR&nbsp;3.0.30729;&nbsp;Media&nbsp;Center&nbsp;PC&nbsp;6.0;&nbsp;.NET4.0C;&nbsp;.NET4.0E;&nbsp;InfoPath.3;&nbsp;rv:11.0)&nbsp;like&nbsp;Gecko<br>appCodeName:&nbsp;&quot;Mozilla&quot;appName:&nbsp;&quot;Netscape&quot;appVersion:&nbsp;&quot;5.0&nbsp;(Macintosh;&nbsp;Intel&nbsp;Mac&nbsp;OS&nbsp;X&nbsp;10_10_3)&nbsp;AppleWebKit/537.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/43.0.2357.124&nbsp;Safari/537.36&quot;cookieEnabled:&nbsp;truedoNotTrack:&nbsp;&quot;1&quot;geolocation:&nbsp;GeolocationhardwareConcurrency:&nbsp;8language:&nbsp;&quot;en-US&quot;languages:&nbsp;Array[4]maxTouchPoints:&nbsp;0mimeTypes:&nbsp;MimeTypeArrayonLine:&nbsp;truepermissions:&nbsp;Permissionsplatform:&nbsp;&quot;MacIntel&quot;plugins:&nbsp;PluginArrayproduct:&nbsp;&quot;Gecko&quot;productSub:&nbsp;&quot;20030107&quot;serviceWorker:&nbsp;ServiceWorkerContaineruserAgent:&nbsp;&quot;Mozilla/5.0&nbsp;(Macintosh;&nbsp;Intel&nbsp;Mac&nbsp;OS&nbsp;X&nbsp;10_10_3)&nbsp;AppleWebKit/537.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/43.0.2357.124&nbsp;Safari/537.36&quot;vendor:&nbsp;&quot;Google&nbsp;Inc.&quot;vendorSub:&nbsp;&quot;&quot;webkitPersistentStorage:&nbsp;DeprecatedStorageQuotawebkitTemporaryStorage:&nbsp;DeprecatedStorageQuota__proto__:&nbsp;Navigator<br>NOTE：可以通过&nbsp;userAgent&nbsp;判断浏览器。<br>location<br><br>代表浏览器的定位和导航。可以使用&nbsp;location&nbsp;来操作&nbsp;URL&nbsp;中的各个部分。最常用的有&nbsp;href&nbsp;属性，当前访问资源的完整路径。<br>http://www.github.com:8080/index.html?user=li-xinyang&lang=zh-CN#home<br>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>protocol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hostname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#92;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;pathname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host<br>方法<br><br>assign(url)&nbsp;载入新的&nbsp;url，记录浏览记录<br>replace(url)&nbsp;载入新的&nbsp;url&nbsp;不记录浏览记录<br>reload()&nbsp;重新载入当前页<br>history<br><br>浏览器当前窗口的浏览历史。<br>length:&nbsp;9state:&nbsp;null&nbsp;__proto__:&nbsp;History<br>方法<br><br>back(int)&nbsp;后退<br>forward(int)&nbsp;前进<br>go(int)&nbsp;正数向前，附属向后<br>screen<br><br>其中包含屏幕信息。其中&nbsp;avil-&nbsp;开头的属性为可用属性，其余则为显示器设备属性。<br>Window&nbsp;方法<br><br>方法&nbsp;&nbsp;描述<br>alert(),&nbsp;confirm()&nbsp;返回真假,&nbsp;prompt()&nbsp;返回用户输入值&nbsp;&nbsp;三种对话框<br>setTimeout(),&nbsp;setInterval()&nbsp;&nbsp;计时器<br>open(),&nbsp;close()&nbsp;&nbsp;开启窗口，关闭窗口<br>NOTE：对话框会阻塞线程。<br>打开或关闭窗口<br>var&nbsp;w&nbsp;=&nbsp;window.open(&quot;subwindow.html&quot;,&nbsp;&quot;subwin&quot;,&nbsp;&quot;width=300,&nbsp;height=300,&nbsp;status=yes,&nbsp;resizable=yes&quot;);<br><br>//&nbsp;既可关闭窗口<br>w.close();<br>NOTE：无需记忆，更多属性在使用时查询文档。<br>Window&nbsp;事件<br><br>事件名&nbsp;&nbsp;描述<br>load&nbsp;&nbsp;文档和所有图片完成加载时<br>unload&nbsp;&nbsp;离开当前文档时<br>beforeunload&nbsp;&nbsp;和&nbsp;unload&nbsp;类似，但是它提供询问用户是否确认离开的机会<br>resize&nbsp;&nbsp;拖动改变浏览器窗口大小时<br>scroll&nbsp;&nbsp;拖动浏览器时","addLink":"","date":"2016-01-07 20:31","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":5},{"addArticleTtitle":"数据通信","classify":"dom","addarticleContent":"HTTP<br><br>HTTP&nbsp;为一个通信协议。HTTP&nbsp;客户端发起请求并创建端口。HTTP&nbsp;服务器在端口监听客户端的请求。&nbsp;HTTP&nbsp;服务器在收到请求后则返回状态和所请求的内容。<br>网页浏览全过程&nbsp;（粗浅流程）<br>域名解析<br>搜索浏览器自身&nbsp;DNS&nbsp;缓存<br>搜索操作系统自身&nbsp;DNS&nbsp;缓存（如上一级未找到或已失效）<br>读取本地&nbsp;HOST&nbsp;文件&nbsp;（如上一级未找到或已失效，/etc/hosts）<br>浏览器发起&nbsp;DNS&nbsp;系统调用请求<br>ISP&nbsp;服务器查找自身缓存<br>ISP&nbsp;服务器发起迭代（逐域寻找需要的地址）请求<br>得到请求资源的&nbsp;IP&nbsp;地址<br>发起&nbsp;HTTP&nbsp;“三次握手”（下面为一个超级简化版）<br>建立连接，等待服务器确认<br>服务器接受请求，回复客户<br>客户端与服务器连接成功（TCP/IP&nbsp;连接成功）<br>客户根据协议发送请求<br>服务器更具请求返回客户需求资源<br>客户获得资源<br>HTTP&nbsp;事务<br><br><br><br>HTTP&nbsp;请求报文<br><br><br><br>其中包括主机地址，HTTP&nbsp;协议版本号。头部由键值对组成。因为此请求为&nbsp;GET&nbsp;方法所以请求体为空。<br>HTTP&nbsp;回复报文<br><br><br><br>其中包括&nbsp;HTTP&nbsp;版本号，状态码及状态码描述。头部依然为键值对组成。主体则为&nbsp;HTML&nbsp;文件。<br>常用&nbsp;HTTP&nbsp;方法<br><br>常用方法<br><br>方法&nbsp;&nbsp;描述&nbsp;&nbsp;是否包含主题<br>GET&nbsp;&nbsp;从服务器获取一份文档&nbsp;&nbsp;否<br>POST&nbsp;&nbsp;向服务器发送需要处理的数据&nbsp;&nbsp;是<br>PUT&nbsp;&nbsp;将请求的主题部分储存在服务器上&nbsp;&nbsp;是<br>DELETE&nbsp;&nbsp;从服务器删除一份文档&nbsp;&nbsp;否<br>不常用方法<br>方法&nbsp;&nbsp;描述&nbsp;&nbsp;是否包含主题<br>HEAD&nbsp;&nbsp;只从服务器获取头文档的首部&nbsp;&nbsp;否<br>TRACE&nbsp;&nbsp;对可能经过代理服务器传送到服务器上的报文进行追踪&nbsp;&nbsp;否<br>OPTIONS&nbsp;&nbsp;决定可以在服务器上执行的方法&nbsp;&nbsp;否<br>URL&nbsp;构成<br><br>http://www.github.com:8080/index.html?user=li-xinyang&lang=zh-CN#home<br>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>protocol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hostname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#92;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;pathname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host<br>可选部分包括：<br>port<br>pathname<br>search<br>hash<br>NOTE：上面提供的&nbsp;URL&nbsp;地址仅为参考所用。<br>HTTP&nbsp;版本<br><br>HTTP/0.9&nbsp;1991年&nbsp;HTTP&nbsp;原型，存在设计缺陷<br>HTTP/1.0&nbsp;第一个广泛应用版本<br>HTTP/1.0+&nbsp;添加持久的&nbsp;keep-alive&nbsp;链接，虚拟主机支持，代理连接支持，成为非官方的事实版本<br>HTTP/1.1&nbsp;校正结构性缺陷，明确语义，引入重要的新能优化措施，删除不好的特性（当前使用版本）<br>NOTE：此文写于2015年6月。<br>常见&nbsp;HTTP&nbsp;状态码<br><br>状态码&nbsp;&nbsp;描述&nbsp;&nbsp;代码描述<br>200&nbsp;&nbsp;请求成功，一般用于&nbsp;GET&nbsp;和&nbsp;POST&nbsp;方法&nbsp;&nbsp;OK<br>301&nbsp;&nbsp;资源移动。所请求资源自动到新的&nbsp;URL，浏览器自动跳转至新的&nbsp;URL&nbsp;&nbsp;Moved&nbsp;Permanently<br>304&nbsp;&nbsp;未修改。所请求资源未修改，浏览器读取缓存数据&nbsp;&nbsp;Not&nbsp;Modified<br>400&nbsp;&nbsp;请求语法错误，服务器无法解析&nbsp;&nbsp;Bad&nbsp;Request<br>404&nbsp;&nbsp;未找到资源，可以设置个性“404页面”&nbsp;&nbsp;Not&nbsp;Found<br>500&nbsp;&nbsp;服务器内部错误&nbsp;&nbsp;Internal&nbsp;Server&nbsp;Error<br><br><br>AJAX<br><br>AJAX（Asynchronous&nbsp;JavaScript&nbsp;and&nbsp;HTML）异步获取数据的概念，由&nbsp;Jesse&nbsp;James&nbsp;Garrett&nbsp;在2005年提出。<br>AJAX&nbsp;请求全过程<br><br><br>AJAX&nbsp;调用<br><br>三部完成&nbsp;AJAX&nbsp;调用<br>创建&nbsp;XHR&nbsp;对象<br>处理返回数据及错误处理<br>发送请求<br>var&nbsp;xhr&nbsp;=&nbsp;new&nbsp;XMLHttpRequest();<br><br>xhr.onreadystatechange&nbsp;=&nbsp;function(callback)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(xhr.readyState&nbsp;===&nbsp;4)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((xhr.status&nbsp;&gt;==&nbsp;200&nbsp;&&&nbsp;xhr.status&nbsp;&lt;&nbsp;300)&nbsp;||&nbsp;xhr.status&nbsp;===&nbsp;304)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback(xhr.responseText);<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&quot;Request&nbsp;was&nbsp;unsuccessful:&nbsp;&quot;&nbsp;+&nbsp;xhr.status);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br><br>xhr.open(&quot;get&quot;,&nbsp;&quot;exmaple.json&quot;,&nbsp;true);<br>xhr.setRequestHeader(&quot;myHeader&quot;,&nbsp;&quot;myValue&quot;);<br>xhr.send(null);<br>NOTE：xhr.onload&nbsp;只针对当&nbsp;readyState&nbsp;===&nbsp;4&nbsp;和&nbsp;status&nbsp;===&nbsp;200&nbsp;时的事件。<br>open<br><br>xhr.open(method,&nbsp;url[,&nbsp;async&nbsp;=&nbsp;true]);<br>method&nbsp;为上面说过的&nbsp;HTTP&nbsp;方法（例如，GET、POST）<br>url&nbsp;为资源地址<br>async&nbsp;默认为真，用于设置异步请求<br>setRequestHeader<br><br>xhr.setRequestHeader(&quot;myHeader&quot;,&nbsp;&quot;myValue&quot;);<br><br>xhr.setRequestHeader(&quot;Content-Type&quot;,&nbsp;&quot;application/x-www-form-urlencoded&quot;);<br>用于设置头部的键值对。<br>send<br><br>xhr.send([data=null]);<br><br>xhr.send()<br>数据可包含字符串或表单数控，但需要提前为&nbsp;RequestHeader&nbsp;做设置。<br>请求参数序列化<br><br>将查询参数使用字符串，跟入资源地址中。<br>xhr.open(&quot;get&quot;,&nbsp;&quot;example.json?&quot;&nbsp;+&nbsp;&quot;name=value&age=value&quot;,&nbsp;true);<br>对象转换字符串的函数实现<br>function&nbsp;serialize(data)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(!data)&nbsp;return&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;var&nbsp;pairs&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;for&nbsp;(var&nbsp;name&nbsp;in&nbsp;data)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!data.hasOwnProperty(name))&nbsp;continue;<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(typeof&nbsp;data[name]&nbsp;===&nbsp;&quot;function&quot;)&nbsp;continue;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;value&nbsp;=&nbsp;data[name].toString();<br>&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;encodeURIComponent(name);<br>&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;=&nbsp;encodeURIComponent(value);<br>&nbsp;&nbsp;&nbsp;&nbsp;pairs.push(name&nbsp;+&nbsp;&quot;=&quot;&nbsp;+&nbsp;value);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return&nbsp;pairs.join(&quot;&&quot;);<br>}<br>GET&nbsp;请求<br>var&nbsp;url&nbsp;=&nbsp;&quot;example.json?&quot;&nbsp;+&nbsp;serialize(formData);<br>xhr.open(&quot;get&quot;,&nbsp;url,&nbsp;true);<br>xhr.send(null);<br>POST&nbsp;请求<br>查询参数需要作为&nbsp;send()&nbsp;的存数传入。<br>xhr.open(&quot;get&quot;,&nbsp;&quot;example.json&quot;,&nbsp;true);<br>xhr.send(serialize(formData));<br>同源策略<br><br>两个页面拥有相同的协议（Protocol）、端口（Port）、和主机（host）那么这两个页面就是属于同一个源（Origin）。<br>http://www.github.com:8080/index.html?user=li-xinyang&lang=zh-CN#home<br>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>protocol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hostname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#92;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;pathname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host<br>|-----完全一致则同源------|<br>跨域资源访问<br><br>不满足同源策略的资源访问均属于跨域资源访问，W3C&nbsp;定义了&nbsp;CORS。现代浏览器已经实现了&nbsp;CORS&nbsp;的支持。<br>CORS&nbsp;原理实现图<br><br><br>其他跨域技术<br><br>Frame&nbsp;代理<br>JSONP<br>Comet<br>Web&nbsp;Sockets<br>...<br>Frame&nbsp;代理<br>关于&nbsp;Frame&nbsp;代理的更多内容在这里。<br><br><br>优点：<br><br>参照&nbsp;CORS&nbsp;标准<br>支持各种请求方法&nbsp;GET&nbsp;POST&nbsp;PUT&nbsp;DELETE<br>缺点：<br><br>需要在目标服务器防止代理文件（造成延时）<br>低版本在大并发消息通信机制会产生延时<br>JSONP<br>全程为&nbsp;JSON&nbsp;with&nbsp;Padding（填充式&nbsp;JSON），它利用&nbsp;&lt;script&gt;&nbsp;可以跨域的原理。请求一段&nbsp;JavaScript&nbsp;代码，然后执行&nbsp;JavaScript&nbsp;代码来实现跨域。<br>function&nbsp;handleResponse(response)&nbsp;{<br>&nbsp;&nbsp;alert(response.name);<br>}<br><br>var&nbsp;script&nbsp;=&nbsp;document.createElement(&quot;script&quot;);<br>script.src&nbsp;=&nbsp;&quot;http://localhost:3000/json?callback=handleResponse&quot;;<br>document.body.insertBefore(script,&nbsp;document.body.firstChild);","addLink":"","date":"2016-01-07 20:33","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":6}]} ';
var dataJsonStr='{"html":[{"addArticleTtitle":"HTML简介","classify":"html","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;keywords&quot;&nbsp;content=&quot;音乐。。。&quot;&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;name=&quot;description&quot;&nbsp;content=&quot;网易。。。&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;网易云音乐&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;div&gt;222&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>&lt;!DOCTYPE&nbsp;html&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----------文档声明<br>&lt;head&gt;.....&lt;head&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;----------文档头部<br>&lt;body&gt;......&lt;/body&gt;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;-----------文档主体<br><br>注意事项：<br>&lt;!DOCTYPE&nbsp;html&gt;&nbsp;必须首行定格<br>&lt;title&gt;&nbsp;为文档标题<br>&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;&nbsp;文档编码格式<br>&lt;meta&nbsp;name=&quot;keywords&quot;&nbsp;content=&quot;...&quot;&gt;&nbsp;和&nbsp;&lt;meta&nbsp;name=&quot;description&quot;&nbsp;content=&quot;...&quot;&gt;&nbsp;提供给搜索引擎使用<br>&lt;meta&nbsp;name=&quot;viewport&quot;&nbsp;content=&quot;width=device-width,&nbsp;initial-scale=1.0&quot;&gt;&nbsp;移动端浏览器的宽高与缩放<br>&lt;link&gt;&nbsp;标签可以引入&nbsp;favicon&nbsp;和样式表&nbsp;CSS&nbsp;文件","addLink":"","date":"2016-01-06 19:43","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"HTML标签","classify":"html","addarticleContent":"1、文档章节<br><br>&lt;body&gt;&nbsp;页面内容&nbsp;&lt;header&gt;&nbsp;文档头部&nbsp;&lt;nav&gt;&nbsp;导航&nbsp;&lt;aside&gt;&nbsp;侧边栏&nbsp;&lt;article&gt;&nbsp;定义外部内容（如外部引用的文章）&nbsp;&lt;section&gt;&nbsp;一个独立的块&nbsp;&lt;footer&gt;&nbsp;尾部<br><br><br><br>2、文本标签<br><br>&lt;!--&nbsp;默认超链接&nbsp;&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;当前窗口显示&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;_self&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;新窗口显示&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;_blacnk&quot;&gt;Sample&lt;/a&gt;<br>&lt;!--&nbsp;iframe&nbsp;中打开链接&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;http://sample-link.com&quot;&nbsp;title=&quot;Sample&nbsp;Link&quot;&nbsp;target=&quot;iframe-name&quot;&gt;Sample&lt;/a&gt;<br>&lt;iframe&nbsp;name=&quot;iframe-name&quot;&nbsp;frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;<br><br>&lt;!--&nbsp;页面中的锚点&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;#achor&quot;&gt;Achor&nbsp;Point&lt;/a&gt;<br>&lt;section&nbsp;id=&quot;achor&quot;&gt;Achor&nbsp;Content&lt;/section&gt;<br><br>&lt;!--&nbsp;邮箱及电话需系统支持&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br>&lt;!--&nbsp;多个邮箱地址&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com,&nbsp;sample-address0@me.com&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br>&lt;!--&nbsp;添加抄送，主题和内容&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;mailto:sample-address@me.com?cc=admin@me.com&subject=Help&body=sample-body-text&quot;&nbsp;title=&quot;Email&quot;&gt;Contact&nbsp;Us&lt;/a&gt;<br><br>&lt;!--&nbsp;电话示例&nbsp;--&gt;<br>&lt;a&nbsp;href=&quot;tel:99999999&quot;&nbsp;title=&quot;Phone&quot;&gt;Ring&nbsp;Us&lt;/a&gt;<br><br><br><br>3、组合内容标签<br><br>&lt;div&gt;<br>&lt;p&gt;<br>&lt;ol&gt;<br>&lt;ul&gt;<br>&lt;dl&gt;<br>&lt;pre&gt;<br>&lt;blockquote&gt;<br><br><br><br>4、引用<br><br>&lt;cite&gt;&nbsp;引用作品的名字、作者的名字等<br>&lt;q&gt;&nbsp;引用一小段文字（大段文字引用用&lt;blockquote&gt;）<br>&lt;blockquote&gt;&nbsp;引用大块文字<br>&lt;pre&gt;&nbsp;保存格式化的内容（其空格、换行等格式不会丢失）<br>&lt;pre&gt;<br>&nbsp;&nbsp;<br>&lt;/pre&gt;<br><br><br><br>5、代码<br>&lt;code&gt;&nbsp;引用代码<br><br><br><br>6、格式化<br><br>&lt;b&gt;&nbsp;加粗&nbsp;&lt;i&gt;&nbsp;斜体<br><br><br><br>7、强调<br><br>&lt;em&gt;&nbsp;斜体。着重于强调内容，会改变语义的强调&nbsp;&lt;strong&gt;&nbsp;粗体。着重于强调内容的重要性<br><br><br><br>8、换行<br><br>&lt;br&gt;&nbsp;换行<br><br><br><br>9、列表<br><br>无序列表<br>&lt;ul&gt;<br>&nbsp;&nbsp;&lt;li&gt;标题&lt;/li&gt;<br>&nbsp;&nbsp;&lt;li&gt;结论&lt;/li&gt;<br>&lt;/ul&gt;<br><br>有序列表<br>&lt;ol&gt;<br>&nbsp;&nbsp;&lt;li&gt;第一&lt;/li&gt;<br>&nbsp;&nbsp;&lt;li&gt;第二&lt;/li&gt;<br>&lt;/ol&gt;<br><br>自定义列表<br>&lt;dl&gt;<br>&nbsp;&nbsp;&lt;dt&gt;作者&lt;/dt&gt;<br>&nbsp;&nbsp;&lt;dd&gt;爱因斯坦&lt;/dd&gt;<br>&nbsp;&nbsp;&lt;dt&gt;作品&lt;/dt&gt;<br>&nbsp;&nbsp;&lt;dd&gt;《相对论》&lt;/dd&gt;<br>&nbsp;&nbsp;&lt;dd&gt;《时间与空间》&lt;/dd&gt;<br>&lt;/dl&gt;<br><br>一个&lt;dt&gt;可以对应多个&lt;dd&gt;<br>NOTE:&nbsp;&lt;dl&gt;&nbsp;为自定义列表，其中包含一个或多个&nbsp;&lt;dt&gt;&nbsp;及&nbsp;一个或多个&nbsp;&lt;dd&gt;，并且dt&nbsp;与&nbsp;dl列表会有缩进的效果。&lt;pre&gt;&nbsp;会保留换行和空格，通常与&nbsp;&lt;code&gt;&nbsp;一同使用。<br><br>&lt;pre&gt;<br>&nbsp;&nbsp;&lt;code&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;int&nbsp;main(void)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&lt;/code&gt;<br>&lt;/pre&gt;<br><br>&lt;blockquote&gt;&nbsp;拥有&nbsp;cite&nbsp;属性，它包含引用文本的出处，示例如下所示：<br>&lt;blockquote&nbsp;cite=&quot;http://example.com/facts&quot;&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Quote...&lt;/p&gt;<br>&lt;/blockquote&gt;<br><br><br><br>10、嵌入<br><br>&lt;iframe&nbsp;src=&quot;&quot;&gt;&lt;/iframe&gt;&nbsp;页面操作可以不影响到iframe的内容<br><br>&lt;!--object&nbsp;embed通常用来嵌入外部资源&nbsp;--&gt;<br>&lt;object&nbsp;type=&quot;application/x-shockwave-player&quot;&gt;<br>&nbsp;&nbsp;&lt;param&nbsp;name=&quot;movie&quot;&nbsp;value=&quot;book.pdf&quot;&gt;<br>&lt;/object&gt;<br><br>&lt;!--视频&nbsp;track可以引入字幕&nbsp;autoplay可以使视频加载后自动播放，loop可以使其循环播放&nbsp;--&gt;<br>&lt;video&nbsp;autoplay&nbsp;loop&nbsp;controls=&quot;controls&quot;&nbsp;poster=&quot;poster.jpg&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.mp4&quot;&nbsp;type=&quot;video/mp4&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.webm&quot;&nbsp;type=&quot;video/webm&quot;&gt;<br>&nbsp;&nbsp;&lt;source&nbsp;src=&quot;movie.ogg&quot;&nbsp;type=&quot;video/ogg&quot;&gt;<br>&nbsp;&nbsp;&lt;track&nbsp;kind=&quot;subtitles&quot;&nbsp;src=&quot;video.vtt&quot;&nbsp;srclang=&quot;cn&quot;&nbsp;label=&quot;cn&quot;&gt;<br>&lt;/video&gt;<br><br><br><br>11、资源标签<br><br>图标签<br><br>canvas&nbsp;基于像素，性能要求比较高，可用于实时数据展示。svg&nbsp;为矢量图形图像。<br>热点区域标签<br><br>img中套用map以及area可以实现点击某部分图片触发一个链接，点击另一部分触发另一个链接<br>&lt;img&nbsp;src=&quot;mama.jpg&quot;&nbsp;width=100&nbsp;height=100&nbsp;usemap=&quot;#map&quot;&nbsp;/&gt;<br>&lt;map&nbsp;name=&quot;map&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;area&nbsp;shap=&quot;rect&quot;&nbsp;coords=&quot;0,0,50,50&quot;&nbsp;href=&quot;&quot;&nbsp;alt=&quot;&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;area&nbsp;shap=&quot;circle&quot;&nbsp;coords=&quot;75,75,25&quot;&nbsp;href=&quot;&quot;&nbsp;alt=&quot;&quot;&gt;<br>&lt;/map&gt;<br><br><br><br>12、表格<br><br>表格代码示例<br>&lt;table&gt;<br>&nbsp;&nbsp;&lt;caption&gt;table&nbsp;title&nbsp;and/or&nbsp;explanatory&nbsp;text&lt;/caption&gt;<br>&nbsp;&nbsp;&lt;thead&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;th&gt;header&lt;/th&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&lt;/thead&gt;<br>&nbsp;&nbsp;&lt;tbody&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;data&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&lt;/tbody&gt;<br>&lt;/table&gt;<br>使用&nbsp;colspan=val&nbsp;进行跨列，使用&nbsp;rowspan=val&nbsp;进行跨行。<br><br><br><br>13、表单<br><br>&lt;form&nbsp;action=&quot;WebCreation_submit&quot;&nbsp;method=&quot;get&quot;&nbsp;accept-charset=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&lt;fieldset&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;legend&gt;title&nbsp;or&nbsp;explanatory&nbsp;caption&lt;/legend&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;第一种添加标签的方法&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&gt;&lt;input&nbsp;type=&quot;text/submit/hidden/button/etc&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;第二种添加标签的方法&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;label&nbsp;for=&quot;input-id&quot;&gt;Sample&nbsp;Label&lt;/label&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;id=&quot;input-id&quot;&gt;<br>&nbsp;&nbsp;&lt;/fieldset&gt;<br>&nbsp;&nbsp;&lt;fieldset&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;legend&gt;title&nbsp;or&nbsp;explanatory&nbsp;caption&lt;/legend&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;只读文本框&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;readonly&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;!--&nbsp;隐藏文本框，可提交影藏数据&nbsp;--&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;name=&quot;hidden-info&quot;&nbsp;value=&quot;hiden-info-value&quot;&nbsp;hidden&gt;<br>&nbsp;&nbsp;&lt;/fieldset&gt;<br>&nbsp;&nbsp;&lt;button&nbsp;type=&quot;submit&quot;&gt;Submit&lt;/button&gt;<br>&nbsp;&nbsp;&lt;button&nbsp;type=&quot;reset&quot;&gt;Reset&lt;/button&gt;<br>&lt;/form&gt;<br>使用fieldset可用于对表单进行分区<br>表单中的其他控件类型：<br>textarea&nbsp;（文本框）<br>select&nbsp;与&nbsp;option&nbsp;（下拉菜单可多选）<br><br><br><br><br>14、语义化<br><br>语义化（Semantic&nbsp;Tag）是指用合适的标签标识适当的内容，它可以起到搜索引擎优化（Search&nbsp;Engine&nbsp;Optimization），提高可访问性（例如盲人使用的屏幕阅读器），与此同时还可以提高代码的可读性。简而言之也就是在正确的地方使用正确的标签<br><br>","addLink":"","date":"2016-01-06 20:07","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1}],"css":[{"addArticleTtitle":"CSS语法","classify":"css","addarticleContent":"1、语法<br><br>/*&nbsp;选择器&nbsp;*/<br>.m-userlist&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;属性声明&nbsp;*/<br>&nbsp;&nbsp;margin:&nbsp;0&nbsp;0&nbsp;30px;<br>&nbsp;&nbsp;/*&nbsp;属性名:属性值;&nbsp;*/<br>}<br>.m-userlist&nbsp;.list&nbsp;{<br>&nbsp;&nbsp;position:&nbsp;relative;<br>&nbsp;&nbsp;height:&nbsp;100px;<br>&nbsp;&nbsp;overflow:&nbsp;hidden;<br>}<br><br><br>2、浏览器私有属性<br><br>Google&nbsp;Chrome,&nbsp;Safari&nbsp;(-webkit)<br>Firefox&nbsp;(-moz-)<br>IE&nbsp;(-ms-)<br>Opera&nbsp;(-o-)<br>.pic&nbsp;{<br>&nbsp;&nbsp;-webkit-transform:&nbsp;rotate(-3deg);<br>&nbsp;&nbsp;-ms-transform:&nbsp;rotate(-3deg);<br>&nbsp;&nbsp;transform:&nbsp;rotate(-3deg);<br>}<br><br>NOTE:&nbsp;使用&nbsp;http://pleeease.io/play/&nbsp;，CSS&nbsp;预处理器（Sass，Less，Stylus）或编辑器插件可自动添加浏览器厂商的私有属性前缀。<br><br><br>3、属性值语法<br><br>margin:&nbsp;[&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;auto&nbsp;]{1,4}<br>/*&nbsp;基本元素：&lt;length&gt;,&nbsp;&lt;percentage&gt;,&nbsp;auto*/<br>/*&nbsp;组合符号：[],&nbsp;|&nbsp;*/<br>/*&nbsp;数量符号：{1,4}&nbsp;*/<br><br>基本元素<br><br>关键字<br><br>auto<br>solid<br>bold<br>...<br>类型<br><br>基本类型<br>&lt;length&gt;<br>&lt;percentage&gt;<br>&lt;color&gt;<br>...<br><br>其他类型<br>&lt;padding-width&gt;<br>&lt;color-stop&gt;<br><br>符号<br>/<br>,<br>inherit,&nbsp;initial<br><br>组合符号<br><br>&lt;font-size&gt;&nbsp;&lt;font-family&gt;&nbsp;（&nbsp;&nbsp;两项必存，顺序毕遵）<br>合法：12px&nbsp;arial<br>不合法：2em<br>不合法：arial&nbsp;14px<br>&lt;length&gt;&&&lt;color&gt;&nbsp;(&&&nbsp;两项必存，顺序无碍)<br>合法：green&nbsp;2px<br>合法：1em&nbsp;orange<br>不合法：blue<br>underline&nbsp;||&nbsp;overline&nbsp;||&nbsp;line-through&nbsp;||&nbsp;blink&nbsp;(||&nbsp;至少选一，顺序无碍)<br>合法：underline<br>合法：overline&nbsp;underline<br>&lt;color&gt;&nbsp;|&nbsp;transparent（|&nbsp;只可选一，不可共存）<br>合法：orange<br>合法：transparent<br>不合法：orange&nbsp;transparent<br>bold&nbsp;[thin&nbsp;||&nbsp;&lt;length&gt;]（[]&nbsp;分组之用，视为整体）<br>合法：bold&nbsp;thin<br>合法：bold&nbsp;2em<br><br>数量符号<br><br>&lt;length&gt;（无则表示仅可出现一次）<br>合法：1px<br>合法：10em<br>不合法：1px&nbsp;2px<br>&lt;color-stop&gt;[,&nbsp;&lt;color-stop&gt;]+&nbsp;(+&nbsp;可出现一次或多次)<br>合法：#fff,&nbsp;red<br>合法：blue,&nbsp;green&nbsp;50%,&nbsp;gray<br>不合法：red<br>inset?&&&lt;color&gt;&nbsp;(?&nbsp;表示可选)<br>合法：inset&nbsp;orange<br>合法：red<br>&lt;length&gt;{2,4}&nbsp;({2,4}&nbsp;可出现次数和最少最多出现次数)<br>合法：1px&nbsp;2px<br>合法：1px&nbsp;2px&nbsp;3px<br>不合法:&nbsp;1px<br>不合法：1px&nbsp;2px&nbsp;3px&nbsp;4px&nbsp;5px<br>&lt;time&gt;[,&nbsp;&lt;time&gt;]*（*&nbsp;出现&nbsp;0&nbsp;次或多次）<br>合法：1s<br>合法：1s,4ms<br>&lt;time&gt;#（#&nbsp;出现一次或者多次，用,分隔）<br>合法：2s,&nbsp;4s<br>不合法：1s&nbsp;2s<br><br><br><br>4、@规则语法<br><br>@import&nbsp;&quot;subs.css&quot;;<br>@charset&nbsp;&quot;utf-8&quot;;<br>@media&nbsp;print&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;property:&nbsp;value&nbsp;*/<br>}<br>@keyframes&nbsp;fadein&nbsp;{<br>&nbsp;&nbsp;/*&nbsp;property:&nbsp;value&nbsp;*/<br>}<br>@标示符&nbsp;内容;<br>@标示符&nbsp;内容{}<br>@规则<br><br>常用的规则<br>@media&nbsp;（用于响应式布局）<br>@keyframes&nbsp;（CSS&nbsp;动画的中间步骤）<br>@font-face&nbsp;（引入外部字体）<br><br>其他规则（不常用）<br>@import<br>@charset<br>@namespace<br>@page<br>@supports<br>@document","addLink":"","date":"2016-01-06 21:03","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"CSS选择器","classify":"css","addarticleContent":"选择器可被看做表达式，通过它可以选择相应的元素并应用不同的样式。<br>简单选择器<br>元素选择器<br>组合选择器<br>简单选择器<br><br>简单选择器可组合使用。<br><br><br>1、标签选择器<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;p&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>2、类选择器<br><br>.className&nbsp;以&nbsp;.&nbsp;开头，名称可包含字母，数字，-，_，但必须以字母开头。它区分大小写并可出现多次。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&nbsp;class=&quot;special&nbsp;bold&quot;&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;p&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;.special&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;orange;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;.bold&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;font-weight:&nbsp;bold;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>3、id&nbsp;选择器<br><br>#idName&nbsp;以&nbsp;#&nbsp;开头且只可出现一次，其命名要求于&nbsp;.className&nbsp;相同。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&nbsp;id=&quot;special&quot;&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;#special&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;red;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>4、通配符选择器<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&nbsp;&nbsp;&lt;p&gt;Sample&nbsp;Paragraph&lt;/p&gt;<br>&lt;/div&gt;<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;*&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>5、属性选择器<br><br>[attr]&nbsp;或&nbsp;[attr=val]&nbsp;来选择相应的元素。#nav{...}&nbsp;既等同于&nbsp;[id=nav]{...}。IE7+<br>[attr~=val]&nbsp;可选用与选择包含&nbsp;val&nbsp;属性值的元素，像class=&quot;title&nbsp;sports&quot;&nbsp;与&nbsp;class=&quot;sports&quot;。.sports{...}&nbsp;既等同于&nbsp;[class~=sports]{...}&nbsp;IE7+<br>[attr|=val]&nbsp;可以选择val开头及开头紧接-的属性值。IE7+<br>[attr^=val]&nbsp;可选择以val开头的属性值对应的元素，如果值为符号或空格则需要使用引号&nbsp;&quot;&quot;。IE7+<br>[attr$=val]&nbsp;可选择以val结尾的属性值对应的元素。IE7+<br>[attr*=val]&nbsp;可选择以包含val属性值对应的元素。IE7+<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;form&nbsp;action=&quot;&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;text&quot;&nbsp;value=&quot;Xinyang&quot;&nbsp;disabled&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;password&quot;&nbsp;placeholder=&quot;Password&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;input&nbsp;type=&quot;button&quot;&nbsp;value=&quot;Button&quot;&gt;<br>&nbsp;&nbsp;&lt;/form&gt;<br>&lt;/div&gt;<br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;[disabled]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;background-color:&nbsp;orange;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;[type=button]&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;blue;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>6、伪类选择器<br><br>常用伪类选择器：<br>:link&nbsp;IE6+<br>:visited&nbsp;IE7+<br>:hover&nbsp;IE6中仅可用于链接<br>:active&nbsp;IE6/7中仅可用于链接<br>:enabled&nbsp;IE9+<br>:disabled&nbsp;IE9+<br>:checked&nbsp;IE9+<br>:first-child&nbsp;IE8+<br>:last-child&nbsp;IE9+<br>:nth-child(even)&nbsp;可为&nbsp;odd&nbsp;even&nbsp;或数字&nbsp;IE9+<br>:nth-last-child(n)&nbsp;n从&nbsp;0&nbsp;开始计算&nbsp;IE9+<br>:only-child&nbsp;仅选择唯一的元素&nbsp;IE9+<br>:only-of-type&nbsp;IE9+<br>:first-of-type&nbsp;IE9+<br>:last-of-type&nbsp;IE9+<br>:nth-of-type(even)&nbsp;IE9+<br>:nth-last-of-type(2n)&nbsp;IE9+<br><br>不常用伪类选择器：<br>:empty&nbsp;选中页面中无子元素的标签&nbsp;IE9+<br>:root&nbsp;选择&nbsp;HTML&nbsp;根标签&nbsp;IE9+<br>:not()&nbsp;参数为一般选择器&nbsp;IE9+<br>:target&nbsp;被锚点选中的目标元素&nbsp;IE9+<br>:lang()&nbsp;选中语言值为某类特殊值的元素&nbsp;IE7+<br><br>NOTE：element:nth-of-type(n)&nbsp;指父元素下第&nbsp;n&nbsp;个&nbsp;element&nbsp;元素，element:nth-child(n)&nbsp;指父元素下第&nbsp;n&nbsp;个元素且元素为&nbsp;element，若不是，选择失败。具体细节请在使用时查找文档。<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;a&nbsp;href=&quot;http://sample-site.com&quot;&nbsp;title=&quot;Sample&nbsp;Site&quot;&gt;Sample&nbsp;Site&lt;/a&gt;<br>&lt;/div&gt;<br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;/*&nbsp;伪类属性定义有顺序要求！&nbsp;*/<br>&nbsp;&nbsp;a:link&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;gray;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:visited&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:red;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:hover&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;green;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;鼠标悬停&nbsp;*/<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;a:active&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;color:&nbsp;orange;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;鼠标点击&nbsp;*/<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br><br><br>7、其他选择器<br><br>伪元素选择器<br><br>注意与伪类学则器的区分。<br>::first-letter&nbsp;IE6+<br>::first-line&nbsp;IE6+<br>::before{content:&nbsp;&quot;before&quot;}&nbsp;需与&nbsp;content&nbsp;一同使用&nbsp;IE8+<br>::after{content:&nbsp;&quot;after&quot;}&nbsp;需与&nbsp;content&nbsp;一同使用&nbsp;IE8+<br>::selection&nbsp;被用户选中的内容（鼠标选择高亮属性）IE9+&nbsp;Firefox需用&nbsp;-moz&nbsp;前缀<br><br>组合选择器<br><br>后代选择器&nbsp;.main&nbsp;h2&nbsp;{...}，使用&nbsp;表示&nbsp;IE6+<br>子选择器&nbsp;.main&gt;h2&nbsp;{...}，使用&gt;表示&nbsp;IE7+<br>兄弟选择器&nbsp;h2+p&nbsp;{...}，使用+表示&nbsp;IE7+<br>h2~p&nbsp;{...}，使用~表示（此标签无需紧邻）IE7+<br><br>选择器分组<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>/*&nbsp;下面两组样式声明效果一致&nbsp;*/<br>h1&nbsp;{color:&nbsp;red;}<br>h2&nbsp;{color:&nbsp;red;}<br>h3&nbsp;{color:&nbsp;red;}<br><br>h1,&nbsp;h2,&nbsp;h3&nbsp;{color:&nbsp;red;}<br>&lt;/style&gt;<br><br><br>8、继承、优先、层级<br><br>9、继承<br><br>子元素继承父元素的样式，但并不是所有属性都是默认继承的。通过文档中的&nbsp;inherited:&nbsp;yes&nbsp;来判断属性是否可以自动继承。<br><br><br>自动继承属性：<br>color<br>font<br>text-align<br>list-style<br>...<br>非继承属性：<br>background<br>border<br>position<br>...<br><br><br>10、优先<br><br>CSS&nbsp;Specificity&nbsp;Calculator&nbsp;可以在这里找到。更多关于&nbsp;CSS&nbsp;优先级别的信息可以在这里找到（英文）。<br>计算方法：<br>a&nbsp;=&nbsp;行内样式<br>b&nbsp;=&nbsp;id&nbsp;选择器的数量<br>c&nbsp;=&nbsp;类、伪类的属性选择器的数量<br>d&nbsp;=&nbsp;标签选择器和伪元素选择器的数量<br><br>NOTE：从上到下优先级一次降低，且优先级高的样式会将优先级低的样式覆盖。大致公式（并不准确）如下。<br>value&nbsp;=&nbsp;a&nbsp;*&nbsp;1000&nbsp;+&nbsp;b&nbsp;*&nbsp;100&nbsp;+&nbsp;c&nbsp;*&nbsp;10&nbsp;+&nbsp;d<br><br>改变优先级<br><br>改变样式声明先后顺序<br>提升选择器优先级<br>!important（慎用）<br><br><br>11、层叠<br><br>层叠为相同属性根据优先级覆盖，如优先级相同则后面会覆盖前面的属性，而不同属性则会合并<br><br>","addLink":"","date":"2016-01-06 21:22","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"CSS样式---文本相关","classify":"css","addarticleContent":"1、字体<br><br>改变字号<br><br>font-size:&nbsp;&lt;absolute-size&gt;&nbsp;|&nbsp;&lt;relative-size&gt;&nbsp;|&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;inherit<br>&lt;absolute-size&gt;&nbsp;有&nbsp;small&nbsp;large&nbsp;medium<br>&lt;relative-size&gt;&nbsp;有&nbsp;smaller&nbsp;larger<br>div<br>&nbsp;&nbsp;font-size&nbsp;12px<br>&nbsp;&nbsp;p#sample0<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;16px<br>&nbsp;&nbsp;p#sample1<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;2em<br>&nbsp;&nbsp;p#sample2<br>&nbsp;&nbsp;&nbsp;&nbsp;font-size&nbsp;200%<br><br>NOTE：以上两值在开发中并不常用。2em&nbsp;与&nbsp;200%&nbsp;都为父元素默认大小的两倍（参照物为父元素的字体大小&nbsp;12px）。<br><br>改变字体<br><br>font-family:&nbsp;[&nbsp;&lt;family-name&gt;&nbsp;|&nbsp;&lt;generic-family&gt;&nbsp;]#<br>&lt;generic-family&gt;&nbsp;可选选项，但具体使用字体由浏览器决定<br>serif<br>sans-serif<br>cursive<br>fantasy<br>monospace<br>font-family:&nbsp;arial,&nbsp;Verdana,&nbsp;sans-serif;<br><br>NOTE：优先使用靠前的字体<br><br>加粗字体<br><br>font-weight:&nbsp;normal&nbsp;|&nbsp;bold&nbsp;|&nbsp;bolder&nbsp;|&nbsp;lighter&nbsp;|&nbsp;100&nbsp;|&nbsp;200&nbsp;|&nbsp;300&nbsp;|&nbsp;400&nbsp;|&nbsp;500&nbsp;|&nbsp;600&nbsp;|&nbsp;700&nbsp;|&nbsp;800&nbsp;|&nbsp;900<br>font-weight:&nbsp;normal;<br>font-weight:&nbsp;bold;<br><br>倾斜字体<br><br>font-style:&nbsp;normal&nbsp;|&nbsp;italic&nbsp;|&nbsp;oblique&nbsp;|&nbsp;inherit<br>italic&nbsp;使用字体中的斜体，而&nbsp;oblique&nbsp;在没有斜体字体时强制倾斜字体。<br><br>更改行距<br><br>line-height:&nbsp;normal&nbsp;|&nbsp;&lt;number&gt;&nbsp;|&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;<br>normal&nbsp;值为浏览器决定，在1.1至1.2之间（通常设置值为1.14左右）<br>/*&nbsp;length&nbsp;类型&nbsp;*/<br>line-height:&nbsp;40px;<br>line-height:&nbsp;3em;<br>/*&nbsp;percentage&nbsp;类型&nbsp;*/<br>line-height:&nbsp;300%;<br>/*&nbsp;number&nbsp;类型&nbsp;*/<br>line-height:&nbsp;3;<br><br>NOTE：当line-height为&nbsp;number&nbsp;类型时，子类直接继承其数值（不计算直接继承）。&nbsp;而当为&nbsp;percentage&nbsp;类型时，子类则会先计算再显示（先计算后继承）。<br><br>字间距（字母间距）<br><br>letter-spacing:&nbsp;normal&nbsp;|&nbsp;&lt;length&gt;<br>其用于设置字间距或者字母间距，此属性适用于中文或西文中的字母。&nbsp;如果需要设置西文中词与词的间距或标签直接的距离则需要使用&nbsp;word-spacing。<br>word-spacing:&nbsp;normal&nbsp;|&nbsp;&lt;length&gt;<br>font&nbsp;shorthand<br><br>font:&nbsp;[&nbsp;[&nbsp;&lt;‘font-style’&gt;&nbsp;||&nbsp;&lt;font-variant-css21&gt;&nbsp;||&nbsp;&lt;‘font-weight’&gt;&nbsp;||&nbsp;&lt;‘font-stretch’&gt;&nbsp;]?&nbsp;&lt;‘font-size’&gt;&nbsp;[&nbsp;/&nbsp;&lt;‘line-height’&gt;&nbsp;]?&nbsp;&lt;‘font-family’&gt;&nbsp;]&nbsp;|&nbsp;caption&nbsp;|&nbsp;icon&nbsp;|&nbsp;menu&nbsp;|&nbsp;message-box&nbsp;|&nbsp;small-caption&nbsp;|&nbsp;status-bar<br>font:&nbsp;30px/2&nbsp;&quot;Consolas&quot;,&nbsp;monospace;<br>font:&nbsp;italic&nbsp;bold&nbsp;20px/1.5&nbsp;arial,&nbsp;serif;<br>font:&nbsp;20px&nbsp;arial,&nbsp;serif;<br><br>NOTE：当其他值为空时，均被设置为默认值。<br><br>改变文字颜色<br><br>color:&nbsp;&lt;color&gt;<br>element&nbsp;{&nbsp;color:&nbsp;red;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;#f00;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;#ff0000;&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgb(255,0,0);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgb(100%,&nbsp;0%,&nbsp;0%);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;hsl(0,&nbsp;100%,&nbsp;50%);&nbsp;}<br><br>/*&nbsp;50%&nbsp;translucent&nbsp;*/<br>element&nbsp;{&nbsp;color:&nbsp;rgba(255,&nbsp;0,&nbsp;0,&nbsp;0.5);&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;hsla(0,&nbsp;100%,&nbsp;50%,&nbsp;0.5);&nbsp;}<br><br>/*&nbsp;全透明&nbsp;*/<br>element&nbsp;{&nbsp;color:&nbsp;transparent&nbsp;}<br>element&nbsp;{&nbsp;color:&nbsp;rgba(0,&nbsp;0,&nbsp;0,&nbsp;0);&nbsp;}<br><br><br><br>2、对齐方式<br><br>文字居中<br><br>text-align:&nbsp;start&nbsp;|&nbsp;end&nbsp;|&nbsp;left&nbsp;|&nbsp;right&nbsp;|&nbsp;center&nbsp;|&nbsp;justify&nbsp;|&nbsp;match-parent&nbsp;|&nbsp;start&nbsp;end<br><br>NOTE：默认为文本左对齐。<br><br>文本垂直对齐<br><br>vertical-align:&nbsp;baseline&nbsp;|&nbsp;sub&nbsp;|&nbsp;super&nbsp;|&nbsp;text-top&nbsp;|&nbsp;text-bottom&nbsp;|&nbsp;middle&nbsp;|&nbsp;top&nbsp;|&nbsp;bottom&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;|&nbsp;&lt;length&gt;<br>NOTE：&lt;percentage&gt;的参照物为line-height<br><br>文本缩进<br><br>text-indent:&nbsp;&lt;length&gt;&nbsp;|&nbsp;&lt;percentage&gt;&nbsp;&&&nbsp;[&nbsp;hanging&nbsp;||&nbsp;each-line&nbsp;]<br>NOTE：缩进两个字可使用&nbsp;text-indent:&nbsp;2em;<br><br><br><br>3、格式处理<br><br>保留空格格式<br><br>white-space:&nbsp;normal&nbsp;|&nbsp;pre&nbsp;|&nbsp;nowrap&nbsp;|&nbsp;pre-wrap&nbsp;|&nbsp;pre-line<br>pre&nbsp;行为同&nbsp;&lt;pre&gt;&nbsp;一致。<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;New&nbsp;lines&nbsp;&nbsp;Spaces&nbsp;and&nbsp;tabs&nbsp;&nbsp;Text&nbsp;wrapping<br>normal&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>nowrap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No&nbsp;wrap<br>pre&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;No&nbsp;wrap<br>pre-wrap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>pre-line&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Preserve&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Collapse&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Wrap<br>文字换行<br><br>word-wrap:&nbsp;normal&nbsp;|&nbsp;break-word<br><br>NOTE：允许长单词自动换行。<br><br>word-break:&nbsp;normal&nbsp;|&nbsp;break-all&nbsp;|&nbsp;keep-all<br><br>NOTE：break-all&nbsp;单词中的任意字母间都可以换行。<br><br><br><br>4、文本装饰<br><br>文字阴影<br><br>text-shadow:none&nbsp;|&nbsp;&lt;shadow-t&gt;#&nbsp;或&nbsp;text-shadow:none&nbsp;|&nbsp;[&lt;length&gt;{2,3}&&&lt;color&gt;?]#<br>p&nbsp;{<br>&nbsp;&nbsp;text-shadow:&nbsp;1px&nbsp;1px&nbsp;1px&nbsp;#000,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3px&nbsp;3px&nbsp;5px&nbsp;blue;<br>}<br>value&nbsp;=&nbsp;The&nbsp;X-coordinate&nbsp;X&nbsp;轴偏移像素<br>value&nbsp;=&nbsp;The&nbsp;Y-coordinate&nbsp;Y&nbsp;轴偏移像素<br>value&nbsp;=&nbsp;The&nbsp;blur&nbsp;radius&nbsp;阴影模糊半径<br>value&nbsp;=&nbsp;The&nbsp;color&nbsp;of&nbsp;the&nbsp;shadow&nbsp;阴影颜色（默认为文字颜色）<br><br>文本装饰（下划线等）<br><br>text-decoration:&nbsp;&lt;text-decoration-line&gt;&nbsp;||&nbsp;&lt;text-decoration-style&gt;&nbsp;||&nbsp;&lt;text-decoration-color&gt;<br>h1.under&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;underline;<br>}<br>h1.over&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;overline;<br>}<br>p.line&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;line-through;<br>}<br>p.blink&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;blink;<br>}<br>a.none&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;none;<br>}<br>p.underover&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;text-decoration:&nbsp;underline&nbsp;overline;<br>}<br><br><br><br>5、高级设置<br><br>省略字符<br><br>text-overflow:&nbsp;[&nbsp;clip&nbsp;|&nbsp;ellipsis&nbsp;|&nbsp;&lt;string&gt;&nbsp;]{1,2}<br>/*&nbsp;常用配合&nbsp;*/<br>text-overflow:&nbsp;ellipsis;<br>overflow:&nbsp;hidden;&nbsp;/*&nbsp;溢出截取&nbsp;*/<br>white-space:&nbsp;nowrap;&nbsp;/*&nbsp;禁止换行&nbsp;*/<br><br>更换鼠标形状<br><br>cursor:&nbsp;[[&lt;funciri&gt;,]*&nbsp;[&nbsp;auto&nbsp;|&nbsp;crosshair&nbsp;|&nbsp;default&nbsp;|&nbsp;pointer&nbsp;|&nbsp;move&nbsp;|&nbsp;e-resize&nbsp;|&nbsp;ne-resize&nbsp;|&nbsp;nw-resize&nbsp;|&nbsp;n-resize&nbsp;|&nbsp;se-resize&nbsp;|&nbsp;sw-resize&nbsp;|&nbsp;s-resize&nbsp;|&nbsp;w-resize|&nbsp;text&nbsp;|&nbsp;wait&nbsp;|&nbsp;help&nbsp;]]&nbsp;|&nbsp;inherit<br><br>常用属性<br><br>cursor:&nbsp;[&lt;uri&gt;,]*[auto&nbsp;|&nbsp;default&nbsp;|&nbsp;none&nbsp;|&nbsp;help&nbsp;|&nbsp;pointer&nbsp;|&nbsp;zoom-in&nbsp;|&nbsp;zoom-out&nbsp;|&nbsp;move]<br>&lt;uri&gt;&nbsp;图片资源地址代替鼠标默认形状<br>&lt;default&gt;&nbsp;默认光标<br>&lt;none&gt;&nbsp;隐藏光标<br>&lt;pointer&gt;&nbsp;手型光标<br>&lt;zoom-in&gt;<br>&lt;zoom-out&gt;<br>&lt;move&gt;<br>cursor:&nbsp;pointer;<br>cursor:&nbsp;url(image-name.cur),&nbsp;pointer;<br>/*&nbsp;当&nbsp;uri&nbsp;失效时或者则会起作用&nbsp;*/<br><br>强制继承<br><br>inherit&nbsp;会强制继承父元素的属性值。<br>font-size:&nbsp;inherit;<br>font-family:&nbsp;inherit;<br>font-weight:&nbsp;inherit;<br>...<br>word-wrap:&nbsp;inherit;<br>work-break:&nbsp;inherit<br>text-showdow:&nbsp;inherit<br><br>NOTE：具体在使用时可查询文档","addLink":"","date":"2016-01-07 10:30","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2}],"javascript":[{"addArticleTtitle":"JavaScript 介绍","classify":"javascript","addarticleContent":"前端开发三要素，HTML（描述网页内容），CSS（描述样式），JavaScript（控制网页行为）。JavaScript&nbsp;为解释型编程语（程序不需要编译，程序在运行时才翻译成机器语言，每执&nbsp;行一次都要翻译一次)，运行环境也很广泛（浏览器或操作系统中&nbsp;NodeJS）。<br>JavaScript&nbsp;又分为两部分，ECMAScript&nbsp;和&nbsp;DOM。其中&nbsp;JavaScript&nbsp;的基本的语言属性（例如，变量，作用域等）都在&nbsp;ECMAScript&nbsp;中有详细的定义好比汉子在字典中的定义。DOM&nbsp;中则定义如何修改文档结构（HTML&nbsp;或&nbsp;XML&nbsp;等）。<br>JavaScript的引入方法如下：<br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;title&gt;Demo&nbsp;Page&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;以上代码忽略&nbsp;--&gt;<br><br>&nbsp;&nbsp;&lt;!--&nbsp;为性能优化需将&nbsp;javascript&nbsp;代码放置在&nbsp;body&nbsp;标签的最末端&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;外联文件&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;src=&quot;/javascripts/application.js&quot;&nbsp;type=&quot;text/javascript&quot;&nbsp;charset=&quot;utf-8&quot;&nbsp;async&nbsp;defer&gt;&lt;/script&gt;<br>&nbsp;&nbsp;&lt;!--&nbsp;内嵌代码&nbsp;--&gt;<br>&nbsp;&nbsp;&lt;script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;document.write(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"","date":"2016-01-06 22:54","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"基础语法","classify":"javascript","addarticleContent":"1、变量标示符<br><br>变量的命名<br><br>var&nbsp;_name&nbsp;=&nbsp;null;<br>var&nbsp;$name&nbsp;=&nbsp;null;<br>var&nbsp;name0&nbsp;=&nbsp;null;<br><br><br><br>2、关键字与保留字<br><br>JavaScript&nbsp;在语言定义中保留的字段，这些字段在语言使用中存在特殊意义或功能，在程序编写的过程中不可以当做变量或函数名称使用。无需记忆，报错修改即可。<br>关键字与保留字可以在&nbsp;Mozilla&nbsp;开发者站点找到。<br><br><br><br>3、字符敏感<br><br>字符串的大小写是有所区分的，不同字符指代不同的变量。<br><br><br><br>4、严格模式<br><br>增益<br><br>消除语法中不合理与不安全的问题，保证代码正常运行<br>提高编译效率，增加运行速度<br><br>使用方法<br><br>&lt;!--&nbsp;全局使用&nbsp;严格&nbsp;模式&nbsp;--&gt;<br>&quot;use&nbsp;strict&quot;;<br>(function(){<br>&nbsp;&nbsp;console.log(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>})()<br><br>&lt;!--&nbsp;或者在函数内部声明使用&nbsp;严格&nbsp;模式&nbsp;--&gt;<br>(function(){<br>&nbsp;&nbsp;&quot;use&nbsp;strict&quot;;<br>&nbsp;&nbsp;console.log(&quot;&gt;&gt;&gt;&nbsp;Hello,&nbsp;world!&quot;);<br>})()<br><br>严格模式与标准模式的区别：<br><br>严格模式下隐式声明或定义变量被静止<br>严格模式下对象重名的属性在严格模式下被静止<br>严格模式下&nbsp;arguments.callee()&nbsp;被禁用<br>严格模式下&nbsp;with()&nbsp;语句<br>更多限制<br><br><br><br>5、注释<br><br>/*<br>&nbsp;&nbsp;多行注释，不可嵌套<br>&nbsp;*/<br><br>//&nbsp;单行注释","addLink":"","date":"2016-01-07 11:23","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"类型","classify":"javascript","addarticleContent":"1、javascript&nbsp;类型系统可以分为标准类型和对象类型，进一步标准类型又可以分为原始类型和引用类型，而对象类型又可以分为内置对象类型、普通对象类型、自定义对象类型。<br><br><br><br>2、标准类型<br><br>标准类型共包括了6个分别是：<br>原始类型（值类型）：<br>Undefined&nbsp;undefined<br>Null&nbsp;null<br>Boolean&nbsp;true<br>String&nbsp;&quot;hello&quot;<br>Number&nbsp;123<br><br><br><br>3、引用类型（对象类型）：<br><br>Object<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>&lt;!--&nbsp;原始类型变量的包装类型如下&nbsp;--&gt;<br>var&nbsp;bool&nbsp;=&nbsp;new&nbsp;Boolean(true);<br>var&nbsp;str&nbsp;=&nbsp;new&nbsp;String(&quot;hello&quot;);<br>var&nbsp;num&nbsp;=&nbsp;new&nbsp;Number(1);<br>var&nbsp;obj0&nbsp;=&nbsp;new&nbsp;Object();<br><br><br><br>4、原始类型和引用类型的区别：<br><br>原始类型储存在栈（Stack）中储存变量的值，而引用类型在栈中保存的是所引用内容储存在堆（Heap）中的值。类似于指针的概念，引用类型并非储存变量真实数值而是地址，所以对已引用类型的复制其实只是复制了相同的地址而非实际的变量值。<br><br>Undefined&nbsp;值：undefined&nbsp;出现场景：<br><br>以声明为赋值的变量&nbsp;var&nbsp;obj;<br>获取对象不存在的属性&nbsp;var&nbsp;obj&nbsp;=&nbsp;{x:&nbsp;0};&nbsp;obj.y;<br>无返回值函数的执行结果&nbsp;function&nbsp;f(){};&nbsp;var&nbsp;obj&nbsp;=&nbsp;f();<br>函数参数没有传入&nbsp;function&nbsp;f(i){console.log(i)};&nbsp;f();<br>void(expression)<br><br>Null&nbsp;值：null&nbsp;出现场景：<br><br>获取不存在的对象&nbsp;document.getElementById(&quot;not-exist-element&quot;)<br><br>Boolean&nbsp;值：true,&nbsp;false&nbsp;出现场景：<br><br>条件语句导致的系统执行的隐式类型转换&nbsp;if(隐式转换){}<br>字面量或变量定义&nbsp;var&nbsp;bool&nbsp;=&nbsp;true;<br><br>String&nbsp;值：字符串&nbsp;出现场景：<br><br>var&nbsp;str&nbsp;=&nbsp;&quot;Hello,&nbsp;world!&quot;;<br><br>Number&nbsp;值：整型直接量，八进制直接量（0-），十六进制直接量（0x-)，浮点型直接量&nbsp;出现场景：<br><br>1026<br>3.14<br>1.2e5<br>0x10<br><br>Object&nbsp;值：属性集合&nbsp;出现场景：<br><br>var&nbsp;obj&nbsp;=&nbsp;{name:&nbsp;&quot;Xinyang&quot;};<br><br><br><br>5、变量转换表<br><br>Value&nbsp;&nbsp;Boolean&nbsp;&nbsp;Number&nbsp;&nbsp;String<br>undefined&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;undefined&quot;<br>null&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;null&quot;<br>true&nbsp;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;1&nbsp;&nbsp;&quot;true&quot;<br>false&nbsp;&nbsp;f&nbsp;alse&nbsp;&nbsp;0&nbsp;&nbsp;&quot;false&quot;<br>&quot;&quot;&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;&quot;<br>&quot;123&quot;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;123&nbsp;&nbsp;&quot;123&quot;<br>&quot;1a&quot;&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;1a&quot;<br>0&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;0&nbsp;&nbsp;&quot;0&quot;<br>1&nbsp;&nbsp;&nbsp;true&nbsp;&nbsp;1&nbsp;&nbsp;&quot;1&quot;<br>Infinity&nbsp;&nbsp;true&nbsp;&nbsp;Infinity&nbsp;&nbsp;&quot;Infinity&quot;<br>NaN&nbsp;&nbsp;&nbsp;false&nbsp;&nbsp;&nbsp;NaN&nbsp;&nbsp;&quot;NaN&quot;<br>{}&nbsp;&nbsp;true&nbsp;&nbsp;NaN&nbsp;&nbsp;&nbsp;&nbsp;&quot;[object&nbsp;Object]&quot;<br><br><br><br>6、类型识别<br><br>typeof<br>Object.prototype.toString<br>constructor<br>instanceof<br><br>typeof：<br>可以是标准类型（Null&nbsp;除外）<br>不可识别具体的对象类型（Function&nbsp;除外）<br>Object.prototype.toString：<br>可是识别标准类型及内置对象类型（例如，Object,&nbsp;Date,&nbsp;Array）<br>不能识别自定义对象类型<br><br>constructor：<br>可以识别标准类型（Undefined/Null&nbsp;除外）<br>可识别内置对象类型<br>可识别自定义对象类型<br>function&nbsp;getConstructiorName(obj)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;obj&nbsp;&&&nbsp;obj.constructor&nbsp;&&&nbsp;obj.constructor.toString().match(/function&#92;s*([^(]*)/)[1];<br>}<br>getConstructiorName([])&nbsp;===&nbsp;&quot;Array&quot;;&nbsp;//&nbsp;true<br><br>instanceof：<br>不可判别原始类型<br>可判别内置对象类型<br>可判别自定义对象类型<br>","addLink":"","date":"2016-01-07 11:34","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"类型识别","classify":"javascript","addarticleContent":"1、类型识别<br><br>typeof<br>Object.prototype.toString<br>constructor<br>instanceof<br><br>2、typeof：<br>可以是标准类型（Null&nbsp;除外）<br>不可识别具体的对象类型（Function&nbsp;除外）<br>Object.prototype.toString：<br>可是识别标准类型及内置对象类型（例如，Object,&nbsp;Date,&nbsp;Array）<br>不能识别自定义对象类型<br><br>3、constructor：<br>可以识别标准类型（Undefined/Null&nbsp;除外）<br>可识别内置对象类型<br>可识别自定义对象类型<br><br>4、function&nbsp;getConstructiorName(obj)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;obj&nbsp;&&&nbsp;obj.constructor&nbsp;&&&nbsp;obj.constructor.toString().match(/function&#92;s*([^(]*)/)[1];<br>}<br>getConstructiorName([])&nbsp;===&nbsp;&quot;Array&quot;;&nbsp;//&nbsp;true<br><br>5、instanceof：<br>不可判别原始类型<br>可判别内置对象类型<br>可判别自定义对象类型<br>JavaScript的数据类型可以分为：标准类型和对象类型。<br>标准类型有：undefined&nbsp;Null&nbsp;Boolean&nbsp;Date&nbsp;Number&nbsp;Object<br>对象类型（构造器类型）：Boolean&nbsp;Date&nbsp;Number&nbsp;Object&nbsp;Array&nbsp;Date&nbsp;Error&nbsp;Function&nbsp;RegExp<br><br>6、用来判断数据类型的一般有四种方式，分别是：<br>typeof<br>Prototype.toString()<br>constructor<br>instanceof<br><br>7、下面我们写一个HTML来检验一下：<br><br>&lt;html&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;JavaScript类型判断&lt;/title&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;.red{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;background-color:red;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Standard&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;a;&nbsp;&nbsp;&nbsp;&nbsp;//undefined<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;b&nbsp;=&nbsp;document.getElementById(&quot;no_exist_element&quot;);&nbsp;//null<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;c&nbsp;=&nbsp;true;&nbsp;&nbsp;&nbsp;&nbsp;//Boolean<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;d&nbsp;=&nbsp;1;&nbsp;&nbsp;&nbsp;&nbsp;//Number<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;&quot;str&quot;;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//String<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;f&nbsp;=&nbsp;{name&nbsp;:&nbsp;&quot;Tom&quot;};&nbsp;&nbsp;&nbsp;&nbsp;//Object<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Object&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;g&nbsp;=&nbsp;new&nbsp;Boolean(true);&nbsp;&nbsp;&nbsp;&nbsp;//Boolean&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;h&nbsp;=&nbsp;new&nbsp;Number(1);&nbsp;&nbsp;&nbsp;&nbsp;//Number&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;i&nbsp;=&nbsp;new&nbsp;String(&quot;str&quot;);&nbsp;&nbsp;&nbsp;&nbsp;//String&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;j&nbsp;=&nbsp;new&nbsp;Object({name&nbsp;:&nbsp;&quot;Tom&quot;});&nbsp;//Object&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;k&nbsp;=&nbsp;new&nbsp;Array([1,&nbsp;2,&nbsp;3,&nbsp;4]);&nbsp;&nbsp;&nbsp;&nbsp;//Array&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;l&nbsp;=&nbsp;new&nbsp;Date();&nbsp;&nbsp;&nbsp;&nbsp;//Date&nbsp;Object<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;m&nbsp;=&nbsp;new&nbsp;Error();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;n&nbsp;=&nbsp;new&nbsp;Function();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;o&nbsp;=&nbsp;new&nbsp;RegExp(&quot;&#92;&#92;d&quot;);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Self-Defined&nbsp;Object&nbsp;Type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;2);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Use&nbsp;the&nbsp;Prototype.toString()&nbsp;to&nbsp;judge&nbsp;the&nbsp;type&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;type(obj){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Object.prototype.toString.call(obj).slice(8,&nbsp;-1).toLowerCase();<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/script&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;table&nbsp;border=&quot;1&quot;&nbsp;cellspacing=&quot;0&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;typeof&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;toString&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;constructor&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;instanceof&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;undefined&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;a)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(a))&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(a.constructor)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(a&nbsp;instanceof&nbsp;&quot;undefined&quot;)&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Null&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;b);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(b));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(b.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(b&nbsp;instanceof&nbsp;&quot;null&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Boolean&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;c);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(c));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(c.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(c&nbsp;instanceof&nbsp;&quot;boolean&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Number&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;d);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(d));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(d.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(d&nbsp;instanceof&nbsp;&quot;number&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;String&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;e);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(e));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(e.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(e&nbsp;instanceof&nbsp;&quot;string&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;f);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(f));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(f.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(f&nbsp;instanceof&nbsp;&quot;object&quot;);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&lt;td&nbsp;colspan=&quot;5&quot;&gt;-----------------------&lt;/td&gt;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Boolean&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;g);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(g));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(g.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(g&nbsp;instanceof&nbsp;Boolean);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Number&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;h);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(h));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(h.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(h&nbsp;instanceof&nbsp;Number);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;String&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;i);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(i));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(i.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(i&nbsp;instanceof&nbsp;String);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Object&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;j);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(j));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(j.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(j&nbsp;instanceof&nbsp;Object);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Array&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;k);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(k));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(k.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(k&nbsp;instanceof&nbsp;Array);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Date&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;l);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(l));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(l.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(l&nbsp;instanceof&nbsp;Date);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Error&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;m);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(m));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(m.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(m&nbsp;instanceof&nbsp;Error);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Function&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;n);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(n));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(n.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(n&nbsp;instanceof&nbsp;Function);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;RegExp&nbsp;Object&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;o);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(o));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(o.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(o&nbsp;instanceof&nbsp;RegExp);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;&lt;td&nbsp;colspan=&quot;5&quot;&gt;-----------------------&lt;/td&gt;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;Point&nbsp;Objct&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(typeof&nbsp;p);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&nbsp;class=&quot;red&quot;&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(type(p));&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(p.constructor);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;td&gt;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;document.write(p&nbsp;instanceof&nbsp;Point);&lt;/script&gt;&lt;/td&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/tr&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/table&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>","addLink":"","date":"2016-01-07 12:32","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"内置对象","classify":"javascript","addarticleContent":"通常情况下只有对象才存在方法，但&nbsp;JavaScript&nbsp;不同它具有12种内置对象。内置对象又分为两类，普通对象（属性和方法）与构造器对象（可用于实例化普通对象，它还包含原型对象属性和方法，及实例对象属性和方法）。<br><br>1、JavaScript&nbsp;对象原型链的简要说明<br><br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>p.move(2,2);<br><br>__proto__&nbsp;称之为原型链，有如下特点：<br>__proto__&nbsp;为对象内部的隐藏属性<br>__proto__&nbsp;为实例化该对象的构造器的&nbsp;prototype&nbsp;对象的引用，因此可以直接方法&nbsp;prototype&nbsp;的所有属性和方法<br>除了&nbsp;Object&nbsp;每个对象都有一个&nbsp;__proto__&nbsp;属性且逐级增长形成一个链，原型链顶端是一个&nbsp;Object&nbsp;对象。<br>在调用属性或方法时，引擎会查找自身的属性如果没有则会继续沿着原型链逐级向上查找，直到找到该方法并调用。<br>__proto__&nbsp;跟浏览器引擎实现相关，不同的引擎中名字和实现不尽相同(chrome、firefox中名称是&nbsp;__proto__&nbsp;，并且可以被访问到，IE中无法访问)。基于代码兼容性、可读性等方面的考虑，不建议开发者显式访问&nbsp;__proto__&nbsp;属性或通过&nbsp;__proto__更改原型链上的属性和方法，可以通过更改构造器prototype&nbsp;对象来更改对象的&nbsp;__proto__&nbsp;属性。<br><br><br><br>2、构造器对象与普通对象的区别<br><br>1、构造器对象原型链中的&nbsp;__proto__&nbsp;是一个&nbsp;Function.prototype&nbsp;对象的引用，因此可以调用&nbsp;Function.prototype的属性及方法<br>2、构造器对象本身有一个&nbsp;prototype&nbsp;属性，用该构造器实例化对象时该&nbsp;prototype&nbsp;会被实例对象的&nbsp;__proto__&nbsp;所引用<br>3、构造器对象本身是一个&nbsp;function&nbsp;对象，因此也会有自身属性<br><br><br><br>3、标准内置对象<br><br>构造器对象<br>Object<br>Boolean<br>String<br>Number<br>Function<br>Array<br>RegExp<br>Date<br>Error<br><br>其他对象<br><br>Math<br>JSON<br><br>全局对象<br><br>内置对象，其实也叫内置构造器，它们可以通过&nbsp;new&nbsp;的方式创建一个新的实例对象。内置对象所属的类型就叫内置对象类型。其声明方式如下：<br>var&nbsp;i&nbsp;=&nbsp;new&nbsp;String(&quot;str&quot;);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;String&nbsp;Object<br>var&nbsp;h&nbsp;=&nbsp;new&nbsp;Number(1);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Number&nbsp;Object<br>var&nbsp;g&nbsp;=&nbsp;new&nbsp;Boolean(true);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Boolean&nbsp;Object<br>var&nbsp;j&nbsp;=&nbsp;new&nbsp;Object({name&nbsp;:&nbsp;&quot;Tom&quot;});&nbsp;//&nbsp;Object&nbsp;Object<br>var&nbsp;k&nbsp;=&nbsp;new&nbsp;Array([1,&nbsp;2,&nbsp;3,&nbsp;4]);&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Array&nbsp;Object<br>var&nbsp;l&nbsp;=&nbsp;new&nbsp;Date();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Date&nbsp;Object<br>var&nbsp;m&nbsp;=&nbsp;new&nbsp;Error();<br>var&nbsp;n&nbsp;=&nbsp;new&nbsp;Function();<br>var&nbsp;o&nbsp;=&nbsp;new&nbsp;RegExp(&quot;&#92;&#92;d&quot;);<br><br>注意：虽然标准类型中有Boolean&nbsp;String&nbsp;Number&nbsp;Object，内置对象类型中也有Boolean&nbsp;String&nbsp;Number&nbsp;Object，但它们其实是通过不同的声明方式来进行区别的。标准类型通过直接赋值，而对象类型则是通过构造器实现初始化。<br><br><br><br>4、Object<br><br>构造器的原型对象在对象实例化时将会被添加到实例对象的原型链当中。&nbsp;__proto__&nbsp;为原型链属性，编码时不可被显像调用。但是实例化对象可以调用原型链上的方法。<br>用&nbsp;String/Number&nbsp;等构造器创建的对象原型链顶端对象始终是一个Object对象，因此这些对象可以调用Object的原型对象属性和方法。所以&nbsp;String/Number&nbsp;等构造器是&nbsp;Object&nbsp;的子类。<br>更多关于&nbsp;Object&nbsp;的内容可以在这里找到。<br><br>构造器说明：<br>Object&nbsp;是属性和方法的集合<br>String/Number/Boolean/Array/Date/Error&nbsp;构造器均为&nbsp;Object&nbsp;的子类并集成&nbsp;Object&nbsp;原型对象的属性及方法。<br>实例化方法<br>var&nbsp;obj0&nbsp;=&nbsp;new&nbsp;Object({name:&nbsp;&quot;X&quot;,&nbsp;age:&nbsp;13});<br>//&nbsp;常用方法<br>var&nbsp;obj1&nbsp;=&nbsp;{name:&nbsp;&quot;Q&quot;,&nbsp;age:&nbsp;14};<br>属性及方法<br>prototype<br>create<br>keys<br>...<br>**原型对象属性及其方法<br>constructor<br>toString<br>valueOf<br>hasOwnProperty<br>...<br>实例对象属性及方法<br>无<br><br>Object.create<br><br>功能：基于原型对象创造新对象<br>//&nbsp;Object.create(prototype[,&nbsp;propertiesObject])<br>var&nbsp;prototype&nbsp;=&nbsp;{name:&nbsp;&quot;X&quot;,&nbsp;age:&nbsp;13};<br>var&nbsp;obj&nbsp;=&nbsp;Object.create(proto);<br>Object.prototype.toString<br><br>功能：获取方法调用者的标准类型<br>//&nbsp;objectInstance.toString()<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>obj.toString();&nbsp;//&nbsp;Object<br>Object.prototype.hasOwnProperty<br><br>功能：判断一个属性是否是一个对象的自身属性<br>//&nbsp;objectInstance.hasOwnProperty(&quot;propertyName&quot;)<br>var&nbsp;obj&nbsp;=&nbsp;Object.create({a:&nbsp;1,&nbsp;b:&nbsp;2});<br>obj.c&nbsp;=&nbsp;3;<br>obj.hasOwnProperty(&quot;a&quot;);&nbsp;//&nbsp;false<br>obj.hasOwnProperty(&quot;c&quot;);&nbsp;//&nbsp;true<br>Boolean<br><br>构造器说明：值为&nbsp;true&nbsp;与&nbsp;false<br>属性及方法<br>prototype<br>**原型对象属性及其方法<br>constructor,&nbsp;toString,&nbsp;valueOf<br>String<br><br>构造器说明：单双引号内的字符串<br>实例化方法<br>&quot;Hello,&nbsp;world!&quot;<br>var&nbsp;str0&nbsp;=&nbsp;&quot;Xinyang&quot;;<br>var&nbsp;str1&nbsp;=&nbsp;new&nbsp;String(&quot;Xinyang&quot;);<br>属性及方法<br>prototype<br>fromCharCode（转换&nbsp;ASCII&nbsp;代码为字符）<br>原型对象属性及其方法<br>constructor<br>indexOf<br>replace<br>slice<br>split<br>charCodeAt<br>toLowerCase<br>...<br>String.prototype.indexOf<br><br>功能：获取子字符串在字符串中的索引<br>//&nbsp;stringObject.indexOf(searchValue,&nbsp;fromIndex)<br>var&nbsp;str&nbsp;=&nbsp;&quot;I&nbsp;am&nbsp;X.&nbsp;From&nbsp;China!&quot;;<br>var&nbsp;index&nbsp;=&nbsp;str.indexOf(&quot;a&quot;);&nbsp;//&nbsp;2<br>str.indexOf(&quot;a&quot;,&nbsp;index&nbsp;+&nbsp;1);&nbsp;//&nbsp;16<br>str.indexOf(&quot;Stupid&quot;);&nbsp;//&nbsp;-1&nbsp;字符串不存在<br>String.prototype.replace<br><br>功能：查找字符串替换成目标文字<br>//&nbsp;stringObject.replace(regexp/substr,&nbsp;replacement)<br>var&nbsp;str&nbsp;=&nbsp;&quot;apple&nbsp;is&nbsp;bad&quot;;<br>str&nbsp;=&nbsp;str.replace(&quot;bad&quot;,&nbsp;&quot;awesome&quot;);<br>String.prototype.split<br><br>功能：按分隔符将分隔符分成字符串数组<br>//&nbsp;stringObject.split(separator,&nbsp;arrayLength)<br>var&nbsp;str&nbsp;=&nbsp;&quot;1&nbsp;2&nbsp;3&nbsp;4&quot;;<br>str.split(&quot;&nbsp;&quot;);&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;];<br>str.split(&quot;&nbsp;&quot;,&nbsp;3);&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;];<br>str.split(/&#92;d+/);&nbsp;//&nbsp;[&quot;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&nbsp;&quot;,&nbsp;&quot;&quot;]<br>Number<br><br>构造器说明：整型直接量，八进制直接量（0-），十六进制直接量（0x-)，浮点型直接量<br>实例化方法<br>10<br>1.2e5<br>var&nbsp;count&nbsp;=&nbsp;0x10;<br>var&nbsp;pi&nbsp;=&nbsp;new&nbsp;Number(3.1415);<br>属性及方法<br>prototype<br>MAX_VALUE<br>MIN_VALUE<br>NaN<br>NEGATIVE_INFINITY<br>POSITIVE_INFINITY<br>原型对象属性及其方法<br>constructor<br>toFixed<br>toExponential<br>...<br>Number.prototype.toFixed<br><br>功能：四舍五入至指定小数位<br>//&nbsp;numberObject.toFixed(num)<br>var&nbsp;num0&nbsp;=&nbsp;3.14;<br>num0.toFixed(1);&nbsp;//&nbsp;3.1<br>var&nbsp;num1&nbsp;=&nbsp;3.35;<br>num1.toFixed(1);&nbsp;//&nbsp;3.4<br>Array<br><br>构造器说明：定义数组对象<br>实例化方法<br>var&nbsp;a0&nbsp;=&nbsp;[1,&nbsp;&quot;abc&quot;,&nbsp;true,&nbsp;function(){}];<br>var&nbsp;a1&nbsp;=&nbsp;new&nbsp;Array();<br>var&nbsp;a2&nbsp;=&nbsp;new&nbsp;Array(1,&nbsp;&quot;abc&quot;,&nbsp;true);<br>属性及方法<br>prototype<br>isArray<br>原型对象属性及其方法<br>constructor<br>splice<br>forEach<br>find<br>concat<br>pop<br>push<br>reverse<br>shift<br>slice<br>...<br>Array.prototype.splice<br><br>功能：从数组中删除或添加元素，返回被删除的元素列表（作用域原有数组）<br>//&nbsp;arrayObject.splice(start,&nbsp;deleteCount[,&nbsp;item1[,&nbsp;item2[,&nbsp;...]]])<br>var&nbsp;arr&nbsp;=&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;a&quot;,&nbsp;&quot;b&quot;,&nbsp;&quot;6&quot;];<br>var&nbsp;ret&nbsp;=&nbsp;arr.splice(2,&nbsp;2,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;,&nbsp;&quot;5&quot;);&nbsp;//&nbsp;[&quot;a&quot;,&nbsp;&quot;b&quot;]<br>arr;&nbsp;//&nbsp;[&quot;1&quot;,&nbsp;&quot;2&quot;,&nbsp;&quot;3&quot;,&nbsp;&quot;4&quot;,&nbsp;5&quot;,&nbsp;&quot;6&quot;]<br>Array.prototype.forEach<br><br>功能：遍历元素组并调用回调函数<br>//&nbsp;arrayObject.forEach(callback[,&nbsp;thisArg])<br>//&nbsp;回调函数<br>//&nbsp;function&nbsp;callback(value,&nbsp;index,&nbsp;arrayObject)&nbsp;{...}<br>//&nbsp;value&nbsp;-&nbsp;当前值&nbsp;index&nbsp;-&nbsp;当前索引&nbsp;arrayObject&nbsp;-&nbsp;数组本身<br>function&nbsp;logArray(value,&nbsp;index,&nbsp;arrayObject)&nbsp;{<br>&nbsp;&nbsp;console.log(value);<br>&nbsp;&nbsp;console.log(value&nbsp;===&nbsp;array[index]);<br>}<br>[2,&nbsp;5,&nbsp;6,&nbsp;9].forEach(logArray);<br>Function<br><br>构造器说明：定义函数或新增对象构造器<br>实例化方法<br>//&nbsp;对象实例化<br>var&nbsp;f0&nbsp;=&nbsp;new&nbsp;Function(&quot;i&quot;,&nbsp;&quot;j&quot;,&nbsp;&quot;return&nbsp;(i&nbsp;+&nbsp;j)&quot;);<br>//&nbsp;函数关键字语句<br>function&nbsp;f1(i,&nbsp;j){return&nbsp;i&nbsp;+&nbsp;j;}<br>//&nbsp;函数表达式<br>var&nbsp;f3&nbsp;=&nbsp;function(i,&nbsp;j){return&nbsp;i&nbsp;+&nbsp;j;};<br>属性及方法<br>prototype<br>原型对象属性及其方法<br>constructor<br>apply<br>call<br>bind<br>实例对象属性和方法<br>length<br>prototype<br>arguments<br>caller<br>自定义对象构造器<br><br>下面的代码声明一个&nbsp;Point&nbsp;增加了一个move方法，最后创建了一个&nbsp;Point&nbsp;的实例对象。<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;2);<br>Function.prototype.apply<br><br>功能：通过参数指定调用者和函数参数并执行该函数<br>//&nbsp;functionObj.apply(thisArg[,&nbsp;argsArray])<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;1,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br>p.move.apply(circle,&nbsp;[2,&nbsp;1]);&nbsp;//&nbsp;{x:&nbsp;3,&nbsp;y:&nbsp;2,&nbsp;r:&nbsp;1}<br>Function.prototype.bind<br><br>功能：通过参数指定函数调用者和函数参数并返回该函数的引用<br>//&nbsp;functionObj.bind(thisArg[,&nbsp;arg1[,&nbsp;arg2[,&nbsp;...]]])<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>}<br><br>Point.prototype.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>}<br><br>var&nbsp;p&nbsp;=&nbsp;new&nbsp;Point(1,&nbsp;1);<br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;1,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br>var&nbsp;circleMoveRef&nbsp;=&nbsp;p.move.bind(circle,&nbsp;2,&nbsp;1);<br>setTimeout(circleMoveRef,&nbsp;1000);&nbsp;//&nbsp;{x:&nbsp;3,&nbsp;y:&nbsp;2,&nbsp;r:&nbsp;1}<br><br>//&nbsp;之间使用&nbsp;circleMoveRef()&nbsp;效果等同于&nbsp;apply()<br>circleMoveRef();<br>子类构造器<br><br>function&nbsp;Circle(x,&nbsp;y,&nbsp;r)&nbsp;{<br>&nbsp;&nbsp;Point.apply(this,&nbsp;[x,&nbsp;y]);<br>&nbsp;&nbsp;this.radius&nbsp;=&nbsp;r;<br>}<br>Circle.prototype&nbsp;=&nbsp;Object.create(Point.prototype);<br>Circle.prototype.constructor&nbsp;=&nbsp;Circle;<br>Circle.prototype.area&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;return&nbsp;Math.PI&nbsp;*&nbsp;this.radius&nbsp;*&nbsp;this.radius;<br>}<br><br>var&nbsp;c&nbsp;=&nbsp;new&nbsp;Circle(1,&nbsp;2,&nbsp;3);<br>c.move(2,&nbsp;2);<br>c.area();<br>函数调用<br><br>()<br>apply<br>call<br>函数参数<br><br>形参个数不一定等于实参个数<br>值专递<br>通过参数类型检查实现函数重载<br>arguments<br><br>arguments&nbsp;的常用属性<br>length&nbsp;实参个数<br>0...arguments.length-1&nbsp;实参属性名称（key）<br>callee&nbsp;函数本身<br>function&nbsp;max(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(max.length&nbsp;===&nbsp;arguments.length)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a&gt;b?a:b;<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;_max&nbsp;=&nbsp;arguments[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i&nbsp;=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;arguments.length;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(_max&nbsp;&lt;&nbsp;arguments[i])&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_max&nbsp;=&nbsp;arguments[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_max;<br>&nbsp;&nbsp;}<br>}<br>值专递<br><br>函数参数的值专递是参数复制都是栈内存中的复制。<br><br>//&nbsp;原始类型<br>function&nbsp;plusplus(num)&nbsp;{<br>&nbsp;&nbsp;return&nbsp;num++;<br>}<br>var&nbsp;count&nbsp;=&nbsp;0;<br>var&nbsp;result&nbsp;=&nbsp;plusplus(count);&nbsp;//&nbsp;result&nbsp;=&nbsp;1;&nbsp;count&nbsp;=&nbsp;0;<br><br>//&nbsp;引用类型<br>function&nbsp;setName(obj)&nbsp;{<br>&nbsp;&nbsp;obj.name&nbsp;=&nbsp;&quot;obama&quot;;<br>}<br>var&nbsp;president&nbsp;=&nbsp;{name:&nbsp;&quot;bush&quot;};<br>setName(president);&nbsp;//&nbsp;{name:&nbsp;&quot;obama&quot;};<br>函数重载<br><br>以&nbsp;Require.JS&nbsp;中的&nbsp;define()&nbsp;为例：<br>define(function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>define([&quot;lib&quot;],&nbsp;function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>define(&quot;math&quot;,&nbsp;[&quot;lib&quot;],&nbsp;function(){<br>&nbsp;&nbsp;var&nbsp;add&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y;<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;add<br>&nbsp;&nbsp;};<br>})<br><br>//&nbsp;define&nbsp;的实现代码<br>/**<br>&nbsp;*&nbsp;The&nbsp;function&nbsp;that&nbsp;handles&nbsp;definitions&nbsp;of&nbsp;modules.&nbsp;Differs&nbsp;from<br>&nbsp;*&nbsp;require()&nbsp;in&nbsp;that&nbsp;a&nbsp;string&nbsp;for&nbsp;the&nbsp;module&nbsp;should&nbsp;be&nbsp;the&nbsp;first&nbsp;argument,<br>&nbsp;*&nbsp;and&nbsp;the&nbsp;function&nbsp;to&nbsp;execute&nbsp;after&nbsp;dependencies&nbsp;are&nbsp;loaded&nbsp;should<br>&nbsp;*&nbsp;return&nbsp;a&nbsp;value&nbsp;to&nbsp;define&nbsp;the&nbsp;module&nbsp;corresponding&nbsp;to&nbsp;the&nbsp;first&nbsp;argument&quot;s<br>&nbsp;*&nbsp;name.<br>&nbsp;*/<br>define&nbsp;=&nbsp;function&nbsp;(name,&nbsp;deps,&nbsp;callback)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;node,&nbsp;context;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//Allow&nbsp;for&nbsp;anonymous&nbsp;modules<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(typeof&nbsp;name&nbsp;!==&nbsp;&quot;string&quot;)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//Adjust&nbsp;args&nbsp;appropriately<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback&nbsp;=&nbsp;deps;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deps&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//This&nbsp;module&nbsp;may&nbsp;not&nbsp;have&nbsp;dependencies<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!isArray(deps))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback&nbsp;=&nbsp;deps;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;deps&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;省略以下代码<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;...<br>};<br>RegExp<br><br>构造器说明：用于定义正则表达式，一个&nbsp;RegExp&nbsp;对象包含一个正则表达式和关联的标志<br>定义方法<br><br>/pattern/flags<br>new&nbsp;RegExp(pattern[,&nbsp;flags]);<br>属性及方法<br>prototype<br>原型对象属性及其方法<br>constructor<br>test<br>exec<br>...<br>RegExp.prototype.test<br><br>功能：使用正则表达式对字符串进行测试，并返回测试结果<br>//&nbsp;regexObj.text(str)<br>var&nbsp;reg&nbsp;=&nbsp;/^abc/i;<br>reg.test(&quot;Abc123&quot;);&nbsp;//&nbsp;true<br>reg.test(&quot;1Abc1234&quot;);&nbsp;//&nbsp;false<br>Date<br><br>构造器说明：用于定义日期对象<br>定义方法<br><br>var&nbsp;date0&nbsp;=&nbsp;new&nbsp;Date();<br>var&nbsp;date1&nbsp;=&nbsp;new&nbsp;Date(2014,&nbsp;3,&nbsp;1,&nbsp;7,&nbsp;1,&nbsp;1,&nbsp;100);<br>属性及方法<br>prototype<br>parse<br>now<br>...<br>原型对象属性及其方法<br>constructor<br>Date<br>getDate<br>getHours<br>setDate<br>setHours<br>...<br>标准内置对象<br><br>Math<br><br>对象说明：拥有属性和方法的单一对象主要用于数字计算<br>对象属性：<br>E<br>PI<br>SQRT2<br>...<br>对象方法：<br>floor<br>random<br>abs<br>max<br>cos<br>ceil<br>Math.floor<br><br>功能：向下取整<br>//&nbsp;Math.floor(num)<br>Math.floor(0.97);&nbsp;//&nbsp;0<br>Math.floor(5.1);&nbsp;//&nbsp;5<br>Math.floor(-5.1);&nbsp;//6<br>相似方法：ceil，round<br>Math.random<br><br>功能：返回&nbsp;0~1&nbsp;之间的浮点数<br>//&nbsp;Math.random()<br>Math.random();&nbsp;//&nbsp;0.14523562323461<br>JSON<br><br>对象说明：用于存储和交换文本信息<br>对象方法：<br>parse<br>stringify<br>JSON.stringify<br><br>功能：将&nbsp;JSON&nbsp;对象转换为字符转<br>//&nbsp;JSON.stringify(value[,&nbsp;replacer[,&nbsp;space]])<br>var&nbsp;json&nbsp;=&nbsp;{&quot;name&quot;:&nbsp;&quot;X&quot;};<br>JSON.stringify(json);&nbsp;//&nbsp;&quot;{&quot;name&quot;:&quot;X&quot;}&quot;<br>JSON.parse<br><br>功能：将&nbsp;JSON&nbsp;字符转转换为对象<br>//&nbsp;JSON.parse(text[,&nbsp;reviver])<br>var&nbsp;jsonStr&nbsp;=&nbsp;&quot;{&quot;name&quot;:&quot;X&quot;}&quot;;<br>JSON.parse(jsonStr);&nbsp;//&nbsp;{name:&nbsp;&quot;X&quot;}<br>全局对象<br><br>全局对象定义了一系列的属性和方法在编程过程中可以被之间调用。<br>属性：NaN，Infinity，undefined<br>方法：<br><br>parseInt<br>parseFloat<br>isNaN<br>isFinite<br>eval<br>处理&nbsp;URI&nbsp;方法：<br>encodedURIComponent<br>decodeURIComponent<br>encodedURI<br>decodeURI<br>构造器属性：<br>Boolean<br>String<br>Number<br>Object<br>Function<br>Array<br>Date<br>Error<br>...<br>对象属性：<br>Math<br>JSON<br>NaA<br><br>非数字值：表示错误或无意义的运算结果，NaN&nbsp;参与运算仍会返回&nbsp;NaA，且&nbsp;NaN&nbsp;不等于任何值，包括它本身。可以使用&nbsp;isNaN()&nbsp;判断运算结果的类型是否为&nbsp;NaN。<br>isNaN(NaN);&nbsp;//&nbsp;true<br>isNaN(4&nbsp;-&nbsp;&quot;2a&quot;);&nbsp;//&nbsp;true;<br>parseInt<br><br>功能：转换字符串成数字<br>//&nbsp;parseInt(string[,&nbsp;radix])<br>//&nbsp;radix&nbsp;-&nbsp;为进制数<br>parseInt(&quot;010&quot;);&nbsp;//&nbsp;10<br>parseInt(&quot;010&quot;,&nbsp;8)&nbsp;//&nbsp;8<br>parseInt(&quot;010&quot;,&nbsp;16)&nbsp;//&nbsp;16<br><br>parseInt(&quot;0x1f&quot;);&nbsp;//&nbsp;31<br>parseInt(&quot;0x1f&quot;,&nbsp;16);&nbsp;//&nbsp;31<br>parseInt(&quot;1f&quot;);&nbsp;//&nbsp;1<br>parseInt(&quot;1f&quot;,&nbsp;16);&nbsp;//&nbsp;31<br>eval<br><br>功能：计算字符串并执行其中的&nbsp;JavaScript&nbsp;代码（会带来安全性和代码逻辑问题，通常不建议使用）<br>//&nbsp;eval(string)<br>var&nbsp;res&nbsp;=&nbsp;&quot;{&quot;error&quot;:&nbsp;&quot;0&quot;,&nbsp;&quot;msg&quot;:&nbsp;&quot;OK&quot;};<br>var&nbsp;obj;<br>if&nbsp;(!JSON)&nbsp;{<br>&nbsp;&nbsp;obj&nbsp;=&nbsp;eval(&quot;(&quot;&nbsp;+&nbsp;res&nbsp;+&nbsp;&quot;)&quot;);<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;obj&nbsp;=&nbsp;JSON.parse(res);<br>}<br>encodedURIComponent<br><br>功能：将&nbsp;URI&nbsp;参数中的特殊字符，中文等作为&nbsp;URI&nbsp;的一部分进行编码<br>var&nbsp;uri&nbsp;=&nbsp;&quot;http://w3schools.com/my&nbsp;test.asp?name=ståle&car=saab&quot;;<br>var&nbsp;res&nbsp;=&nbsp;encodeURIComponent(uri);<br><br>//&nbsp;结果<br>//&nbsp;http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst%C3%A5le%26car%3Dsaab","addLink":"","date":"2016-01-07 14:58","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4},{"addArticleTtitle":"变量作用域","classify":"javascript","addarticleContent":"变量的作用域值的是变量的生命周期和作用范围（全局与局部作用域的区别）。<br>作用域介绍<br><br>静态作用域<br><br>静态作用域有称为词法作用域，即指其在编译的阶段就可以决定变量的引用。静态作用域只更变量定义的位置有关与代码执行的顺序无关。<br>var&nbsp;x&nbsp;=&nbsp;0;<br>function&nbsp;foo()&nbsp;{<br>&nbsp;&nbsp;alert(x);<br>}<br><br>function&nbsp;bar()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;20;<br>&nbsp;&nbsp;foo();<br>}<br><br>foo();<br><br><br>动态作用域<br><br>动态作用域的变量引用只可在程序运行时刻决定（其通常通过动态栈来进行管理）。<br>var&nbsp;x&nbsp;=&nbsp;0;<br>function&nbsp;foo()&nbsp;{<br>&nbsp;&nbsp;alert(x);<br>}<br><br>function&nbsp;bar()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;20;<br>&nbsp;&nbsp;foo();<br>}<br><br>foo();<br><br><br>JavaScript&nbsp;变量作用域<br><br>JavaScript&nbsp;（1）使用静态作用域，（2）其没有块级作用域（只有函数作用域，就是只有&nbsp;function&nbsp;用于可以定义作用域），（3）在&nbsp;ES5&nbsp;之作使用词法环境来管理作用域。<br>词法环境<br><br>组成<br><br>词法环境用来描述静态作用域的数据结构。它由环节记录和外部词法环境的引用组成。+<br><br>环境记录（record）（指形参，变量，函数等）<br>外部词法环境的引用（outer）<br>创建<br><br>在一段代码执行之前，先初始化词法环境。会被初始化的有：<br>形参<br>函数定义（创建函数对象，会保存当前作用域。见下图）<br>变量定义（所有初始化值均为&nbsp;undefined）<br><br>结构<br><br>var&nbsp;x&nbsp;=&nbsp;10;<br>function&nbsp;foo(y)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;z&nbsp;=&nbsp;30;<br>&nbsp;&nbsp;function&nbsp;bar(q)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;x&nbsp;+&nbsp;y&nbsp;+&nbsp;z&nbsp;+&nbsp;q;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return&nbsp;bar;<br>}<br>var&nbsp;bar&nbsp;=&nbsp;foo(20);<br>bar(40);<br>全局词法作用域（初始化状态）<br><br>关于词法环境的问题<br><br>命名冲突<br><br>形参，函数定义，变量名称命名冲突。其中的优先级的排序如下：<br>函数定义&nbsp;&gt;&nbsp;形参&nbsp;&gt;&nbsp;变量<br>arguments&nbsp;的使用<br>为函数中定义好的变量。<br>函数表达式与函数定义的区别<br>函数表达式是在执行时才创建函数对象。<br>函数定义为在代码执行之前就进行创建的。<br>with&nbsp;语句<br><br>with&nbsp;会创造一个临时作用域。<br>var&nbsp;foo&nbsp;=&nbsp;&quot;abc&quot;;<br>with({<br>&nbsp;&nbsp;foo:&nbsp;&quot;bar&quot;;<br>})&nbsp;{<br>&nbsp;&nbsp;function&nbsp;f()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(foo);<br>&nbsp;&nbsp;};<br>&nbsp;&nbsp;(function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(foo);<br>&nbsp;&nbsp;})();<br>&nbsp;&nbsp;f();<br>}<br>try-catch&nbsp;句法<br><br>try&nbsp;{<br>&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;10;<br>&nbsp;&nbsp;throw&nbsp;new&nbsp;Error();<br>}&nbsp;catch&nbsp;(e)&nbsp;{<br>&nbsp;&nbsp;function&nbsp;f()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(e);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;(function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(e);<br>&nbsp;&nbsp;})();<br>&nbsp;&nbsp;f();<br>}<br>带名称的函数表达式<br><br>当一个函数表达式有了名称之后，JavaScript&nbsp;会创建一个新的词法环境。并在这个词法环境中用有一个属性&nbsp;A&nbsp;指向这个函数，同时这个属性&nbsp;A&nbsp;指向的函数是不可被修改的。<br>下面例子为不常规的写法<br>(function&nbsp;A(){<br>&nbsp;&nbsp;A&nbsp;=&nbsp;1;<br>&nbsp;&nbsp;alert(A);<br>})();","addLink":"","date":"2016-01-07 15:01","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":5},{"addArticleTtitle":"表达式与运算符","classify":"javascript","addarticleContent":"表达式<br><br>表达式为&nbsp;JavaScript&nbsp;的短语可执行并生成值。<br>1.7&nbsp;//&nbsp;字面量<br>&quot;1.7&quot;<br>var&nbsp;a&nbsp;=&nbsp;1;<br>var&nbsp;b&nbsp;=&nbsp;&quot;2&quot;;<br>var&nbsp;c&nbsp;=&nbsp;(1.7&nbsp;+&nbsp;a)&nbsp;*&nbsp;&quot;3&quot;&nbsp;-&nbsp;b<br>运算符<br><br>算数运算符&nbsp;（+&nbsp;-&nbsp;*&nbsp;/&nbsp;%）<br>关系运算符&nbsp;（&gt;&nbsp;&lt;&nbsp;==&nbsp;!=&nbsp;&gt;=&nbsp;&lt;=&nbsp;===&nbsp;!==)<br>逻辑运算符&nbsp;（!&nbsp;&&&nbsp;||）<br>位运算符&nbsp;（&&nbsp;|&nbsp;^&nbsp;~&nbsp;&lt;&lt;&nbsp;&gt;&gt;）<br>负值运算符&nbsp;（=）<br>条件运算符&nbsp;（?:）<br>逗号运算符&nbsp;（,）<br>对象运算符&nbsp;（new&nbsp;delete&nbsp;.&nbsp;[]&nbsp;instanceof）<br>===&nbsp;全等符号<br><br>全等运算符用于盘对左右两边的对象或值是否类型相同且值相等。<br>伪代码拆解<br>function&nbsp;totalEqual(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;类型相同)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;是引用类型)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;是同一引用)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;值类型<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;值相等)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;false;<br>&nbsp;&nbsp;}<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;&quot;123&quot;;<br>var&nbsp;b&nbsp;=&nbsp;&quot;123&quot;;<br>var&nbsp;c&nbsp;=&nbsp;&quot;4&quot;;<br>var&nbsp;aObj&nbsp;=&nbsp;new&nbsp;String(&quot;123&quot;);<br>var&nbsp;bObj&nbsp;=&nbsp;new&nbsp;String(&quot;123&quot;);<br>var&nbsp;cObj&nbsp;=&nbsp;aObj;<br><br>a&nbsp;===&nbsp;aObj&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;false<br>aObj&nbsp;===&nbsp;bObj&nbsp;&nbsp;&nbsp;//&nbsp;false<br>aObj&nbsp;===&nbsp;cObj&nbsp;&nbsp;&nbsp;//&nbsp;true<br>a&nbsp;===&nbsp;b&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;true<br>a&nbsp;===&nbsp;c&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;false<br>==<br><br>==&nbsp;用于判断操作符两边的对象或值是否相等。<br>伪代码拆解<br>function&nbsp;equal(a,&nbsp;b)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(a&nbsp;和&nbsp;b&nbsp;类型相同)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;a&nbsp;===&nbsp;b;<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{&nbsp;//&nbsp;类型不同<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Number(a)&nbsp;===&nbsp;Number(b);&nbsp;//&nbsp;优先转换数值类型<br>&nbsp;&nbsp;}<br>}<br>例子<br><br>&quot;99&quot;&nbsp;==&nbsp;99;&nbsp;//&nbsp;true<br>new&nbsp;String(&quot;99&quot;)&nbsp;==&nbsp;99;&nbsp;//&nbsp;true<br>true&nbsp;==&nbsp;1;&nbsp;//&nbsp;true<br>false&nbsp;==&nbsp;0;&nbsp;//&nbsp;true<br>&quot;&#92;n&#92;n&#92;n&quot;&nbsp;==&nbsp;//&nbsp;true<br>例外规则<br><br>null&nbsp;==&nbsp;undefined&nbsp;结果为真&nbsp;true<br>在有&nbsp;null/undefined&nbsp;参与的&nbsp;==&nbsp;运算是不进行隐式转换。<br>0&nbsp;==&nbsp;null;&nbsp;//&nbsp;false<br>null&nbsp;==&nbsp;false;&nbsp;//&nbsp;false<br>&quot;undefined&quot;&nbsp;==&nbsp;undefined;&nbsp;//&nbsp;false<br>!&nbsp;取反<br><br>!x&nbsp;用于表达&nbsp;x&nbsp;表达式的运行结果转换成布尔值（Boolean）之后取反的结果。!!x&nbsp;则表示取&nbsp;x&nbsp;表达式的运行结果的布尔值。<br>var&nbsp;obj&nbsp;=&nbsp;{};<br>var&nbsp;a&nbsp;=&nbsp;!obj&nbsp;//&nbsp;false;<br>var&nbsp;a&nbsp;=&nbsp;!!obj&nbsp;//&nbsp;true;<br>&&&nbsp;逻辑与<br><br>x&nbsp;&&&nbsp;y&nbsp;如果&nbsp;x&nbsp;表达式的运行交过转换成&nbsp;Boolean&nbsp;值为&nbsp;false&nbsp;则不运行表达式&nbsp;y&nbsp;而直接返回&nbsp;x&nbsp;表达式的运行结果。相反，如果&nbsp;x&nbsp;表达式的运行交过转换成&nbsp;Boolean&nbsp;值为&nbsp;true&nbsp;则运行表达式&nbsp;y&nbsp;并返回&nbsp;y&nbsp;表达式的运行结果。<br>伪代码拆解<br>var&nbsp;ret&nbsp;=&nbsp;null;<br>if&nbsp;(!!(ret&nbsp;=&nbsp;x))&nbsp;{<br>&nbsp;&nbsp;return&nbsp;y;<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;return&nbsp;ret;<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;0&nbsp;&&&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;0<br>var&nbsp;b&nbsp;=&nbsp;1&nbsp;&&&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;2<br>||&nbsp;逻辑或<br><br>x&nbsp;||&nbsp;y&nbsp;如果&nbsp;x&nbsp;表达式的运行结果转换为&nbsp;Boolean&nbsp;值为&nbsp;true，则不运行&nbsp;表达式&nbsp;y&nbsp;而直接返回表达式&nbsp;x&nbsp;的运算结果。（与&nbsp;&&&nbsp;方式相反）<br>伪代码拆解<br>var&nbsp;ret&nbsp;=&nbsp;null;<br>if&nbsp;(!!(ret&nbsp;=&nbsp;x))&nbsp;{<br>&nbsp;&nbsp;return&nbsp;ret;<br>}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;return&nbsp;y;<br>}<br>例子<br><br>var&nbsp;a&nbsp;=&nbsp;0&nbsp;||&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;2<br>var&nbsp;b&nbsp;=&nbsp;1&nbsp;||&nbsp;(function(){return&nbsp;1&nbsp;+&nbsp;1;})();&nbsp;//&nbsp;1<br>元算符优先级（Operator&nbsp;Precedence）<br><br>+&nbsp;-&nbsp;*&nbsp;/&nbsp;高于&nbsp;&&<br>*&nbsp;/&nbsp;高于&nbsp;+&nbsp;-<br>&&&nbsp;高于&nbsp;?:<br>()&nbsp;内优先级高于之外<br>NOTE：和数学上的算术优先级类似，同级从左到右计算。如有疑问加上&nbsp;()&nbsp;既可解决优先级问题。<br>Precedence&nbsp;&nbsp;Operator&nbsp;type&nbsp;&nbsp;Associativity&nbsp;&nbsp;Individual&nbsp;operators<br>19&nbsp;&nbsp;Grouping&nbsp;&nbsp;n/a&nbsp;&nbsp;(&nbsp;…&nbsp;)<br>18&nbsp;&nbsp;Member&nbsp;Access&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;.&nbsp;…<br>Computed&nbsp;Member&nbsp;Access&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;[&nbsp;…&nbsp;]<br>new&nbsp;(with&nbsp;argument&nbsp;list)&nbsp;&nbsp;n/a&nbsp;&nbsp;new&nbsp;…&nbsp;(&nbsp;…&nbsp;)<br>17&nbsp;&nbsp;Function&nbsp;Call&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;(&nbsp;…&nbsp;)<br>new&nbsp;(without&nbsp;argument&nbsp;list)&nbsp;&nbsp;right-to-left&nbsp;&nbsp;new&nbsp;…<br>16&nbsp;&nbsp;Postfix&nbsp;Increment&nbsp;&nbsp;n/a&nbsp;&nbsp;…&nbsp;++<br>Postfix&nbsp;Decrement&nbsp;&nbsp;n/a&nbsp;&nbsp;…&nbsp;--<br>15&nbsp;&nbsp;Logical&nbsp;NOT&nbsp;&nbsp;right-to-left&nbsp;&nbsp;!&nbsp;…<br>Bitwise&nbsp;NOT&nbsp;&nbsp;right-to-left&nbsp;&nbsp;~&nbsp;…<br>Unary&nbsp;Plus&nbsp;&nbsp;right-to-left&nbsp;&nbsp;+&nbsp;…<br>Unary&nbsp;Negation&nbsp;&nbsp;right-to-left&nbsp;&nbsp;-&nbsp;…<br>Prefix&nbsp;Increment&nbsp;&nbsp;right-to-left&nbsp;&nbsp;++&nbsp;…<br>Prefix&nbsp;Decrement&nbsp;&nbsp;right-to-left&nbsp;&nbsp;--&nbsp;…<br>typeof&nbsp;&nbsp;right-to-left&nbsp;&nbsp;typeof&nbsp;…<br>void&nbsp;&nbsp;right-to-left&nbsp;&nbsp;void&nbsp;…<br>delete&nbsp;&nbsp;right-to-left&nbsp;&nbsp;delete&nbsp;…<br>14&nbsp;&nbsp;Multiplication&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;*&nbsp;…<br>Division&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;/&nbsp;…<br>Remainder&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;%&nbsp;…<br>13&nbsp;&nbsp;Addition&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;+&nbsp;…<br>Subtraction&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;-&nbsp;…<br>12&nbsp;&nbsp;Bitwise&nbsp;Left&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;&lt;&nbsp;…<br>Bitwise&nbsp;Right&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&gt;&nbsp;…<br>Bitwise&nbsp;Unsigned&nbsp;Right&nbsp;Shift&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&gt;&gt;&nbsp;…<br>11&nbsp;&nbsp;Less&nbsp;Than&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;&nbsp;…<br>Less&nbsp;Than&nbsp;Or&nbsp;Equal&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&lt;=&nbsp;…<br>Greater&nbsp;Than&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;&nbsp;…<br>Greater&nbsp;Than&nbsp;Or&nbsp;Equal&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&gt;=&nbsp;…<br>in&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;in&nbsp;…<br>instanceof&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;instanceof&nbsp;…<br>10&nbsp;&nbsp;Equality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;==&nbsp;…<br>Inequality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;!=&nbsp;…<br>Strict&nbsp;Equality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;===&nbsp;…<br>Strict&nbsp;Inequality&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;!==&nbsp;…<br>9&nbsp;&nbsp;Bitwise&nbsp;AND&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&&nbsp;…<br>8&nbsp;&nbsp;Bitwise&nbsp;XOR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;^&nbsp;…<br>7&nbsp;&nbsp;Bitwise&nbsp;OR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;|&nbsp;…<br>6&nbsp;&nbsp;Logical&nbsp;AND&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;&&&nbsp;…<br>5&nbsp;&nbsp;Logical&nbsp;OR&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;||&nbsp;…<br>4&nbsp;&nbsp;Conditional&nbsp;&nbsp;right-to-left&nbsp;&nbsp;…&nbsp;?&nbsp;…&nbsp;:&nbsp;…<br>3&nbsp;&nbsp;Assignment&nbsp;&nbsp;right-to-left&nbsp;&nbsp;…&nbsp;=&nbsp;…<br>…&nbsp;+=&nbsp;…<br>…&nbsp;-=&nbsp;…<br>…&nbsp;*=&nbsp;…<br>…&nbsp;/=&nbsp;…<br>…&nbsp;%=&nbsp;…<br>…&nbsp;&lt;&lt;=&nbsp;…<br>…&nbsp;&gt;&gt;=&nbsp;…<br>…&nbsp;&gt;&gt;&gt;=&nbsp;…<br>…&nbsp;&=&nbsp;…<br>…&nbsp;^=&nbsp;…<br>…&nbsp;|=&nbsp;…<br>2&nbsp;&nbsp;yield&nbsp;&nbsp;right-to-left&nbsp;&nbsp;yield&nbsp;…<br>1&nbsp;&nbsp;Spread&nbsp;&nbsp;n/a&nbsp;&nbsp;...&nbsp;…<br>0&nbsp;&nbsp;Comma&nbsp;/&nbsp;Sequence&nbsp;&nbsp;left-to-right&nbsp;&nbsp;…&nbsp;,&nbsp;…","addLink":"","date":"2016-01-07 15:04","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":6},{"addArticleTtitle":"语句","classify":"javascript","addarticleContent":"条件控制语句<br><br>其中expression可以使用整型，字符串，甚至表达式<br>if&nbsp;(expression0)&nbsp;{statement0}<br>else&nbsp;if&nbsp;(expression1)&nbsp;{statement1}<br>else&nbsp;{statement2}<br><br>//&nbsp;JavaScript&nbsp;中的&nbsp;case&nbsp;可以使用整型，字符串，甚至表达式<br>switch(persion.type)&nbsp;{<br>&nbsp;&nbsp;case&nbsp;&quot;teacher&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement1<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;case&nbsp;&quot;student&quot;:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement2<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;default:<br>&nbsp;&nbsp;&nbsp;&nbsp;statement3<br>&nbsp;&nbsp;&nbsp;&nbsp;break;<br>}<br>循环控制语句<br><br>while(expression)&nbsp;{statement}<br><br>//&nbsp;至少执行一次<br>do&nbsp;{statement}&nbsp;while(expression);<br><br>for&nbsp;(initialise;&nbsp;test_expresiion;&nbsp;increment)&nbsp;{statement}<br><br>//&nbsp;跳过下面代码并进入下一轮循环<br>continue;<br><br>//&nbsp;退出当前循环<br>break;<br>for-in<br><br>用于遍历对象的全部属性。<br>function&nbsp;Car(id,&nbsp;type,&nbsp;color)&nbsp;{<br>&nbsp;&nbsp;this.type&nbsp;=&nbsp;type;<br>&nbsp;&nbsp;this.color&nbsp;=&nbsp;color;<br>&nbsp;&nbsp;this.id&nbsp;=&nbsp;id;<br>}<br><br>var&nbsp;benz&nbsp;=&nbsp;new&nbsp;Car(&quot;benz&quot;,&nbsp;&quot;black&quot;,&nbsp;&quot;red&quot;);<br>Car.prototype.start&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.type&nbsp;+&nbsp;&quot;&nbsp;start&quot;);<br>}<br><br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>}<br><br>//&nbsp;输出结果<br>type:black<br>color:red<br>id:benz<br>start:function&nbsp;(){<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(this.type&nbsp;+&nbsp;&quot;&nbsp;start&quot;);<br>}<br><br>//&nbsp;-----------<br><br>//&nbsp;如不需原型对象上的属性可以使用&nbsp;hasOwnProperty<br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(benz.hasOwnProperty(key))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;输出结果<br>type:black<br>color:red<br>id:benz<br>如不需原型对象上的属性可以使用&nbsp;hasOwnProperty<br>for&nbsp;(var&nbsp;key&nbsp;in&nbsp;benz)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(benz.hasOwnProperty(key))&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(key&nbsp;+&nbsp;&quot;:&quot;&nbsp;benz[key]);<br>&nbsp;&nbsp;}<br>}<br>/*&nbsp;输出结果<br>type:black<br>color:red<br>id:benz&nbsp;*/<br>异常处理语句<br><br>try{<br>&nbsp;&nbsp;//&nbsp;statements<br>&nbsp;&nbsp;throw&nbsp;new&nbsp;Error();<br>catch(e){<br>&nbsp;&nbsp;//&nbsp;statements<br>}<br>finally{<br>&nbsp;&nbsp;//&nbsp;statements<br>}<br>with&nbsp;语句<br><br>with&nbsp;语句是&nbsp;JavaScript&nbsp;中特有的语句形式，它主要有两个作用：<br>其一，其用于缩短特定情况下必须书写的代码量。它可以暂时改变变量的作用域。<br>//&nbsp;使用&nbsp;with&nbsp;之前<br>(function(){<br>&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;Math.cos(3&nbsp;*&nbsp;Math.PI)&nbsp;+&nbsp;Math.sin(Math.LN10);<br>&nbsp;&nbsp;var&nbsp;y&nbsp;=&nbsp;Math.tan(14&nbsp;*&nbsp;Math.E);<br>})();<br><br>//&nbsp;使用&nbsp;with<br>(function(){<br>&nbsp;&nbsp;with(Math)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;x&nbsp;=&nbsp;cos(3&nbsp;*&nbsp;PI)&nbsp;+&nbsp;sin(LN10);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;y&nbsp;=&nbsp;tan(14&nbsp;*&nbsp;E);<br>&nbsp;&nbsp;}<br>})();<br><br><br>其二，改变变量的作用域，将with语句中的对象添加至作用域链的头部。<br>frame[1].document.forms[0].name.value&nbsp;=&nbsp;&quot;&quot;;<br>frame[1].document.forms[0].address.value&nbsp;=&nbsp;&quot;&quot;;<br>frame[1].document.forms[0].email.value&nbsp;=&nbsp;&quot;&quot;;<br><br>with(frame[1].document.[0])&nbsp;{<br>&nbsp;&nbsp;name.value&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;address.value&nbsp;=&nbsp;&quot;&quot;<br>&nbsp;&nbsp;email.value&nbsp;=&nbsp;&quot;&quot;;<br>}<br>缺点就是导致&nbsp;JavaScript&nbsp;语句的可执行性下降，所以通常情况下因尽可能的避免使用。","addLink":"","date":"2016-01-07 15:08","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":7},{"addArticleTtitle":"闭包","classify":"javascript","addarticleContent":"闭包有函数和与其相关的引用环境的组合而成<br>闭包允许函数访问其引用环境中的变量（又称自由变量）<br>广义上来说，所有&nbsp;JavaScript&nbsp;的函数都可以成为闭包，因为&nbsp;JavaScript&nbsp;函数在创建时保存了当前的词法环境。<br>function&nbsp;add()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;i&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;return&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;alert(i++);<br>&nbsp;&nbsp;}<br>}<br>var&nbsp;f&nbsp;=&nbsp;add();<br>f();<br>f();<br>闭包的应用<br><br>保存变量现场<br><br><br>//&nbsp;错误方法<br>var&nbsp;addHandlers&nbsp;=&nbsp;function(nodes)&nbsp;{<br>&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;len&nbsp;=&nbsp;nodes.length;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;nodes[i].onclick&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;正确方法<br>var&nbsp;addHandlers&nbsp;=&nbsp;function(nodes)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;helper&nbsp;=&nbsp;function(i)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(i);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br><br>&nbsp;&nbsp;var&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;len&nbsp;=&nbsp;nodes.length;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;nodes[i].onclick&nbsp;=&nbsp;helper(i);<br>&nbsp;&nbsp;}<br>}<br>封装<br><br><br>//&nbsp;将&nbsp;observerList&nbsp;封装在&nbsp;observer&nbsp;中<br>var&nbsp;observer&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;observerList&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;return&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;add:&nbsp;function(obj)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observerList.push(obj);<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;empty:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;observerList&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;getCount:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;observerList.length;<br>&nbsp;&nbsp;&nbsp;&nbsp;},<br>&nbsp;&nbsp;&nbsp;&nbsp;get:&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;observerList;<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;};<br>})();","addLink":"","date":"2016-01-07 15:10","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":8},{"addArticleTtitle":"面向对象","classify":"javascript","addarticleContent":"程序设计方法<br><br>程序设计描述系统如何通过程序来实现的过程，其为一种设计方法与语言实现无关。常见的设计方法有面向流程与面向对象。<br>面向过程<br><br>以程序的过程为中心，采用自定而下逐步细化的方法来实现。常见的面向过程语言有&nbsp;C、Fortran、Pascall。<br><br>面向对象<br><br>将对象作为程序的基本单元，将程序分解为数据和操作的集合。常见的面向过程语言有&nbsp;smalltalk（也是&nbsp;Objective-C&nbsp;的父亲）、Java、C++。<br><br>概念<br><br>类（Class）、对象（Object）<br>属性（Property）、方法（Method）<br>基本特点<br><br>继承（Inheritance）<br>封装（Encapsulation）<br>多态（Polymorphism）<br>JavaScript&nbsp;面向对象<br><br>constructor<br><br>对象的构造器，也可称之为构造类型。<br>//&nbsp;使用&nbsp;new&nbsp;关键字创建<br>var&nbsp;o&nbsp;=&nbsp;new&nbsp;Object();<br>var&nbsp;a&nbsp;=&nbsp;new&nbsp;Array();<br>var&nbsp;d&nbsp;=&nbsp;new&nbsp;Date();<br>&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;object&nbsp;&nbsp;&nbsp;&nbsp;constructor<br><br>//&nbsp;使用直接量创建<br>var&nbsp;o&nbsp;=&nbsp;{name:&nbsp;&quot;Xinyang&quot;};<br>var&nbsp;a&nbsp;=&nbsp;[1,&nbsp;2,&nbsp;3];<br>自定义构造器<br><br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Person(&quot;Q&quot;,&nbsp;12,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>创建构造器的方法（3&nbsp;种）<br><br>function&nbsp;ClassName()&nbsp;{...}<br>var&nbsp;Class&nbsp;=&nbsp;function()&nbsp;{...}<br>var&nbsp;Class&nbsp;=&nbsp;new&nbsp;Function()<br>NOTE:&nbsp;并不是所有函数都可以被当成构造器，例如&nbsp;var&nbsp;o&nbsp;=&nbsp;new&nbsp;Math.min()。通常自定义的函数均可当做构造器来使用。内置对象的构造器也可被当做构造器。<br>NOTE+：如果构造器有返还值并为对象类型，则对象将被直接返回。<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;//&nbsp;!!!&nbsp;注意这里<br>&nbsp;&nbsp;return&nbsp;{};<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;X&quot;,&nbsp;13,&nbsp;new&nbsp;Date());<br>console.log(X.name);&nbsp;//&nbsp;undefined;<br>this<br><br>this&nbsp;在不同环境中指代的对象不同（this&nbsp;指代的值可在函数运行过程中发生改变）。<br>出现场景&nbsp;&nbsp;所指代值<br>全局环境&nbsp;&nbsp;全局对象（window&nbsp;在浏览器环境中时）<br>constructor&nbsp;&nbsp;创建的新实例对象<br>函数调用&nbsp;&nbsp;函数的调用者<br>new&nbsp;Function()&nbsp;&nbsp;全局对象<br>eval()&nbsp;&nbsp;调用上下文中的&nbsp;this<br>全局环境中<br><br>全局环境中&nbsp;this&nbsp;指代全局对象，既&nbsp;window&nbsp;在浏览器环境中。<br>//&nbsp;以下的所有&nbsp;this&nbsp;均指代全局对象<br>var&nbsp;a&nbsp;=&nbsp;10;<br>alert(this.a);<br><br>this.b&nbsp;=&nbsp;20;<br>alert(b);<br><br>c&nbsp;=&nbsp;30;<br>alert(this.c);<br>构造器中<br><br>构造器中的&nbsp;this&nbsp;指代的是即将被创建出的对象。<br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;下面的指代即将被创建的对象<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Person(&quot;Q&quot;,&nbsp;12,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>函数中<br><br>函数中的&nbsp;this&nbsp;指代函数的调用者。<br>//&nbsp;constructor<br>function&nbsp;Person(name,&nbsp;age,&nbsp;birthdate)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;下面的指代即将被创建的对象<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;name;<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;age;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;birthdate;<br>&nbsp;&nbsp;this.changeName&nbsp;=&nbsp;function(newAge)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.age&nbsp;=&nbsp;newAge;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;this.gretting&nbsp;=&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;!!!&nbsp;下面这个&nbsp;this&nbsp;指代调用它的对象，既上面的<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;上面的&nbsp;gretting&nbsp;左边的&nbsp;this，既为即将被创建的对象<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(&quot;Hi,&nbsp;I&nbsp;am&nbsp;&quot;&nbsp;+&nbsp;this.name)<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;创建对象<br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Person(&quot;Stupid&quot;,&nbsp;13,&nbsp;new&nbsp;Date(2015,&nbsp;01,&nbsp;01));<br><br>X.changeName(&quot;X&quot;);<br>X.gretting();<br>NOTE:&nbsp;new&nbsp;Function(&quot;console.log(this)&quot;)&nbsp;中的&nbsp;this&nbsp;均指代全局对象。eval(&quot;console.log(this)&nbsp;则为调用上下文指代的&nbsp;this。<br>this&nbsp;实例<br><br>下面的例子使用&nbsp;apply&nbsp;与&nbsp;call。通过这两个方法来将一个对象中&nbsp;this&nbsp;指代的目标进行改变。<br>function&nbsp;Point(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;this.x&nbsp;=&nbsp;x;<br>&nbsp;&nbsp;this.y&nbsp;=&nbsp;y;<br>&nbsp;&nbsp;this.move&nbsp;=&nbsp;function(x,&nbsp;y)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;this.x&nbsp;+=&nbsp;x;<br>&nbsp;&nbsp;&nbsp;&nbsp;this.y&nbsp;+=&nbsp;y;<br>&nbsp;&nbsp;}<br>}<br><br>var&nbsp;point&nbsp;=&nbsp;new&nbsp;Point(0,&nbsp;0);<br>point.move(1,&nbsp;1);<br><br>var&nbsp;circle&nbsp;=&nbsp;{x:&nbsp;0,&nbsp;y:&nbsp;1,&nbsp;r:&nbsp;1};<br><br>//&nbsp;改变&nbsp;point&nbsp;中&nbsp;move&nbsp;方法&nbsp;this&nbsp;指代的对象至&nbsp;circle<br>point.move.apply(circle,&nbsp;[1,&nbsp;1]);<br>//&nbsp;同样可以用类似的&nbsp;call&nbsp;方法，区别为参数需依次传入<br>point.move.call(circle,&nbsp;1,&nbsp;1);<br><br>原型继承<br><br>使用原型（prototype）可以解决重复定义实例对象拥有的完全一致的属性或方法（既共享原型中的属性或方法）。<br>function&nbsp;Boss()&nbsp;{<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.tasks&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;this.title&nbsp;=&nbsp;&quot;Boss&quot;;<br>&nbsp;&nbsp;this.gretting&nbsp;=&nbsp;function()&nbsp;{console.log(&quot;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);};<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;中具有完全一致（不必唯一的属性或方法）<br>//&nbsp;并耗用内存的共享部分<br>//&nbsp;this.title&nbsp;与&nbsp;this.gretting<br>改造后的构造器<br>function&nbsp;Boss()&nbsp;{<br>&nbsp;&nbsp;this.age&nbsp;=&nbsp;0;<br>&nbsp;&nbsp;this.birthdate&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;this.name&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.tasks&nbsp;=&nbsp;[];<br>}<br>Boss.prototype&nbsp;=&nbsp;{<br>&nbsp;&nbsp;title:&nbsp;&quot;Boss&quot;,<br>&nbsp;&nbsp;gretting:&nbsp;function(){console.log(&quot;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);}<br>}<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;中具有完全一致（不必唯一的属性或方法）<br>//&nbsp;并耗用内存的共享部分<br>//&nbsp;this.title&nbsp;与&nbsp;this.gretting<br><br>var&nbsp;X&nbsp;=&nbsp;new&nbsp;Boss();<br>var&nbsp;Q&nbsp;=&nbsp;new&nbsp;Boss();<br><br>//&nbsp;X&nbsp;与&nbsp;Q&nbsp;拥有相同的原型&nbsp;Boss.prototype<br>原型链<br><br>使用原型继承的方法会产生原型链。JavaScript&nbsp;中对于对象的查找、修改和删除都是通过原型链来完成的。<br>判断属性是否为对象本身<br>objectName.hasOwnProperty(&quot;propertyName&quot;);<br>//&nbsp;返回布尔值&nbsp;true&nbsp;或&nbsp;false<br>属性查找<br><br>对象的属性查找会更随原型链依次查找，如果在当前环境中无法找到需要的属性则会继续向下一层原型中继续寻找。<br>属性修改<br><br>在&nbsp;JavaScript&nbsp;中对于对象属性的修改永远只修改对象自身的属性（不论是来源于对象本身还是对象的原型）。当创建当前对象不存在属性时（即便原型拥有此属性），也会为此对象增加改属性。<br>修改原型上的属性<br>修改原型属性会印象所有被创建出的对象现有的属性和方法。<br>ClassName.prototype.propertyName&nbsp;=&nbsp;&quot;new&nbsp;value&quot;;<br>ClassName.prototype.methodName&nbsp;=&nbsp;function(){...};<br>属性删除<br><br>delete&nbsp;objectName.propertyName&nbsp;只可删除对象自身的属性，无法删除对象的原型属性。<br>Object.create(proto[,&nbsp;propertiesObject])<br><br>其为ECMAScript&nbsp;5&nbsp;中提出的新建立对象的方式。在&nbsp;X&nbsp;中使用隐式的原型对象指向&nbsp;boss&nbsp;对象，并将其设为&nbsp;X&nbsp;对象的原型。<br>var&nbsp;boss&nbsp;=&nbsp;{<br>&nbsp;&nbsp;title:&nbsp;&quot;Boss&quot;,<br>&nbsp;&nbsp;gretting:&nbsp;function(){console.log(&quot;Hi,&nbsp;I&nbsp;am&nbsp;a&nbsp;Boss!&quot;);}<br>};<br><br>var&nbsp;X&nbsp;=&nbsp;Object.create(boss);<br>X.gretting();&nbsp;//&nbsp;Hi,&nbsp;I&nbsp;am&nbsp;a&nbsp;Boss!<br>低版本中实现&nbsp;Object.create&nbsp;功能<br>此种方式仍需使用&nbsp;ClassName.prototype&nbsp;的方式来实现。<br>var&nbsp;clone&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;F&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;return&nbsp;function(proto)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;F.prototype&nbsp;=&nbsp;proto;<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;F();<br>&nbsp;&nbsp;}<br>})();<br>面向对象的应用<br><br>全局变量<br><br>全局变量可在程序任意位置进行访问和修改的变量。滥用全局变量会导致，命名冲突，导致程序不稳定。<br>全局标量的三种定义方法：<br>var&nbsp;gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;。<br>window.gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;附加于&nbsp;window&nbsp;对象上<br>gloablVal&nbsp;=&nbsp;&quot;value&quot;;&nbsp;不使用&nbsp;var&nbsp;关键字，也附加于&nbsp;windwo&nbsp;对象<br>NOTE：delete&nbsp;无法删除在代码最顶端定义的全局标量&nbsp;var&nbsp;globale<br>封装<br><br>信息隐藏可以保证程序的稳定，将内部信息进行隐藏。其他语言中可词用访问权限来实现封装的概念，像&nbsp;private、public。<br>JavaScript&nbsp;中的封装可使用函数的方法（闭包）。<br>//&nbsp;模拟&nbsp;private&nbsp;的属性<br>function&nbsp;ClassName(){<br>&nbsp;&nbsp;var&nbsp;_property&nbsp;=&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;this.getProperty&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;_property;<br>&nbsp;&nbsp;};<br>}<br><br>//&nbsp;模拟&nbsp;protected&nbsp;属性，使用人为约束规则<br>var&nbsp;pro&nbsp;=&nbsp;ClassName.prototype;<br>pro._protectedMethod&nbsp;=&nbsp;function(){...};<br>pro.publicMethod&nbsp;=&nbsp;function(){...};<br>继承<br><br>原型继承<br><br>原型继承的方式为&nbsp;JavaScript&nbsp;中固有的继承方式。<br>var&nbsp;proto&nbsp;=&nbsp;{<br>&nbsp;&nbsp;action1:&nbsp;function(){},<br>&nbsp;&nbsp;action2:&nbsp;function(){}<br>}<br><br>var&nbsp;obj&nbsp;=&nbsp;Object.create(proto);<br>在不支持&nbsp;EM5&nbsp;中的实现方法：<br>var&nbsp;clone&nbsp;=&nbsp;(function(){<br>&nbsp;&nbsp;var&nbsp;F&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;return&nbsp;function(proto)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;F.prototype&nbsp;=&nbsp;proto;<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;new&nbsp;F();<br>&nbsp;&nbsp;}<br>})();<br>类继承<br><br>使用原型链继承的方式模拟其他语言类继承的特性。<br>function&nbsp;ClassA()&nbsp;{<br>&nbsp;&nbsp;ClassA.classMethod&nbsp;=&nbsp;function(){};<br>&nbsp;&nbsp;ClassA.prototype.api&nbsp;=&nbsp;function(){};<br><br>&nbsp;&nbsp;function&nbsp;ClassB()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;ClassA.apply(this,&nbsp;argument);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;ClassB.prototype&nbsp;=&nbsp;new&nbsp;ClassA();<br>&nbsp;&nbsp;ClassB.prototype.constructor&nbsp;=&nbsp;ClassB;<br>&nbsp;&nbsp;ClassB.prototype.api&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;ClassA.prototype.api.apply(this,&nbsp;arguments);<br>&nbsp;&nbsp;}<br>}<br><br>//&nbsp;ClassA&nbsp;为父类<br>//&nbsp;ClassB&nbsp;为子类<br><br>var&nbsp;b&nbsp;=&nbsp;new&nbsp;ClassB();<br>b.api();","addLink":"","date":"2016-01-07 15:13","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":9},{"addArticleTtitle":"正则表达式","classify":"javascript","addarticleContent":"正则表达式为标书字符串规则的表达式。下面为两个例子为在&nbsp;JavaScript&nbsp;中的使用，<br>/pattern/attrs<br>new&nbsp;RegExp(pattern,&nbsp;attrs)<br>锚点<br><br>锚点用于匹配一个位置，下列为常用的锚点<br>^&nbsp;起始的位置&nbsp;/^http/<br>$&nbsp;结尾的位置&nbsp;/&#92;.jpg$/<br>&#92;b&nbsp;单词边界<br>字符类<br><br>字符类用于匹配一类字符中的一个，下面为几个常用的例子，<br>[abc]&nbsp;可用于匹配&nbsp;a&nbsp;b&nbsp;还有&nbsp;c<br>[0-9]&nbsp;可用于匹配一个数字<br>[^0-9]&nbsp;可用于匹配一个非数字<br>[a-z]&nbsp;可用于匹配一个字母<br>.&nbsp;任意字符但换行符除外<br>元字符<br><br>元字符为具有特殊意义的字符。常见的有，<br>^,&nbsp;$,&nbsp;&#92;b<br>&#92;d&nbsp;用于匹配数字&nbsp;[0-9]<br>&#92;D&nbsp;用于匹配&nbsp;[^&#92;d]<br>&#92;s&nbsp;用于匹配空白符<br>&#92;S&nbsp;用于匹配非空白符&nbsp;[^&#92;s]<br>&#92;w&nbsp;用于匹配任意单词字符（例如程序中的变量字符）&nbsp;[A-Za-z0-9_]<br>&#92;W&nbsp;用于匹配非单词字符&nbsp;[^&#92;W]<br>量词<br><br>量词用于表现字符出现的次数。可用的连词如下，<br>{m,n}&nbsp;用于表示出现&nbsp;m&nbsp;到&nbsp;n&nbsp;次之间。<br>*&nbsp;用于表示出现&nbsp;0&nbsp;到无穷之间也就等同于&nbsp;{0,}<br>?&nbsp;用于表示出现&nbsp;0&nbsp;次到&nbsp;1&nbsp;次也等同于&nbsp;{0,1}<br>+&nbsp;用于表现出现&nbsp;1&nbsp;次以及一次以上也等同于&nbsp;{1,}<br>转移符<br><br>转义符需要在匹配的字符是元字符的时候使用。使用&nbsp;&#92;&nbsp;来进行转移即可。2<br><br>多选分支<br><br>多选分支用于表示或的概念。/thi(c|n)k/&nbsp;其又等同于&nbsp;/thi[cn]k/。其还可以用于匹配文件扩展名&nbsp;/&#92;.(png|jpg|jpeg|gif)$/&nbsp;。<br>常用方法<br><br>测试：regxObj.test(str)<br><br>其用于测试正则表达式与指定字符串是否匹配。<br>/123/.test(123);&nbsp;//&nbsp;true<br>/123/.test(111);&nbsp;//&nbsp;false<br>/123/.test(&quot;x123&quot;);&nbsp;//&nbsp;true<br>捕获<br><br>其用于保存所匹配到的字符串为后续开发所用。()&nbsp;可用于捕获，正则表达式再运行时会将其保存下来，(?:)&nbsp;则不予保存。<br>//&nbsp;str.match(regexp)<br>var&nbsp;url&nbsp;=&nbsp;&quot;http://www.google.com/query?test=li-xinyang#cool&quot;;<br>var&nbsp;reg&nbsp;=&nbsp;/(https?:)&#92;/&#92;/([^&#92;/]+)(&#92;/[^&#92;?]*)?(&#92;?[^#]*)?(#,*)?/;<br><br>var&nbsp;arr&nbsp;=&nbsp;url.match(reg);<br>var&nbsp;protocol&nbsp;=&nbsp;arr[1];<br>var&nbsp;host&nbsp;=&nbsp;arr[2];<br>var&nbsp;pathname&nbsp;=&nbsp;arr[3];<br>var&nbsp;search&nbsp;=&nbsp;arr[4];<br>var&nbsp;hash&nbsp;=&nbsp;arr[5];<br>搜索与替换<br><br>regexpObj.exec(str)&nbsp;可以提供更强大的检索，它可以提供更详尽的结果&nbsp;index&nbsp;也可以提供过程状态&nbsp;lastIndex。<br>str.replace(regex/substr,&nbsp;replacement)&nbsp;可以使用正则表达式来对字符串进行替换。","addLink":"","date":"2016-01-07 15:15","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":10}],"jquery":[{"addArticleTtitle":"特点：选择网页元素---模拟css选择元素","classify":"jquery","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;模拟css选择元素&lt;/title&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&nbsp;src=&quot;jquery-1.11.3.min.js&quot;&gt;&lt;/script&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;div1&quot;&nbsp;class=&quot;box&quot;&gt;div&lt;/div&gt;<br>&nbsp;&nbsp;&lt;span&nbsp;class=&quot;box&quot;&gt;span&lt;/span&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;div2&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;divdiv&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;pp&lt;/p&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#div1&quot;).css(&quot;background&quot;,&quot;red&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;div&quot;).css(&quot;background&quot;,&quot;green&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;.box&quot;).css(&quot;background&quot;,&quot;blue&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;$(&quot;#div2&nbsp;p&quot;).css(&quot;background&quot;,&quot;red&quot;);<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>","addLink":"","date":"2016-01-06 23:07","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0}],"zepto":[],"git":[],"flex":[],"layout":[{"addArticleTtitle":"居中布局---实现父元素不定宽高、子元素水平居中的几种方法","classify":"layout","addarticleContent":"1.inline-block+text-align<br>特点：<br>&nbsp;&nbsp;兼容性好，给display:&nbsp;inline-block;做兼容（*display:inline;*zoom:1;）<br><br>后可以支持到IE6<br>实现方法：<br>&nbsp;&nbsp;.child1{display:&nbsp;inline-block;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.parent1{text-align:&nbsp;center;}<br><br>2.table+margin<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性：display:&nbsp;table&nbsp;IE8以上，如果想支持IE6、7可以把div换位table结<br><br>构<br>实现方法：<br>&nbsp;&nbsp;.child2{display:&nbsp;table;margin:&nbsp;0&nbsp;auto;&nbsp;background-color:&nbsp;black;}<br><br>3.absolute+transform&nbsp;<br>特点：<br>&nbsp;&nbsp;兼容性：transform&nbsp;IE9以上&nbsp;&nbsp;优点：设置position:&nbsp;absolute;的元素脱离文<br><br>档流，不影响其他子元素<br>实现方法：<br>&nbsp;&nbsp;.parent3{position:&nbsp;relative;}<br>&nbsp;&nbsp;.child3{position:&nbsp;absolute;left:&nbsp;50%;transform:translateX(-<br><br>50%);background-color:&nbsp;black;}<br><br>4.flex<br>特点：<br>&nbsp;&nbsp;兼容性：flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent4{display:&nbsp;flex;justify-content:center;}<br>&nbsp;&nbsp;.child4{background-color:&nbsp;black;}<br>","addLink":"<a href=&quot;./layout/demo1.html&quot;>以上实现方法Demo<a/>","date":"2016-01-05 00:14","author":"xxz","good":3,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"居中布局---实现父元素不定高度，子元素垂直居中的几种方法","classify":"layout","addarticleContent":"1.table-cell+vertical-align<br>特点：<br>&nbsp;&nbsp;兼容到IE8以上，如果想兼容IE6、7,把&nbsp;DIV改成table<br>实现方法：<br>&nbsp;&nbsp;.parent1{display:&nbsp;table-cell;vertical-align:&nbsp;middle;background-color:&nbsp;black;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child1{background-color:&nbsp;white;}&nbsp;<br><br>2.absolute+transform&nbsp;<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{position:&nbsp;relative;height:&nbsp;100px;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.child2{position:&nbsp;absolute;top:50%;&nbsp;transform:translateY(-50%);&nbsp;background-color:&nbsp;white;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;&nbsp;align-items:center;&nbsp;background-color:&nbsp;black;&nbsp;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child3{background-color:&nbsp;white;}<br>","addLink":"<a href=&quot;./layout/demo2.html&quot;>Demo<a/>","date":"2016-01-05 10:09","author":"xxz","good":1,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"居中布局---实现父元素不定宽高、子元素居中的几种方法","classify":"layout","addarticleContent":"1.inline-block+text-align+table-cell+vertical-align<br>特点：<br>&nbsp;&nbsp;兼容性好<br>实现方法：<br>&nbsp;&nbsp;.parent1{text-align:&nbsp;center;&nbsp;display:&nbsp;table-cell;vertical-align:&nbsp;middle;background-color:&nbsp;black;height:&nbsp;100px;width:&nbsp;100px;}<br>&nbsp;&nbsp;.child1{display:&nbsp;inline-block;&nbsp;background-color:&nbsp;white;}<br><br>2.absolute+transform<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{position:&nbsp;relative;height:&nbsp;100px;background-color:&nbsp;black;}<br>&nbsp;&nbsp;.child2{position:&nbsp;absolute;top:50%;left:&nbsp;50%;&nbsp;transform:translate(-50%,-50%);&nbsp;background-color:&nbsp;white;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性：兼容性IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;justify-content:center;&nbsp;align-items:center;&nbsp;background-color:&nbsp;black;&nbsp;height:&nbsp;100px;}<br>&nbsp;&nbsp;.child3{background-color:&nbsp;white;}","addLink":"<a href=&quot;./layout/demo3.html&quot;>Demo<a/>","date":"2016-01-05 10:19","author":"xxz","good":2,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"多列布局---实现一列定宽，一列自适应的几种方法","classify":"layout","addarticleContent":"1.float+margin<br>特点：<br>&nbsp;&nbsp;不足：当right中子元素有清除浮动时，会对布局有影响&nbsp;&nbsp;margin-right:&nbsp;-100px;兼容IE6<br>实现方法：<br>&nbsp;&nbsp;.left1{float:&nbsp;left;width:&nbsp;100px;&nbsp;background-color:&nbsp;#ccc;margin-right:&nbsp;-100px;}<br>&nbsp;&nbsp;.right1{margin-left:&nbsp;120px;&nbsp;background-color:&nbsp;#555;}<br><br>2.float+margin+(fix)<br>特点：&nbsp;<br>&nbsp;&nbsp;第一个方案的改进，right中有浮动子元素，不影响。兼容IE6<br>实现方法：<br>&nbsp;&nbsp;.left2{float:&nbsp;left;width:&nbsp;100px;position:&nbsp;relative;&nbsp;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right-fix{float:&nbsp;right;width:&nbsp;100%;margin-left:-100px;&nbsp;}<br>&nbsp;&nbsp;.right2{margin-left:&nbsp;120px;&nbsp;background-color:&nbsp;#555;}<br><br>3.float+hidden<br>特点：<br>&nbsp;&nbsp;不支持IE6<br>实现方法：<br>&nbsp;&nbsp;.left3{float:&nbsp;left;width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right3{overflow:&nbsp;hidden;&nbsp;background-color:&nbsp;#555;}<br><br>4.table<br>特点：<br>&nbsp;&nbsp;<br>实现方法：<br>&nbsp;&nbsp;.parent4{display:&nbsp;table;width:&nbsp;100%;}<br>&nbsp;&nbsp;.left4,.right4{display:&nbsp;table-cell;background-color:&nbsp;#555;}<br>&nbsp;&nbsp;.left4{width:&nbsp;100px;padding-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br><br>5.flex<br>特点：<br>&nbsp;&nbsp;兼容性：兼容性差，flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent5{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left5{width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right5{flex:1;background-color:&nbsp;#555;}<br><br>6.两列定宽+一列自适应，方法跟上面类似<br>float+margin实现方法：<br>&nbsp;&nbsp;.left6,.middle6{float:&nbsp;left;width:&nbsp;100px;&nbsp;background-color:&nbsp;#ccc;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.middle6{margin-right:&nbsp;-100px;}<br>&nbsp;&nbsp;.right6{margin-left:&nbsp;240px;&nbsp;background-color:&nbsp;#555;}<br><br><br><br><br>","addLink":"<a href=&quot;./layout/demo4.html&quot;>Demo<a/>","date":"2016-01-05 10:53","author":"xxz","good":2,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"多列布局---实现一列不定宽，一列自适应的几种方法","classify":"layout","addarticleContent":"1.float+overflow<br>特点：<br>&nbsp;&nbsp;兼容性好<br>实现方法：<br>&nbsp;&nbsp;.left1{float:&nbsp;left;background-color:&nbsp;#ddd;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.right1{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>2.table<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性好&nbsp;&nbsp;&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent2{display:&nbsp;table;width:&nbsp;100%;}<br>&nbsp;&nbsp;.left2,.right2{display:&nbsp;table-cell;}<br>&nbsp;&nbsp;.left2{width:&nbsp;0.1%;padding-right:&nbsp;20px;&nbsp;background-color:&nbsp;#ddd;}<br>&nbsp;&nbsp;.right2{background-color:&nbsp;#555;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性差<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left3{margin-right:&nbsp;20px;background-color:&nbsp;#ddd;}<br>&nbsp;&nbsp;.right3{flex:1;background-color:&nbsp;#555;}&nbsp;&nbsp;<br><br>4.两列不定宽+自适应<br>特点：<br>&nbsp;&nbsp;&nbsp;新增加的列和左列样式一样&nbsp;<br>实现方法：<br>&nbsp;&nbsp;.left4,.middle4{float:&nbsp;left;background-color:&nbsp;#ddd;margin-right:&nbsp;20px;}<br>&nbsp;&nbsp;.right4{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>","addLink":"<a href=&quot;./layout/demo5.html&quot;>Demo<a/>","date":"2016-01-05 14:10","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4},{"addArticleTtitle":"多列等分布局---实现父元素不定宽度，子元素多列等分布局的几种方法","classify":"layout","addarticleContent":"1.float<br>特点：<br>&nbsp;&nbsp;兼容性好&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent1{margin-left:&nbsp;-20px;}<br>&nbsp;&nbsp;.column{float:&nbsp;left;width:&nbsp;25%;padding-left:&nbsp;20px;box-sizing:border-box;}<br>&nbsp;&nbsp;.div1&nbsp;p{background-color:&nbsp;red;}<br>&nbsp;&nbsp;.div2&nbsp;p{background-color:&nbsp;green;}<br>&nbsp;&nbsp;.div3&nbsp;p{background-color:&nbsp;blue;}<br>&nbsp;&nbsp;.div4&nbsp;p{background-color:&nbsp;black;}<br><br>2.table<br>特点：&nbsp;<br>&nbsp;&nbsp;兼容性好&nbsp;IE8以上<br>实现方法：<br>&nbsp;&nbsp;.parent-fix{margin-left:&nbsp;-20px;}<br>&nbsp;&nbsp;.parent2{display:&nbsp;table;width:&nbsp;100%;table-layout:&nbsp;fixed;}<br>&nbsp;&nbsp;.column2{display:&nbsp;table-cell;padding-left:&nbsp;20px;}<br><br>3.flex<br>特点：<br>&nbsp;&nbsp;兼容性：flex&nbsp;IE9以上<br>实现方法：<br>&nbsp;&nbsp;.parent3{display:&nbsp;flex;}<br>&nbsp;&nbsp;.column3{flex:1;}<br>&nbsp;&nbsp;.column3+.column3{margin-left:&nbsp;20px;}<br><br>","addLink":"<a href=&quot;./layout/demo6.html&quot;>Demo<a/>","date":"2016-01-05 14:23","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":5},{"addArticleTtitle":"多列等高布局---实现子元素多列等高布局的几种方法","classify":"layout","addarticleContent":"1.table<br>实现方法：<br>&nbsp;&nbsp;.parent1{display:&nbsp;table;width:&nbsp;100%;table-layout:&nbsp;fixed;}<br>&nbsp;&nbsp;.left1,.right1{display:&nbsp;table-cell;background-color:&nbsp;#555;}<br>&nbsp;&nbsp;.left1{width:&nbsp;100px;padding-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br><br>2.flex<br>实现方法：<br>&nbsp;&nbsp;.parent2{display:&nbsp;flex;}<br>&nbsp;&nbsp;.left2{width:&nbsp;100px;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right2{flex:1;background-color:&nbsp;#555;}<br><br>3.float<br>实现方法：<br>&nbsp;&nbsp;.parent3{overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;.left3,.right3{padding-bottom:&nbsp;9999px;margin-bottom:&nbsp;-9999px;}<br>&nbsp;&nbsp;.left3{float:&nbsp;left;&nbsp;width:&nbsp;100px;&nbsp;margin-right:&nbsp;20px;background-color:&nbsp;#ccc;}<br>&nbsp;&nbsp;.right3{overflow:&nbsp;hidden;background-color:&nbsp;#555;}<br><br>","addLink":"<a href=&quot;./layout/demo7.html&quot;>Demo<a/>","date":"2016-01-05 14:42","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":6},{"addArticleTtitle":"全屏布局---position实现方案","classify":"layout","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;水平居中&lt;/title&gt;<br>&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*兼容性:IE6不兼容，可以用hash*/&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;html,body,.parent{height:&nbsp;100%;overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.top{position:&nbsp;absolute;top:0;left:&nbsp;0;right:&nbsp;0;height:&nbsp;100px;background-color:&nbsp;#222;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.left{position:&nbsp;absolute;top:&nbsp;100px;left:&nbsp;0;bottom:&nbsp;50px;width:&nbsp;200px;background-color:&nbsp;#444;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.right{position:&nbsp;absolute;top:&nbsp;100px;bottom:&nbsp;50px;left:&nbsp;200px;right:&nbsp;0;background-color:&nbsp;#666;overflow:&nbsp;auto;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.bottom{position:&nbsp;absolute;left:&nbsp;0;right:&nbsp;0;bottom:&nbsp;0;height:&nbsp;50px;background-color:&nbsp;#888;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.inner{min-height:&nbsp;1000px;}<br>&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;&nbsp;&nbsp;<br>&nbsp;&nbsp;&lt;div&nbsp;class=&quot;parent&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;top&quot;&gt;top&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;left&quot;&gt;left&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;right&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;inner&quot;&gt;inner&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"<a href=&quot;./layout/demo8.html&quot;>Demo<a/>","date":"2016-01-05 15:21","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":7},{"addArticleTtitle":"全屏布局---flex方案","classify":"layout","addarticleContent":"&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;水平居中&lt;/title&gt;<br>&nbsp;&nbsp;&lt;style&nbsp;type=&quot;text/css&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;/*兼容性IE9以下不兼容，可以用hash*/&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;html,body,.parent{height:&nbsp;100%;overflow:&nbsp;hidden;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.parent{display:&nbsp;flex;flex-direction:column;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.top{height:&nbsp;100px;background-color:&nbsp;#222;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.bottom{height:&nbsp;50px;background-color:&nbsp;#888;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.middle{flex:1;display:&nbsp;flex;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.left{width:&nbsp;200px;background-color:&nbsp;#444;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.right{flex:1;background-color:&nbsp;#666;overflow:&nbsp;auto;}<br>&nbsp;&nbsp;&nbsp;&nbsp;.inner{min-height:&nbsp;1000px;}<br>&nbsp;&nbsp;&lt;/style&gt;<br>&lt;/head&gt;<br>&lt;body&gt;&nbsp;&nbsp;<br>&nbsp;&nbsp;&lt;div&nbsp;class=&quot;parent&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;top&quot;&gt;top&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;middle&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;left&quot;&gt;left&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;right&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;inner&quot;&gt;inner&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/div&gt;&nbsp;&nbsp;&nbsp;&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&nbsp;class=&quot;bottom&quot;&gt;bottom&lt;/div&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;","addLink":"<a href=&quot;./layout/demo9.html&quot;>Demo<a/>","date":"2016-01-05 15:43","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":8}],"buildWebsite":[],"resources":[],"encourage":[{"addArticleTtitle":"穷人思维","classify":"encourage","addarticleContent":"穷人为什么穷？无论中国美国，主流对此都有种没明说但心照不宣的观点：因为他们懒、酗酒、赌博……曾有条被疯转微博，一位妈妈卖盗版光盘被城管追赶跳入水中，当时，一位女博士点评说北京好月嫂都月入过万了，何必要选这么苦情的生活方式？此微博后被证实为谣言，但抱小孩卖毛片的中年女性的确曾是北京一景。中产阶级的眼界不是穷人的眼界，正如本书作者也苦苦思索，劳工为何不要求加薪，或寻找更高薪工作，甚至组织工会，维护自身权益？答案是，越贫困，越无力。<br><br>畅销书女作家芭芭拉•艾伦瑞克进入美国底层，体验在时薪6~8美元下，辛勤工作是否能生活下去，她的答案是：不能。除非你跟别人合租房子，或者打两份工。<br><br>她在三个城市当过餐厅服务员、旅馆服务员、清洁女工、看护护理及沃尔玛的售货员，她努力工作，也努力尝试收支平衡，为此她曾勇猛打两份工，一周工作七天，每周还能在打工的看护之家免费吃两三餐，这些都帮助了她。但到旅游旺季，房租将上涨三倍，身为女佣的她，只能再次破产。<br><br>作者有穷人没有的优势：在前面的几十年，她有高于一般水平的医疗照顾、良好饮食、她常年练举重，身体“是不寻常的结实”。并且，就这个实验来说，她作弊了，她给自己租车，用信用卡付费；每到一个城市，她备有一千多美元的起头基金；她开了外挂，却仍然没有打赢。<br><br>我一度觉得这本《我在底层的生活——当专栏作家化身女服务员》是来黑美国的，因为美剧、好莱坞电影不曾说过，还有这么个美国存在：低薪白人劳工，三四人挤在一个小房间里生活；怀孕的清洁工摔伤也不敢请假，一天没薪水，第二天就没钱买杂物；沃尔玛的员工付不起房租，住在收容所；背着十几磅重的吸尘器吸尘、跪在地上擦地，女佣们话题热点是哪个牌子的止痛药最好用；没有健康保险，因为太贵，这意味如果生病，你要比别人多花钱。<br><br>女招待考虑搬入每晚40~60美金的汽车旅馆（她每天才挣四十多美金），作家惊讶问她怎么想的，同事像看笨蛋一样看着女作家：我上哪儿弄一个月的租金跟押金去租公寓？而女作家，之所以能租到月租500的公寓，是拜她从自己的现实世界带来的1000美金付押金及头一月租金所赐。<br><br>不断上涨的房租是穷人的噩梦，作者发现，穷人越来越多住在汽车旅馆。后者可以按天结账，犹如鸦片，诱惑现金紧张的穷人陷进去，微薄的积蓄被烧光，更加不可能有钱租公寓。作者发现有两个男人轮流睡一张床，一个人睡觉时另一个在车上打盹。而我忽然明白卡佛小说里的那些穷人，那些卖掉农庄，揣着全部积蓄进城找工作的一家人，在一间汽车旅馆里住下去，某一天又一声不吭地走掉——他们就是汽车旅馆鸦片的受害者，他们不是走掉，是掉入地狱的更下一层。<br><br>作者认为，穷人破产，因为薪水太低，而房租太贵。这一点中国读者想必也深有共鸣。当房租犹如奥运会田径赛道上的博尔特般一路狂奔，穷人只能不停搬家，搬入一间又一间不带家具的公寓，锅碗瓢勺家具又是一笔钱；或入住汽车旅馆胶囊公寓，只剩一张床那么大小的房间，你证悟到睡觉和死亡何其相似。而无法做饭的后果，是你要花更多钱在吃饭上。最终，她，还有我们，均不难发现一条荒谬定律，如果你穷，你就得比不穷的人花更多的钱，才能活下去。这不是美剧中的美国，但它并不陌生。全世界的金钱流动法则相同：钱生育钱，贫困生育贫困。<br><br>作者有强烈的政治立场，而她真实凶残的打工经历平衡了她的倾向。说到底这并不是一本坐在空调房间凭政治理念写出来的书，她一天工作九小时，住在没有纱窗空调电扇的旅馆，因为锁不上门，不得不合衣而睡。而她的工作，是在35度高温下打扫“有五套浴厕的房子”，撅起屁股，跪于大理石地板，用抹布擦过每一寸地面，擦干净整排玻璃门上的每一个指纹，而且遵循女仆美德，不在主人家喝水；是每周六日服侍近四十名阿兹海默症老年病人吃三餐、清理餐具、擦桌吸地，“我只能全力跟上洗碗机吐出盘子和脏盘子涌进来的速度”；午饭是高速路上停车上厕所时的五分钟；上厕所要打卡。即使这样，仍有几次，她不得不求助于慈善机构，后者提供的免费食物，对没有冰箱的穷人来说并不实用；而一个“平价”通铺床位，每晚也要19美元，慈善机构的小姐建议她“搬进收容所”，以便存到足够的钱交第一个月的房租和押金。<br><br>她将自己奉献为小白鼠，而我们得以观察，贫穷是如何侵蚀一个人的精神。<br><br>作者自己能从时薪5.15美元的餐厅跳槽至时薪7.5，因为她有车，可四处应聘，上班范围更有弹性。她的同事若换工作，交通是大问题，甚至需更换住处。穷人比富人更保守，更不愿意改变，就像奴隶比奴隶主更保守。物质上的窘迫，使他们承受不起改变，冒不起一周没工作的风险。那意味着他们会挨饿，从现在的房子被赶出去，掉到地狱更可怕的下一层。<br><br>但作者在找工作时呈现的状态，她的精神活力、她的勇气才是她和她的同事们之最大区别。同样被羞辱及盘剥，她跃跃欲试组织工会，她的同事却只希望偶尔请一天假，第二天还能有钱买点杂货。这一部分也可用来解释教育的重要所在，作者隐瞒了博士学位，却拿不走自己的思维。精神的贫困是穷人解脱贫穷的最大障碍。<br><br>两个多月的底层生活后，作者的背伤复发、全身起了疱疹，并且，她身为“民主社会主义者”“女性主义者”，对底层人民抱有的博爱之情，慢慢变淡，代之以麻木，甚至仇恨。一个身高不到1米4的女售货员跟她起了纠纷，她看着后者踩着梯子才够得着高处衣服，一股恶意涌上，“希望能看到她啪地一声摔到地上”；而残疾员工忧伤地坐在轮椅里，她看到第一感觉是“至少你还坐着。”——她忽然意识到，如果自己的父亲没有脱离矿工身份，如果去掉自己的教育程度，也许自己就是现在这样：苛刻、狡猾、满怀怨恨。她没有强调，但读者可以自行总结：穷人仇恨穷人。这不是什么新鲜事，却让人难以面对——穷人不都是善良的么？法国作家塞利纳在他1935年的《长夜行》里写道：“我们之间有五个法郎的隔阂，就足以产生恨，希望他们统统死光。”“五个法郎”，可以换成小升初的一个名额、一个工作机会，甚至仅仅是高峰期公车上的一个座位、它仍然“足以产生恨，希望他们统统死光”。不信你看北京上海贴吧里，那些铺天盖地的“外地人滚出去”。<br><br>贫穷是一种专制，它培养自己的奴隶。当你习惯于被剥夺自尊，习惯于被当做一个小偷/懒虫/酒鬼对待，当你常年生活在社会边缘、你存在的意义被抹去，宛如你根本不存在。而打开电视——无论中美——都是老板，男女白领，即使是喊着奋斗的北漂，住的也是你这辈子都住不上的三室两厅，它会让你以为“只有我自己才是不正常的”。精神上的专制就此完成。穷奴大抵上有两种，一种借仇恨别人获得自己高人一等的存在价值感，一种则接受自己是最弱的，就像那些被迫在自己的社会体系中落入屈从位置的沮丧的猴子，它们变得焦虑而退缩，不再挣扎，甚至对自卫也毫无兴趣。<br><br>借助铁丝和剪刀，能培养出自然界不存在的侏儒松，定型成功，即使松开捆扎铁丝，那些松树也固定在扭曲的姿态。同样，精神上的专制，令你在内心相信自己就是个侏儒。芭芭拉•艾伦瑞克细腻雄辩地写出精神的毁灭之路，我却在其中看到熟悉的人脸，作为经历了大饥荒的幸存者的后代，她绘出的精神贫穷者的肖像我并不陌生。那些脸在我们周围漫游，如恒河河沙，又似幽灵。<br><br>怎么办？也许没有一个药方可以取消贫困，但至少下次看到一个走投无路的穷人，在指责他懒惰、酗酒之前还可以多想一秒钟；在大吼“外地人滚出去”之前，还可以思考一下这仇恨从何而来；即使我们的初始值是一棵被剪成侏儒的盆景，也可以在松绑后尝试站起来，笔直地站成一棵树。<br><br>开外挂的女作家，无论如何也做不到收支平衡。但实在要流浪街头时，她可以挖出自己的信用卡，大吃一顿。可是现实中真正的穷人，她的同事们呢？<br><br>我想起《没有人给他写信的上校》的最后一段：绝望的妻子揪着上校的领子，问这些天我们吃什么？<br><br>“上校活了七十五岁——用他一生中分分秒秒积累起来的七十五岁——才到了这个关头。他自觉心灵清透，坦坦荡荡，什么事也难不住他。他说：<br><br>‘吃屎’。”","date":"2016-01-04 20:15","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"行走，回首","classify":"encourage","addarticleContent":"&nbsp;&nbsp;人生路，漫漫而行。一阵秋雨洒落，驻足回首，秋叶纷飞。踩过一叠厚厚堆积的落叶，仿佛就像生命中一堆纠缠不清的人和事，渐渐遗忘，渐渐随风。<br>　　<br>　　往事过眼，便是回忆。你的呢喃，清晰在耳畔。但我的眼眸，已失去了你的色彩。人生这条路，走的越远，失去的就越多，想抓也抓不住，想停也只能一直走下去。<br>　　<br>　　昨日的温存，已成了今日的怀恋。依稀记得梦中的清风随了夜，划在心底的寒，淡淡的痛。你说的话语，凋零在上一个叶落，满地的残朵。我却傻傻祈求，时光捡起，成为我心中不忘的那朵。<br>　　<br>　　转眼间秋风舞动，一声呓语飘落清冷，像一场邂逅，一次回眸。记忆在残风中流逝，那样匆匆，那样落寞，连呼喊都来不及停留，便消散在天边不见。书刻思念的篇章，空白，黯淡，碎散一地无法拼凑。寥寥秋落，回忆是那么的无助，那么令人叹息，苍白的嘴唇自嘲苦笑，连握笔的手指都那么的无力，消瘦。<br>　　<br>　　告诉我什么是孤独？我们还会再见吗？最后的旅程擦肩而过，时光带走了一切，但我只求留下最后的思念。<br>　　<br>　　醉念红尘，抚桥流水。岁月铸就的青石板路，寸草难生，如同霜寒舞天的夜月，哀叹了生命的流逝。一曲残星滑落，蓦然回首。这条路，孤独的没有任何生命。<br>　　<br>　　时间匆忙，我们来不及休息。风景匆匆而来又匆匆而去，看到了风景却落下了脚程。人的使命就是在孤独寂寞中寻索，可人自己，却想看看尘世的美艳。这一世为使命，还是为自己？<br>　　<br>　　又是那条无人的街道，一个人漫步远去，莫名的情绪，莫名在颤动。眼神茫然地注视着前方，寒风带起的落叶，如思念般那么无助那么遥远，像根丝线般，缠绕着你绷紧的心弦，连雨落到脸上，还依旧倔强地走着。<br>　　<br>　　那些人再也不回来，那片天最后模糊了色彩。我们都是孤独的，都在黑夜中寻找被云雾遮掩的星空，却看到了流星失落的雨夜。期盼着刺目的阳光，却在逆光的地方，看着自己沉默的倒影。以为世界会关注自己，转过身看着消失的彼岸，却不得不为世界而哭泣。<br>　　<br>　　一条沉默的路，一个狼狈的背影。彷徨，无助。孤独的感觉似幽风徘徊在耳边，拉动了最后的心弦，凄厉地惨叫。奔跑，跌撞。无人的世界，无人的寂静。回首，期盼的眼眸望不到熟悉的轻语;行走，孤独的身影望不到漆黑的彼方。泪断的雨线，渐渐模糊了记忆的错觉……<br>　　<br>　　虚无的世界，虚无的路，孤独的人，孤独地走。耳边飘来了熟悉的话语:不是所有委屈都可以呐喊，不是所有心事都可以述说，有些事只有自己能做，别人帮不了你。这条路，注定是寂寞的。回首，充满了期待却是更残酷的等待。<br>　　<br>　　秋季，等待了一地叶落，像那些荒芜的岁月，像是旅人，望着沉默的斑驳古路，带着落寞，行走，回首……","date":"2016-01-04 20:24","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"一直努力，直至成功","classify":"encourage","addarticleContent":"&nbsp;&nbsp;所谓理想就是把我们的愿景放在一个价值观的尺度上度量，然后决定人生往哪里走？去哪里？走多远？和谁走？<br>　　<br>　　从民营企业角度看，我做生意是被迫的一个开始，但习惯于用自己的价值观来引导我做判断，因此一直把丧事当喜事办。因为我总觉得自己要去心中期待的某个地方，这时我会经常想起鲁迅的一个小说《过客》。这个过客腿脚不好，他一直不停地走，有天他到一个茶水摊和一个老人和小孩对话，询问前方的路该怎么走？老人告诉他：过了一个坟地，再往前一拐，差不多就到了。他又问那小孩儿，小孩告诉他，你看见那片鲜花了，再往前走就到了。同样一个地方，老人眼里看见的是坟墓，而年轻人眼里看见的是鲜花，可见视野和心态截然不同。而这个过客心里只有一句话，就是——我要走，我要走，我要走。<br>　　<br>　　我在创业和折腾的过程中经常会想起这个故事，我心里有两个地方可以去，一个是坟墓，一个是鲜花，不管是哪个，当下就是“我要走”这样一个状态，这种想法陪伴我，从开始很被动的创业，甚至到后来哪怕负债累累，人生已经到了最绝望的时候，始终没有放弃，仍然把丧事当喜事办，因为我意识到理想是希望的风，是黑暗尽头的那道光，有了它，我能驱走黑暗与恐惧，虽然不知道前方有多远，但是依然有坚持下去的力量。<br>　　<br>　　50岁生日前夕，我决定送给自己的一份特别、有纪念意义的生日礼物，去台湾骑自行车环岛旅行。那时正值酷暑，我每天骑行80多公里，总共环岛5500公里，路上看到一个老太太比我还猛，她磕头环岛。我问她，您怎么走？她说，我就拜拜拜拜，一直走没停过。我很是敬佩，送给她一瓶水，她接着继续走。真的很难想象一个瘦老太太单薄的身躯下，哪来这么大能量？只有一个答案：她心里有佛，有信念，有理想和快乐的天堂，所以才有如此的毅力和能量，不停地拜下去，也许有一天膝盖流血她却浑然不知，也许有一天她会劳累晕眩，但她心里追求的天堂不会坠落。<br>　　<br>　　我再说一个崔永元的故事，原来我们俩很不搭界，相信他对“黑心开发商”也抱有道德上的不满，而在央视看到的小崔似乎也有点装，老讲长征、理想什么的，后来我听一个朋友介绍说他在做一个口述历史的节目。某天，我们在一家酒店中见面，香格里拉见面，他送我一些小人书和他做的口述史的资料，我才发现原来屏幕以外的小崔很了不起。<br>　　<br>　　有个夏天我把这个故事讲给王石，带着王石去了小崔的工作室，到了工作室以后，我们看到崔永元花了十几、二十年的时间一直在做一件事情，就是记录当下中国人的状态，而且默默无闻地到处筹资。这让我看到了一个有责任感的男人，这个男人没事儿找事儿，把别人事儿当自己事儿，自己的事儿不当回事儿，自己都快抑郁了，还是操心民族的历史是不是能记录下来，着实感动了我，也感动了王石。后来，我们成了好朋友，也参与到了口述历史的项目中，共同记录这个时代以及这个时代中人们的想法和事迹。<br>　　<br>　　古人讲：势必有坚韧不拔之志，才有坚韧不拔之力。志向是带来毅力的事儿，就像磕头环岛的老太太，如果她心里没有佛，怎会有毅力去磕头环岛？毅力依附于信念和理想之上，不是欺骗也不是虚妄，理想除了让我们获得能量、财富外，还会在我们遭遇痛苦和不幸时支撑我们活下去。否则，当我们遇到巨大的困难时，很可能会选择逃避，甚至会在不为人知的时候选择死亡。在这个纷繁、价值观多元的时代，希望我们对“理想”这个词不再拒绝，不再隔膜，不再离它而去，而是从脚下做起，一天天努力，直到成功为止。","date":"2016-01-04 20:26","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2}],"noCategory":[],"dom":[{"addArticleTtitle":"文档树","classify":"dom","addarticleContent":"Document&nbsp;Object&nbsp;Model&nbsp;(DOM)&nbsp;为文档对象模型，&nbsp;它使用对象的表示方式来表示对应的文档结构及其中的内容。<br><br>下面为一个样例&nbsp;p&nbsp;元素在文档中的对象所包含的所有属性。<br>&lt;p&nbsp;id=&quot;target&quot;&gt;Hello,&nbsp;World!&lt;/p&gt;<br>p#targetaccessKey:&nbsp;&quot;&quot;<br>align:&nbsp;&quot;&quot;<br>attributes:&nbsp;Named<br>NodeMapbaseURI:&nbsp;&quot;&quot;<br>childElementCount:&nbsp;0<br>childNodes:&nbsp;NodeList[1]<br>children:&nbsp;HTMLCollection[0]<br>classList:&nbsp;DOMTokenList[0]<br>className:&nbsp;&quot;&quot;<br>clientHeight:&nbsp;0<br>clientLeft:&nbsp;0<br>clientTop:&nbsp;0<br>clientWidth:&nbsp;0<br>contentEditable:&nbsp;&quot;inherit&quot;<br>dataset:&nbsp;DOM<br>StringMapdir:&nbsp;&quot;&quot;<br>draggable:&nbsp;false<br>firstChild:&nbsp;text<br>firstElementChild:&nbsp;null<br>hidden:&nbsp;false<br>id:&nbsp;&quot;target&quot;<br>innerHTML:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>innerText:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>isContentEditable:&nbsp;false<br>lang:&nbsp;&quot;&quot;<br>lastChild:&nbsp;text<br>lastElementChild:&nbsp;null<br>localName:&nbsp;&quot;p&quot;<br>namespaceURI:&nbsp;&quot;http://www.w3.org/1999/xhtml&quot;<br>nextElementSibling:&nbsp;null<br>nextSibling:&nbsp;null<br>nodeName:&nbsp;&quot;P&quot;<br>nodeType:&nbsp;1<br>nodeValue:&nbsp;null<br>offsetHeight:&nbsp;0<br>offsetLeft:&nbsp;0<br>offsetParent:&nbsp;null<br>offsetTop:&nbsp;0<br>offsetWidth:&nbsp;0<br>onabort:&nbsp;null<br>onautocomplete:&nbsp;null<br>onautocompleteerror:&nbsp;null<br>onbeforecopy:&nbsp;null<br>onbeforecut:&nbsp;null<br>onbeforepaste:&nbsp;null<br>onblur:&nbsp;null<br>oncancel:&nbsp;null<br>oncanplay:&nbsp;null<br>oncanplaythrough:&nbsp;null<br>onchange:&nbsp;null<br>onclick:&nbsp;null<br>onclose:&nbsp;null<br>oncontextmenu:&nbsp;null<br>oncopy:&nbsp;null<br>oncuechange:&nbsp;null<br>oncut:&nbsp;null<br>ondblclick:&nbsp;null<br>ondrag:&nbsp;null<br>ondragend:&nbsp;null<br>ondragenter:&nbsp;null<br>ondragleave:&nbsp;null<br>ondragover:&nbsp;null<br>ondragstart:&nbsp;null<br>ondrop:&nbsp;null<br>ondurationchange:&nbsp;null<br>onemptied:&nbsp;null<br>onended:&nbsp;null<br>onerror:&nbsp;null<br>onfocus:&nbsp;null<br>oninput:&nbsp;null<br>oninvalid:&nbsp;null<br>onkeydown:&nbsp;null<br>onkeypress:&nbsp;null<br>onkeyup:&nbsp;null<br>onload:&nbsp;null<br>onloadeddata:&nbsp;null<br>onloadedmetadata:&nbsp;null<br>onloadstart:&nbsp;null<br>onmousedown:&nbsp;null<br>onmouseenter:&nbsp;null<br>onmouseleave:&nbsp;null<br>onmousemove:&nbsp;null<br>onmouseout:&nbsp;null<br>onmouseover:&nbsp;null<br>onmouseup:&nbsp;null<br>onmousewheel:&nbsp;null<br>onpaste:&nbsp;null<br>onpause:&nbsp;null<br>onplay:&nbsp;null<br>onplaying:&nbsp;null<br>onprogress:&nbsp;null<br>onratechange:&nbsp;null<br>onreset:&nbsp;null<br>onresize:&nbsp;null<br>onscroll:&nbsp;null<br>onsearch:&nbsp;null<br>onseeked:&nbsp;null<br>onseeking:&nbsp;null<br>onselect:&nbsp;null<br>onselectstart:&nbsp;null<br>onshow:&nbsp;null<br>onstalled:&nbsp;null<br>onsubmit:&nbsp;null<br>onsuspend:&nbsp;null<br>ontimeupdate:&nbsp;null<br>ontoggle:&nbsp;null<br>onvolumechange:&nbsp;null<br>onwaiting:&nbsp;null<br>onwebkitfullscreenchange:&nbsp;null<br>onwebkitfullscreenerror:&nbsp;null<br>onwheel:&nbsp;null<br>outerHTML:&nbsp;&quot;&lt;p&nbsp;id=&quot;target&quot;&gt;Hello,&nbsp;World!&lt;/p&gt;&quot;<br>outerText:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>ownerDocument:&nbsp;document<br>parentElement:&nbsp;null<br>parentNode:&nbsp;null<br>prefix:&nbsp;null<br>previousElementSibling:&nbsp;null<br>previousSibling:&nbsp;null<br>scrollHeight:&nbsp;0<br>scrollLeft:&nbsp;0<br>scrollTop:&nbsp;0<br>scrollWidth:&nbsp;0<br>shadowRoot:&nbsp;null<br>spellcheck:&nbsp;true<br>style:&nbsp;CSSStyle<br>DeclarationtabIndex:&nbsp;-1<br>tagName:&nbsp;&quot;P&quot;<br>textContent:&nbsp;&quot;Hello,&nbsp;World!&quot;<br>title:&nbsp;&quot;&quot;<br>translate:&nbsp;true<br>webkitdropzone:&nbsp;&quot;&quot;<br>__proto__:&nbsp;HTMLParagraphElement<br><br>通过使用&nbsp;DOM&nbsp;提供的&nbsp;API&nbsp;(Application&nbsp;Program&nbsp;Interface)&nbsp;可以动态的修改节点（node），也就是对&nbsp;DOM&nbsp;树的直接操作。&nbsp;浏览器中通过使用&nbsp;JavaScript&nbsp;来实现对于&nbsp;DOM&nbsp;树的改动。<br><br>DOM&nbsp;包含<br><br>DOM&nbsp;Core<br>DOM&nbsp;HTML<br>DOM&nbsp;Style<br>DOM&nbsp;Event<br><br>HTML&nbsp;转换&nbsp;DOM&nbsp;树<br><br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&nbsp;&nbsp;&lt;head&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;title&gt;My&nbsp;title&lt;/title&gt;<br>&nbsp;&nbsp;&lt;/head&gt;<br>&nbsp;&nbsp;&lt;body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href=&quot;&quot;&gt;My&nbsp;Link&lt;/a&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;My&nbsp;header&lt;/h1&gt;<br>&nbsp;&nbsp;&lt;/body&gt;<br>&lt;/html&gt;<br><br><br>节点遍历<br><br>在元素节点中提取自己所需的节点，并予以操作。<br>//&nbsp;Document.getElementsByTagName()<br>//&nbsp;更具标签名找到目标节点的集合，此例中为&nbsp;&lt;h1&gt;My&nbsp;header&lt;/h1&gt;<br>var&nbsp;node&nbsp;=&nbsp;document.getElementsByTagName(&quot;h1&quot;)[0];<br><br>//&nbsp;Node.parentNode;<br>//&nbsp;获得目标节点的父节点，此例中为&nbsp;body&nbsp;元素<br>node.parentNode;<br><br>//&nbsp;Node.firstChild<br>//&nbsp;获得目标节点的第一个子节点，此例中为&nbsp;&quot;My&nbsp;header&quot;<br>node.firstChild;<br><br>//&nbsp;Node.lastChild<br>//&nbsp;获得目标节点的最后一个子节点，此例中为&nbsp;&quot;My&nbsp;header&quot;<br>node.lastChild;<br><br>//&nbsp;Node.previousSibling;<br>//&nbsp;获得目标节点的前一个相邻节点<br>node.previousSibling;<br><br>//&nbsp;Node.nextSibling;<br>//&nbsp;获得目标节点的下一个相邻节点<br>node.nextSibling;<br><br>节点类型<br><br>常用节点类型<br>ELEMENT_NODE&nbsp;可使用&nbsp;Document.createElement(&quot;elementName&quot;);&nbsp;创建<br>TEXT_NODE&nbsp;可使用&nbsp;Document.createTextNode(&quot;Text&nbsp;Value&quot;);&nbsp;创建<br><br>不常用节点类型<br>COMMENT_NODE<br>DOCUMENT_TYPE_NODE<br><br>不同节点对应的NodeType类型<br>此值可以通过&nbsp;Node.nodeType&nbsp;来获取。<br><br>节点编号&nbsp;&nbsp;节点名称<br>1&nbsp;&nbsp;Element<br>2&nbsp;&nbsp;Attribute<br>3&nbsp;&nbsp;Text<br>4&nbsp;&nbsp;CDATA&nbsp;Section<br>5&nbsp;&nbsp;Entity&nbsp;Reference<br>6&nbsp;&nbsp;Entity<br>7&nbsp;&nbsp;Processing&nbsp;Instrucion<br>8&nbsp;&nbsp;Comment<br>9&nbsp;&nbsp;Document<br>10&nbsp;&nbsp;Document&nbsp;Type<br>11&nbsp;&nbsp;Document&nbsp;Fragment<br>12&nbsp;&nbsp;Notation<br><br>NOTE：此处需要清楚节点和元素的区别。我们平常说的元素&nbsp;其实指的是节点中得元素节点，所以说节点包含元素，节点还包括文本节点、实体节点等。<br><br>元素遍历<br><br>元素节点符合&nbsp;HTML&nbsp;DOM&nbsp;树规则，所以它与&nbsp;DOM&nbsp;中存在的节点相似。<br>&lt;p&gt;<br>&nbsp;&nbsp;Hello,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;em&gt;Xinyang&lt;/em&gt;!<br>&nbsp;&nbsp;回到<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主页<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;/a&gt;<br>&nbsp;&nbsp;。<br>&lt;/p&gt;<br>//&nbsp;在选取元素节点后<br><br>p.firstElementChild;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;em&gt;Xinyang&lt;/em&gt;<br>p.lastElementChild;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;主页&lt;/a&gt;<br><br>em.nextElementSibling;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&lt;a&nbsp;href=&quot;http://li-xinyang.com&quot;&gt;主页&lt;/a&gt;<br>em.previousElementSibling;&nbsp;//&nbsp;&quot;Hello,&quot;","addLink":"","date":"2016-01-07 18:27","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":0},{"addArticleTtitle":"节点操作","classify":"dom","addarticleContent":"因为&nbsp;DOM&nbsp;的存在，这使我们可以通过&nbsp;JavaScript&nbsp;来获取、创建、修改、或删除节点。<br><br>NOTE：下面提供的例子中的&nbsp;element&nbsp;均为元素节点。<br><br>1、获取节点<br><br>父子关系<br><br>element.parentNode<br>element.firstChild/element.lastChild<br>element.childNodes/element.children<br><br>兄弟关系<br><br>element.previousSibling/element.nextSibling<br>element.previousElementSibling/element.nextElementSibling<br><br>通过节点直接的关系获取节点会导致代码维护性大大降低（节点之间的关系变化会直接影响到获取节点），而通过接口则可以有效的解决此问题。<br><br>&lt;!DOCTYPE&nbsp;html&gt;<br>&lt;html&nbsp;lang=&quot;en&quot;&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charset=&quot;UTF-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;ELEMENT_NODE&nbsp;&&nbsp;TEXT_NODE&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br>&nbsp;&nbsp;&lt;ul&nbsp;id=&quot;ul&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;First&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Second&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Third&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;li&gt;Fourth&lt;/li&gt;<br>&nbsp;&nbsp;&lt;/ul&gt;<br>&nbsp;&nbsp;&lt;p&gt;Hello&lt;/p&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;ulNode&nbsp;=&nbsp;document.getElementsByTagName(&quot;ul&quot;)[0];<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.parentNode);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;body&gt;&lt;/body&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.previousElementSibling);&nbsp;//null<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.nextElementSibling);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;p&gt;Hello&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.firstElementChild);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;li&gt;First&lt;/li&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(ulNode.lastElementChild);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&lt;li&gt;Fourth&lt;/li&gt;<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br>NTOE：细心地人会发现，在节点遍历的例子中，body、ul、li、p节点之间是没有空格的，因为如果有空格，那么空格就会被当做一个TEXT节点，从而用ulNode.previousSibling获取到得就是一个空的文本节点，而不是&nbsp;&lt;li&gt;First&lt;/li&gt;&nbsp;节点了。即节点遍历的几个属性会得到所有的节点类型，而元素遍历只会得到相对应的元素节点。一般情况下，用得比较多得还是元素节点的遍历属性。<br><br>实现浏览器兼容版的element.children<br>有一些低版本的浏览器并不支持&nbsp;element.children&nbsp;方法，但我们可以用下面的方式来实现兼容。<br><br>&lt;html&nbsp;lang&gt;<br>&lt;head&gt;<br>&nbsp;&nbsp;&lt;meta&nbsp;charest=&quot;utf-8&quot;&gt;<br>&nbsp;&nbsp;&lt;title&gt;Compatible&nbsp;Children&nbsp;Method&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&nbsp;id=&quot;body&quot;&gt;<br>&nbsp;&nbsp;&lt;div&nbsp;id=&quot;item&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;div&gt;123&lt;/div&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;p&gt;ppp&lt;/p&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;h1&gt;h1&lt;/h1&gt;<br>&nbsp;&nbsp;&lt;/div&gt;<br>&nbsp;&nbsp;&lt;script&nbsp;type=&quot;text/javascript&quot;&gt;<br>&nbsp;&nbsp;&nbsp;&nbsp;function&nbsp;getElementChildren(e){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(e.children){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;e.children;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;compatible&nbsp;other&nbsp;browse&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;i,&nbsp;len,&nbsp;children&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;child&nbsp;=&nbsp;element.firstChild;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(child&nbsp;!=&nbsp;element.lastChild){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(child&nbsp;!=&nbsp;null){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if(child.nodeType&nbsp;==&nbsp;1){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children.push(child);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;child&nbsp;=&nbsp;child.nextSibling;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}else{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;children.push(child);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;children;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp;Test&nbsp;method&nbsp;getElementChildren(e)&nbsp;*/<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;item&nbsp;=&nbsp;document.getElementById(&quot;item&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;children&nbsp;=&nbsp;getElementChildren(item);<br>&nbsp;&nbsp;&nbsp;&nbsp;for(var&nbsp;i&nbsp;=0;&nbsp;i&nbsp;&lt;&nbsp;children.length;&nbsp;i++){<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;alert(children[i]);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&lt;/script&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br><br>NOTE：此兼容方法为初稿，还未进行兼容性测试。<br><br><br><br>2、接口获取元素节点<br><br>getElementById<br>getElementsByTagName<br>getElementsByClassName<br>querySelector<br>querySelectorAll<br><br>API&nbsp;&nbsp;只作用于&nbsp;document&nbsp;&nbsp;唯一返回值&nbsp;&nbsp;live<br>getElementById&nbsp;&nbsp;√&nbsp;&nbsp;√&nbsp;&nbsp;<br>getElementsByTagName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;√<br>getElementsByClassName&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;√<br>querySelectorAll&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br>querySelector&nbsp;&nbsp;&nbsp;&nbsp;√&nbsp;&nbsp;<br>getElementById<br><br>获取文档中指定&nbsp;id&nbsp;的节点对象。<br>var&nbsp;element&nbsp;=&nbsp;document.getElementById(&quot;id&quot;);<br>getElementsByTagName<br><br>动态的获取具有指定标签元素节点的集合（其返回值会被&nbsp;DOM&nbsp;的变化所影响，其值会发生变化）。此接口可直接通过元素而获取，不必直接作用于&nbsp;document&nbsp;之上。<br>//&nbsp;示例<br>var&nbsp;collection&nbsp;=&nbsp;element.getElementsByTagName(&quot;tagName&quot;);<br><br>//&nbsp;获取指定元素的所有节点<br>var&nbsp;allNodes&nbsp;=&nbsp;document.getElementsByTagName(&quot;*&quot;);<br><br>//&nbsp;获取所有&nbsp;p&nbsp;元素的节点<br>var&nbsp;elements&nbsp;=&nbsp;document.getElementsByTagName(&quot;p&quot;);<br>//&nbsp;取出第一个&nbsp;p&nbsp;元素<br>var&nbsp;p&nbsp;=&nbsp;elements[0];<br>getElementsByClassName<br><br>获取指定元素中具有指定&nbsp;class&nbsp;的所有节点。多个&nbsp;class&nbsp;可的选择可使用空格分隔，与顺序无关。<br>var&nbsp;elements&nbsp;=&nbsp;element.getElementsByClassName(&quot;className&quot;);<br><br>NOTE：IE9&nbsp;及一下版本不支持&nbsp;getElementsByClassName<br>兼容方法<br><br>function&nbsp;getElementsByClassName(root,&nbsp;className)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;特性侦测<br>&nbsp;&nbsp;if&nbsp;(root.getElementsByClassName)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;优先使用&nbsp;W3C&nbsp;规范接口<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;root.getElementsByClassName(className);<br>&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;获取所有后代节点<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;elements&nbsp;=&nbsp;root.getElementsByTagName(&quot;*&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;result&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;element&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;classNameStr&nbsp;=&nbsp;null;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;flag&nbsp;=&nbsp;null;<br><br>&nbsp;&nbsp;&nbsp;&nbsp;className&nbsp;=&nbsp;className.split(&quot;&nbsp;&quot;);<br><br>&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;选择包含&nbsp;class&nbsp;的元素<br>&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;element;&nbsp;element&nbsp;=&nbsp;elements[i];&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;classNameStr&nbsp;=&nbsp;&quot;&nbsp;&quot;&nbsp;+&nbsp;element.getAttribute(&quot;class&quot;)&nbsp;+&nbsp;&quot;&nbsp;&quot;;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag&nbsp;=&nbsp;true;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;(var&nbsp;j&nbsp;=&nbsp;0,&nbsp;name;&nbsp;name&nbsp;=&nbsp;className[j];&nbsp;j++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(classNameStr.indexOf(&quot;&nbsp;&quot;&nbsp;+&nbsp;name&nbsp;+&nbsp;&quot;&nbsp;&quot;)&nbsp;===&nbsp;-1)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;flag&nbsp;=&nbsp;false;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(flag)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;result.push(element);<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;result;<br>&nbsp;&nbsp;}<br>}<br><br>querySelector&nbsp;/&nbsp;querySelectorAll<br><br>获取一个&nbsp;list&nbsp;（其返回结果不会被之后&nbsp;DOM&nbsp;的修改所影响，获取后不会再变化）符合传入的&nbsp;CSS&nbsp;选择器的第一个元素或全部元素。<br>var&nbsp;listElementNode&nbsp;=&nbsp;element.querySelector(&quot;selector&quot;);<br>var&nbsp;listElementsNodes&nbsp;=&nbsp;element.querySelectorAll(&quot;selector&quot;);<br><br>var&nbsp;sampleSingleNode&nbsp;=&nbsp;element.querySelector(&quot;#className&quot;);<br>var&nbsp;sampleAllNodes&nbsp;=&nbsp;element.querySelectorAll(&quot;#className&quot;);<br>NOTE:&nbsp;IE9&nbsp;一下不支持&nbsp;querySelector&nbsp;与&nbsp;querySelectorAll<br><br><br>3、创建节点<br><br>创建节点&nbsp;-&gt;&nbsp;设置属性&nbsp;-&gt;&nbsp;插入节点<br>var&nbsp;element&nbsp;=&nbsp;document.createElement(&quot;tagName&quot;);<br><br><br>4、节点<br><br>textContent<br>获取或设置节点以及其后代节点的文本内容（对于节点中的所有文本内容）。<br>element.textContent;&nbsp;//&nbsp;获取<br>element.textContent&nbsp;=&nbsp;&quot;New&nbsp;Content&quot;;<br>NOTE：不支持&nbsp;IE&nbsp;9&nbsp;及其一下版本。<br><br>innerText&nbsp;（不符合&nbsp;W3C&nbsp;规范）<br>获取或设置节点以及节点后代的文本内容。其作用于&nbsp;textContent&nbsp;几乎一致。<br>element.innerText;<br><br>NOTE：不符合&nbsp;W3C&nbsp;规范，不支持&nbsp;FireFox&nbsp;浏览器。<br>FireFox&nbsp;兼容方案<br>if&nbsp;(!(&quot;innerText&quot;&nbsp;in&nbsp;document.body))&nbsp;{<br>&nbsp;&nbsp;HTMLElement.prototype.__defineGetter__(&quot;innerText&quot;,&nbsp;function(){<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.textContent;<br>&nbsp;&nbsp;});<br>&nbsp;&nbsp;HTMLElement.prototype.__defineSetter__(&quot;innerText&quot;,&nbsp;function(s)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.textContent&nbsp;=&nbsp;s;<br>&nbsp;&nbsp;});<br>}<br><br><br>5、插入节点<br><br>appendChild<br><br>在指定的元素内追加一个元素节点。<br>var&nbsp;aChild&nbsp;=&nbsp;element.appendChild(aChild);<br>insertBefore<br><br>在指定元素的指定节点前插入指定的元素。<br>var&nbsp;aChild&nbsp;=&nbsp;element.insertBefore(aChild,&nbsp;referenceChild);<br><br><br>6、删除节点<br><br>删除指定的节点的子元素节点。<br>var&nbsp;child&nbsp;=&nbsp;element.removeChild(child);<br>innerHTML<br><br>获取或设置指定节点之中所有的&nbsp;HTML&nbsp;内容。替换之前内部所有的内容并创建全新的一批节点（去除之前添加的事件和样式）。innerHTML&nbsp;不检查内容，直接运行并替换原先的内容。<br><br>NOTE：只建议在创建全新的节点时使用。不可在用户可控的情况下使用。<br>var&nbsp;elementsHTML&nbsp;=&nbsp;element.innerHTML;<br>存在的问题<br>低版本&nbsp;IE&nbsp;存在内存泄露<br>安全问题（用户可以在名称中运行脚本代码）","addLink":"","date":"2016-01-07 18:32","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":1},{"addArticleTtitle":"属性操作","classify":"dom","addarticleContent":"1、HTML&nbsp;属性与&nbsp;DOM&nbsp;属性的对应<br><br>每个&nbsp;HTML&nbsp;属性都会对应相应的&nbsp;DOM&nbsp;对象属性。<br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;label&nbsp;for=&quot;username&quot;&gt;User&nbsp;Name:&nbsp;&lt;/label&gt;<br>&nbsp;&nbsp;&lt;input&nbsp;type=&quot;input&quot;&nbsp;name=&quot;username&quot;&nbsp;id=&quot;username&quot;&nbsp;class=&quot;text&quot;&nbsp;value=&quot;&quot;&gt;<br>&lt;/div&gt;<br>input.id;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br>input.type;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;text&quot;<br>input.className;&nbsp;//&nbsp;&quot;text&quot;<br><br>label.htmlFor;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br><br><br><br>2、属性操作方式<br><br>3、Property&nbsp;Accessor<br><br>通过属性方法符得到的属性为转换过的实例对象（并非全字符串）。<br>特点<br><br>X&nbsp;通用行差（命名异常，使用不同的命名方式进行访问）<br>X&nbsp;扩展性差<br>√&nbsp;实用对象（取出后可直接使用）<br><br>读取属性<br><br>&lt;div&gt;<br>&nbsp;&nbsp;&lt;label&nbsp;for=&quot;username&quot;&gt;User&nbsp;Name:&nbsp;&lt;/label&gt;<br>&nbsp;&nbsp;&lt;input&nbsp;type=&quot;input&quot;&nbsp;name=&quot;username&quot;&nbsp;id=&quot;username&quot;&nbsp;class=&quot;text&quot;&nbsp;value=&quot;&quot;&gt;<br>&lt;/div&gt;<br>input.className;&nbsp;//&nbsp;&quot;text&quot;<br>input[id];&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;username&quot;<br><br>写入属性<br><br>可增加新的属性或改写已有属性。<br>input.value&nbsp;=&nbsp;&quot;new&nbsp;value&quot;;<br>input[id]&nbsp;=&nbsp;&quot;new-id&quot;;<br><br><br><br>4、getAttribute&nbsp;/&nbsp;setAttribute<br><br>特点<br><br>X&nbsp;仅可获取字符串（使用时需转换）<br>√&nbsp;通用性强<br><br>读取属性<br><br>获取到的均为属性的字符串。<br>var&nbsp;attribtue&nbsp;=&nbsp;element.getAttribute(&quot;attributeName&quot;);<br><br>写入属性<br><br>可增加新的属性或改写已有属性。<br>element.setAttribute(&quot;attributeName&quot;,&nbsp;value);<br>dataset<br><br>自定义属性，其为&nbsp;HTMLElement&nbsp;上的属性也是&nbsp;data-*&nbsp;的属性集。主要用于在元素上保存数据。获取的均为属性字符串。数据通常使用&nbsp;AJAX&nbsp;获取并存储在节点之上。<br>&lt;div&nbsp;id=&quot;user&quot;&nbsp;data-id=&quot;1234&quot;&nbsp;data-username=&quot;x&quot;&nbsp;data-email=&quot;mail@gmail.com&quot;&gt;&lt;/div&gt;<br>div.dataset.id;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;1234&quot;<br>div.dataset.username;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;x&quot;<br>div.dataset.email;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;&quot;mail@gmail.com&quot;<br>NOTE：dataset&nbsp;在低版本&nbsp;IE&nbsp;不可使用，但可通过&nbsp;getAttribute&nbsp;与&nbsp;setAttribute&nbsp;来做兼容。","addLink":"","date":"2016-01-07 19:19","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":2},{"addArticleTtitle":"样式操作","classify":"dom","addarticleContent":"通过&nbsp;JavaScript&nbsp;动态修改页面样式。<br>CSS&nbsp;对应&nbsp;DOM&nbsp;对象<br><br><br><br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;sample.css&quot;&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;link&quot;);<br>//&nbsp;对应于&nbsp;element.sheet<br><br>&lt;style&nbsp;type=&quot;text/css&quot;&nbsp;media=&quot;screen&quot;&gt;<br>&nbsp;&nbsp;body&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;margin:&nbsp;30px<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;style&quot;);<br>//&nbsp;对应于&nbsp;element.sheet<br><br>//&nbsp;整个页面的全部样式（不包括行内样式）<br>document.styleSheets<br><br>&lt;p&nbsp;style=&quot;color:red&quot;&gt;Text&nbsp;Color&lt;/p&gt;<br>//&nbsp;var&nbsp;element&nbsp;=&nbsp;document.querySelector(&quot;p&quot;);<br>//&nbsp;对应于&nbsp;element.style<br>内部样式表<br><br>&lt;style&gt;<br>&nbsp;&nbsp;body{margin:30;}<br>&nbsp;&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>&lt;/style&gt;<br><br>//&nbsp;1.对应所有样式的列表<br>//&nbsp;body{margin:30;}<br>//&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>element.sheet.cssRules;<br><br>//&nbsp;2.对应相应的&nbsp;CSS&nbsp;选择器<br>//&nbsp;p<br>element.sheet.cssRules[1].selectorText;<br><br>//&nbsp;3.对应一个样式<br>//&nbsp;p{color:&nbsp;#aaa;&nbsp;line-height:20px}<br>element.sheet.cssRules[1]<br><br>//&nbsp;4.对应所有样式的键值对<br>//&nbsp;color:&nbsp;#aaa;&nbsp;line-height:20px<br>element.sheet.cssRules[1].style;<br><br>//&nbsp;5.对应的属性值<br>//&nbsp;#aaa<br>element.sheet.cssRules[1].stlye.color;<br>element.sheet.cssRules[1].lineHeight;<br>行内样式<br><br>其对应于&nbsp;CSSStyleDeclaration&nbsp;的对象。<br>element.style.color;<br>//&nbsp;获取行内样式的键值对<br>更新样式<br><br>element.style<br><br>element.style.color&nbsp;=&nbsp;&quot;red&quot;;<br>element.style.background&nbsp;=&nbsp;&quot;black&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;style=&quot;color:&nbsp;red;&nbsp;background:&nbsp;black;&quot;&gt;&lt;/div&gt;<br>缺点<br><br>每个属性的更新都需要一个命令<br>命名异常（以驼峰命名法命名属性）<br>element.style.cssText<br><br>一次同时设置多个行内样式，其结果同&nbsp;element.style&nbsp;单独设置相同。<br>element.style.cssText&nbsp;=&nbsp;&quot;color:&nbsp;red;&nbsp;background:&nbsp;black&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;style=&quot;color:&nbsp;red;&nbsp;background:&nbsp;black;&quot;&gt;&lt;/div&gt;<br>以上两种方式均将样式混合在逻辑当中。<br>更新&nbsp;class<br><br>首先需要创建对应样式的&nbsp;CSS&nbsp;样式。<br>.angry&nbsp;{<br>&nbsp;&nbsp;color:&nbsp;red;<br>&nbsp;&nbsp;background:&nbsp;black;<br>}<br>然后再在&nbsp;JavaScript&nbsp;中，在对应的事件中给元素添加需要的类即可。<br>element.className&nbsp;+=&nbsp;&quot;&nbsp;angry&quot;;<br>增加样式后得到的结果<br>&lt;div&nbsp;class=&quot;angry&quot;&gt;&lt;/div&gt;<br>统一更新多个元素样式<br><br>以上方法均不适合同时更新多个样式，通过更换样式表的方式则可同时更改多个页面中的样式。将需要的大量样式也在一个皮肤样式表中，通过&nbsp;JavaScript&nbsp;来直接更换样式表来进行样式改变。（此方法也可用于批量删除样式）<br><br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;base.css&quot;&gt;<br>&lt;link&nbsp;rel=&quot;stylesheet&quot;&nbsp;type=&quot;text/css&quot;&nbsp;href=&quot;style1.css&quot;&gt;<br>element.setAttribute(&quot;href&quot;,&nbsp;&quot;style2.css&quot;);<br>获取样式<br><br>element.style<br><br>其对应的为元素的行内样式表而不是实际样式表。<br>&lt;input&nbsp;type=&quot;checkbox&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;<br>element.style.color;&nbsp;//&nbsp;&quot;&quot;<br>line-height:&nbsp;200px<br>window.getComputedStyle()<br><br>将需要取出样式的目标元素传入&nbsp;window.getComputedStyle()&nbsp;函数中，即可得到对应元素的实际样式。注意的是这里获取到的样式值为只读属性不可修改！<br>NOTE：获取的实际为&nbsp;CSSStyleDeclaration&nbsp;的实例对象。&nbsp;NOTE+：此方法不支持&nbsp;IE9&nbsp;以下版本，IE9&nbsp;中需使用&nbsp;element.currentStyle&nbsp;来做兼容。<br>var&nbsp;style&nbsp;=&nbsp;window.getComputedStyle(element[,&nbsp;pseudoEle]);<br>&lt;input&nbsp;type=&quot;checkbox&quot;&nbsp;name=&quot;&quot;&nbsp;value=&quot;&quot;&gt;<br>window.getComputedStyle(element).color;&nbsp;//&nbsp;&quot;rgb(0,0,0)&quot;","addLink":"","date":"2016-01-07 19:38","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":3},{"addArticleTtitle":"DOM 事件","classify":"dom","addarticleContent":"何为&nbsp;DOM&nbsp;事件，HTML&nbsp;DOM&nbsp;使JavaScript&nbsp;有能力对&nbsp;HTML&nbsp;事件做出反应。（例如，点击&nbsp;DOM&nbsp;元素，键盘被按，输入框输入内容以及页面加载完毕等）<br>事件流<br><br>一个&nbsp;DOM&nbsp;事件可以分为捕获过程、触发过程、冒泡过程。&nbsp;DOM&nbsp;事件流为&nbsp;DOM&nbsp;事件的处理及执行的过程。<br><br>事件注册<br><br>事件注册，取消以及触发其作用对象均为一个&nbsp;DOM&nbsp;元素。<br>注册事件<br><br>eventTarget.addEventListener(type,&nbsp;listener[,useCapture])<br>evenTarget&nbsp;表示要绑定事件的DOM元素<br>type&nbsp;表示要绑定的事件，如：&quot;click&quot;<br>listener&nbsp;表示要绑定的函数<br>useCapture&nbsp;可选参数，表示是否捕获过程<br>NOTE：useCapture&nbsp;为设定是否为捕获过程，默认事件均为冒泡过程，只有&nbsp;useCapture&nbsp;为&nbsp;true&nbsp;时才会启用捕获过程。<br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;事件处理函数<br>var&nbsp;clickHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;statements<br>};<br><br>//&nbsp;注册事件<br>elem.addEventListener(&quot;click&quot;,&nbsp;clickHandler,&nbsp;false);<br><br>//&nbsp;第二种方式，不建议使用<br>elem.onclick&nbsp;=&nbsp;clickHandler;<br>//&nbsp;或者来弥补只可触发一个处理函数的缺陷<br>elem.onclick&nbsp;=&nbsp;function(){<br>&nbsp;&nbsp;clickHandler();<br>&nbsp;&nbsp;func();<br>&nbsp;&nbsp;//&nbsp;其他处理函数<br>};<br><br>取消事件<br><br>eventTarget.removeEventListener(type,&nbsp;listener[,useCapture]);<br>evenTarget&nbsp;表示要绑定事件的DOM元素<br>type&nbsp;表示要绑定的事件，如：&quot;click&quot;<br>listener&nbsp;表示要绑定的函数<br>useCapture&nbsp;可选参数，表示是否捕获过程<br><br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;取消事件<br>elem.removeEventListener(&quot;click&quot;,&nbsp;clickHandler,&nbsp;false);<br><br>//&nbsp;第二种方式。不建议使用<br>elem.onclick&nbsp;=&nbsp;null;<br><br>触发事件<br><br>点击元素，按下按键均会触发&nbsp;DOM&nbsp;事件，当然也可以以通过代码来触发事件。<br>eventTarget.dispatchEvent(type);<br><br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;触发事件<br>elem.dispatchEvent(&quot;click&quot;);<br><br>浏览器兼容型<br><br>以上均为&nbsp;W3C定义的标准定义，但早期浏览器&nbsp;IE8&nbsp;及其以下版本，均没有采用标准的实现方式。不过这些低版本浏览器也提供了对于&nbsp;DOM&nbsp;事件的注册、取消以及触发的实现。<br>事件注册与取消，attchEvent/detachEvent。事件触发，fireEvent(e)，其也不存在捕获阶段（Capture&nbsp;Phase）。<br>兼容低版本代码实现<br><br>注册事件<br><br>var&nbsp;addEvent&nbsp;=&nbsp;document.addEventListener&nbsp;?<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.addEventListener(type,&nbsp;listener,&nbsp;useCapture);<br>&nbsp;&nbsp;}&nbsp;:<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.attachEvent(&quot;on&quot;&nbsp;+&nbsp;type,&nbsp;listener);<br>&nbsp;&nbsp;}<br><br>取消事件<br><br>var&nbsp;addEvent&nbsp;=&nbsp;document.removeElementListener&nbsp;?<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.removeElementListener(type,&nbsp;listener,&nbsp;useCapture);<br>&nbsp;&nbsp;}&nbsp;:<br>&nbsp;&nbsp;function(elem,&nbsp;type,&nbsp;listener,&nbsp;useCapture)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;elem.detachEvent(&quot;on&quot;&nbsp;+&nbsp;type,&nbsp;listener);<br>&nbsp;&nbsp;}<br><br>事件对象<br><br>调用事件处理函数时传入的信息对象，这个对象中含有关于这个事件的详细状态和信息，它就是事件对象&nbsp;event。其中可能包含鼠标的位置，键盘信息等。<br>//&nbsp;获取元素<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;事件处理函数<br>var&nbsp;clickHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;//&nbsp;statements<br>};<br><br>//&nbsp;注册事件<br>elem.addEventListener(&quot;click&quot;,&nbsp;clickHandler,&nbsp;false);<br><br>NOTE：在低版本&nbsp;IE&nbsp;中事件对象是被注册在&nbsp;window&nbsp;之上而非目标对象上。使用下面的兼容代码既可解决。<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br><br>//&nbsp;事件处理函数<br>var&nbsp;clickHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;event&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;//&nbsp;statements<br>};<br><br>属性和方法<br><br>通用属性和方法<br><br>属性<br><br>type&nbsp;事件类型<br>target(srcElement&nbsp;IE&nbsp;低版本)&nbsp;事件触发节点<br>currentTarget&nbsp;处理事件的节点<br>方法<br><br>stopPropagation&nbsp;阻止事件冒泡传播<br>preventDefault&nbsp;阻止默认行为<br>stopImmediatePropagation&nbsp;阻止冒泡传播<br><br>阻止事件传播<br><br>event.stopPropagation()（W3C规范方法），如果在当前节点已经处理了事件，则可以阻止事件被冒泡传播至&nbsp;DOM&nbsp;树最顶端即&nbsp;window&nbsp;对象。<br>event.stopImmediatePropagation()&nbsp;此方法同上面的方法类似，除了阻止将事件冒泡传播值最高的&nbsp;DOM&nbsp;元素外，还会阻止在此事件后的事件的触发。<br>event.cancelBubble=true&nbsp;为&nbsp;IE&nbsp;低版本中中对于阻止冒泡传播的实现。<br><br>阻止默认行为<br><br>默认行为是指浏览器定义的默认行为（点击一个链接的时候，链接默认就会打开。当我们双击文字的时候，文字就会被选中），比如单击链接可以打开新窗口。<br>Event.preventDefault()&nbsp;为&nbsp;W3C&nbsp;规范方法，在&nbsp;IE&nbsp;中的实现方法为&nbsp;Event.returnValue=false。<br><br>事件分类<br><br>Event<br><br><br><br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>load&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Document,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;image,&nbsp;iframe<br>unload&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Document,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window<br>error&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;image<br>select&nbsp;&nbsp;NO&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;input,&nbsp;textarea<br>abort&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;image<br>window<br><br>load&nbsp;页面全部加载完毕<br>unload&nbsp;离开本页之前的卸载<br>error&nbsp;页面异常<br>abort&nbsp;取消加载<br>image<br><br>load&nbsp;图片加载完毕<br>error&nbsp;图标加载错误<br>abort&nbsp;取消图标加载<br>在目标图标不能正常载入时，载入备份替代图来提供用户体验。<br>&lt;img&nbsp;src=&quot;http://sample.com/img.png&quot;&nbsp;onerror=&quot;this.src=&quot;http://sample.com/default.png&quot;&quot;&gt;<br>UIEvent<br><br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>resize&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;iframe<br>scroll&nbsp;&nbsp;NO/YES&nbsp;&nbsp;Document,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;document,&nbsp;div<br>NOTE：resize&nbsp;为改变浏览器或iframe的窗体大小时会触发事件，scroll&nbsp;则会在滑动内容时触发，作用于&nbsp;Document&nbsp;则不会冒泡，作用于内部元素则会冒泡。<br>MouseEvent<br><br>DOM&nbsp;事件中最常见的事件之一。<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>click&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;focus/activation&nbsp;&nbsp;div<br>dbclick&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;focus/activation/select&nbsp;&nbsp;div<br>mousedown&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;drag/scroll/text&nbsp;selection&nbsp;&nbsp;div<br>mosuemove&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseout&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseover&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseup&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;context&nbsp;menu&nbsp;&nbsp;div<br>mouseenter&nbsp;&nbsp;NO&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>mouseleave&nbsp;&nbsp;NO&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div<br>NOTE：mouseenter&nbsp;与&nbsp;mouseover&nbsp;的区别为前者在鼠标在子元素直接移动不会触发事件，而后者会触发。&nbsp;mouseleave&nbsp;与&nbsp;mouseout&nbsp;同上相似。<br>属性<br><br>clientX,&nbsp;clientX<br>screenX,&nbsp;screenY<br>ctrlKey,&nbsp;shiftKey,&nbsp;altKey,&nbsp;metaKey&nbsp;如果被按下则为真（true）<br>button(0,&nbsp;1,&nbsp;2)&nbsp;鼠标的间位<br><br><br>MouseEvent&nbsp;顺序<br><br>鼠标的移动过程中会产生很多事件。事件的监察频率又浏览器决定。<br>例子：从元素&nbsp;A&nbsp;上方移动过<br>mousemove&nbsp;-&gt;&nbsp;mouseover(A)&nbsp;-&gt;&nbsp;mouseenter(A)&nbsp;-&gt;&nbsp;mousemove(A)&nbsp;-&gt;&nbsp;mouseout(A)&nbsp;-&gt;&nbsp;mouseleave(A)<br>例子：点击元素<br>mousedown&nbsp;-&gt;&nbsp;[mousemove]&nbsp;-&gt;&nbsp;mouseup&nbsp;-&gt;&nbsp;click<br>实例：拖动元素<br><br>&lt;div&nbsp;id=&quot;div0&quot;&gt;&lt;/div&gt;<br>&lt;style&nbsp;media=&quot;screen&quot;&gt;<br>&nbsp;&nbsp;#div0&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;position:&nbsp;absolute;<br>&nbsp;&nbsp;&nbsp;&nbsp;top:&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;left:&nbsp;0;<br>&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;100px;<br>&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;100px;<br>&nbsp;&nbsp;&nbsp;&nbsp;border:&nbsp;1px&nbsp;solid&nbsp;black;<br>&nbsp;&nbsp;}<br>&lt;/style&gt;<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;div0&quot;);<br>var&nbsp;clientX,&nbsp;clientY,&nbsp;isMoving;<br>var&nbsp;mouseDownHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;event&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;clientX&nbsp;=&nbsp;event.clientX;<br>&nbsp;&nbsp;clientY&nbsp;=&nbsp;event.clientY;<br>&nbsp;&nbsp;isMoving&nbsp;=&nbsp;true;<br>}<br><br>var&nbsp;mouseMoveHandler&nbsp;=&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(!isMoving)&nbsp;return;<br>&nbsp;&nbsp;event&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;var&nbsp;newClientX&nbsp;=&nbsp;event.clientX,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newClientY&nbsp;=&nbsp;event.clientY;<br>&nbsp;&nbsp;var&nbsp;left&nbsp;=&nbsp;parseInt(elem.style.left)&nbsp;||&nbsp;0,<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;top&nbsp;=&nbsp;parseInt(elem.style.top)&nbsp;||&nbsp;0;<br>&nbsp;&nbsp;elem.style.left&nbsp;=&nbsp;left&nbsp;+&nbsp;(newClientX&nbsp;-&nbsp;clientX)&nbsp;+&nbsp;&quot;px&quot;;<br>&nbsp;&nbsp;elem.style.top&nbsp;=&nbsp;top&nbsp;+&nbsp;(newClientY&nbsp;-&nbsp;clientY)&nbsp;+&nbsp;&quot;px&quot;;<br>&nbsp;&nbsp;clientX&nbsp;=&nbsp;newClientX;<br>&nbsp;&nbsp;clientY&nbsp;=&nbsp;newClientY;<br>}<br><br>var&nbsp;mouseUpHandler&nbsp;=&nbsp;function()&nbsp;{<br>&nbsp;&nbsp;isMoving&nbsp;=&nbsp;false;<br>}<br><br>addEvent(elem,&nbsp;&quot;mousedown&quot;,&nbsp;mouseDownHandler);<br>addEvent(elem,&nbsp;&quot;mouseup&quot;,&nbsp;mouseUpHandler);<br>addEvent(elem,&nbsp;&quot;mousemove&quot;,&nbsp;mouseMoveHandler);<br>滚轮事件（Wheel）<br><br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>wheel&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;scroll&nbsp;or&nbsp;zoom&nbsp;document&nbsp;&nbsp;div<br>属性<br><br>deltaMode&nbsp;鼠标滚轮偏移量的单位<br>deltaX<br>deltaY<br>deltaZ<br>FocusEvent<br><br>其用于处理元素获得或失去焦点的事件。（例如输入框的可输入状态则为获得焦点，点击外部则失去焦点）<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>blur&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>focus&nbsp;&nbsp;NO&nbsp;&nbsp;Window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>focusin&nbsp;&nbsp;NO&nbsp;&nbsp;window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>focusout&nbsp;&nbsp;NO&nbsp;&nbsp;window,&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;window,&nbsp;input<br>NOTE：blur&nbsp;失去焦点时，focus&nbsp;获得焦点时，focusin&nbsp;即将获得焦点，focusout即将失去焦点。<br>属性<br><br>一个元素失去，既另一个元素获得焦点。这里的&nbsp;relatedTarget&nbsp;则为相对的那个元素。<br>relatedTarget<br>InputEvent<br><br>输入框输入内容则会触发输入事件。<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>beforeInput&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;update&nbsp;DOM&nbsp;Element&nbsp;&nbsp;input<br>input&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;input<br>NOTE：beforeInput&nbsp;为在按键按下后即将将输入字符显示之前生成的事件。<br>NOTE+：IE&nbsp;并没有&nbsp;InputEvent&nbsp;则需使用&nbsp;onpropertychange(IE)&nbsp;来代替。<br>KeyboardEvent<br><br>其用于处理键盘事件。<br>事件类型&nbsp;&nbsp;是否冒泡&nbsp;&nbsp;元素&nbsp;&nbsp;默认事件&nbsp;&nbsp;元素例子<br>keydown&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;beforeInput/input/focus/blur/activation&nbsp;&nbsp;div,&nbsp;input<br>keyup&nbsp;&nbsp;YES&nbsp;&nbsp;Element&nbsp;&nbsp;None&nbsp;&nbsp;div,&nbsp;input<br>属性<br><br>key&nbsp;按下的键字符串<br>code<br>ctrlKey,&nbsp;shiftKey,&nbsp;altKey,&nbsp;metaKey<br>repeat&nbsp;代表按键不松开为&nbsp;true<br>keyCode<br>charCode<br>which<br>事件代理<br><br>事件代理是指在父节点上（可为元素最近的父节点也可为上层的其他节点）处理子元素上触发的事件，其原理是通过事件流机制而完成的。可以通过事件对象中获取到触发事件的对象（如下所示）。<br>var&nbsp;elem&nbsp;=&nbsp;document.getElemenyById(&quot;id&quot;);<br>elem.addEventListener(&quot;click&quot;,&nbsp;function(event)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;e&nbsp;=&nbsp;event&nbsp;||&nbsp;window.event;<br>&nbsp;&nbsp;var&nbsp;target&nbsp;=&nbsp;e.target&nbsp;||&nbsp;e.srcElement;<br>&nbsp;&nbsp;//&nbsp;statements<br>});<br>优点<br><br>需要管理的事件处理函数更少<br>内存分配更少，更高效<br>增加与删除子节点可以不额外处理事件<br>缺点<br><br>事件管理的逻辑变的复杂（因为冒泡机制）<br><br>","addLink":"","date":"2016-01-07 20:29","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":4},{"addArticleTtitle":"BOM","classify":"dom","addarticleContent":"BOM&nbsp;为浏览器窗口对象的一组&nbsp;API。<br>BOM&nbsp;结构图<br><br><br>属性<br><br>属性名&nbsp;&nbsp;描述<br>navigator&nbsp;&nbsp;浏览器信息<br>location&nbsp;&nbsp;浏览器定位和导航<br>history&nbsp;&nbsp;窗口浏览器历史<br>screen&nbsp;&nbsp;屏幕信息<br>navigator<br><br>navigator.userAgent<br>Chrome,&nbsp;Mozilla/5.0(Windows&nbsp;NT&nbsp;6.1;&nbsp;WOW64)&nbsp;Apple&nbsp;WebKit/37.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/40.0.2214.115&nbsp;Safari/537.36<br>Firefox,&nbsp;Mozilla/5.0(Windows&nbsp;NT&nbsp;6.1;&nbsp;WOW64;&nbsp;rv:36.0)&nbsp;Gecko/20100101&nbsp;Firefox/36.0<br>IE,&nbsp;Mozilla/5.0&nbsp;(Windows&nbsp;NT&nbsp;6.1;&nbsp;WOW64;&nbsp;Trident/7.0;&nbsp;SLCC2;&nbsp;.NET&nbsp;CLR&nbsp;2.0.50727;&nbsp;.NET&nbsp;CLR&nbsp;3.5.30729;&nbsp;.NET&nbsp;CLR&nbsp;3.0.30729;&nbsp;Media&nbsp;Center&nbsp;PC&nbsp;6.0;&nbsp;.NET4.0C;&nbsp;.NET4.0E;&nbsp;InfoPath.3;&nbsp;rv:11.0)&nbsp;like&nbsp;Gecko<br>appCodeName:&nbsp;&quot;Mozilla&quot;appName:&nbsp;&quot;Netscape&quot;appVersion:&nbsp;&quot;5.0&nbsp;(Macintosh;&nbsp;Intel&nbsp;Mac&nbsp;OS&nbsp;X&nbsp;10_10_3)&nbsp;AppleWebKit/537.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/43.0.2357.124&nbsp;Safari/537.36&quot;cookieEnabled:&nbsp;truedoNotTrack:&nbsp;&quot;1&quot;geolocation:&nbsp;GeolocationhardwareConcurrency:&nbsp;8language:&nbsp;&quot;en-US&quot;languages:&nbsp;Array[4]maxTouchPoints:&nbsp;0mimeTypes:&nbsp;MimeTypeArrayonLine:&nbsp;truepermissions:&nbsp;Permissionsplatform:&nbsp;&quot;MacIntel&quot;plugins:&nbsp;PluginArrayproduct:&nbsp;&quot;Gecko&quot;productSub:&nbsp;&quot;20030107&quot;serviceWorker:&nbsp;ServiceWorkerContaineruserAgent:&nbsp;&quot;Mozilla/5.0&nbsp;(Macintosh;&nbsp;Intel&nbsp;Mac&nbsp;OS&nbsp;X&nbsp;10_10_3)&nbsp;AppleWebKit/537.36&nbsp;(KHTML,&nbsp;like&nbsp;Gecko)&nbsp;Chrome/43.0.2357.124&nbsp;Safari/537.36&quot;vendor:&nbsp;&quot;Google&nbsp;Inc.&quot;vendorSub:&nbsp;&quot;&quot;webkitPersistentStorage:&nbsp;DeprecatedStorageQuotawebkitTemporaryStorage:&nbsp;DeprecatedStorageQuota__proto__:&nbsp;Navigator<br>NOTE：可以通过&nbsp;userAgent&nbsp;判断浏览器。<br>location<br><br>代表浏览器的定位和导航。可以使用&nbsp;location&nbsp;来操作&nbsp;URL&nbsp;中的各个部分。最常用的有&nbsp;href&nbsp;属性，当前访问资源的完整路径。<br>http://www.github.com:8080/index.html?user=li-xinyang&lang=zh-CN#home<br>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>protocol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hostname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#92;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;pathname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host<br>方法<br><br>assign(url)&nbsp;载入新的&nbsp;url，记录浏览记录<br>replace(url)&nbsp;载入新的&nbsp;url&nbsp;不记录浏览记录<br>reload()&nbsp;重新载入当前页<br>history<br><br>浏览器当前窗口的浏览历史。<br>length:&nbsp;9state:&nbsp;null&nbsp;__proto__:&nbsp;History<br>方法<br><br>back(int)&nbsp;后退<br>forward(int)&nbsp;前进<br>go(int)&nbsp;正数向前，附属向后<br>screen<br><br>其中包含屏幕信息。其中&nbsp;avil-&nbsp;开头的属性为可用属性，其余则为显示器设备属性。<br>Window&nbsp;方法<br><br>方法&nbsp;&nbsp;描述<br>alert(),&nbsp;confirm()&nbsp;返回真假,&nbsp;prompt()&nbsp;返回用户输入值&nbsp;&nbsp;三种对话框<br>setTimeout(),&nbsp;setInterval()&nbsp;&nbsp;计时器<br>open(),&nbsp;close()&nbsp;&nbsp;开启窗口，关闭窗口<br>NOTE：对话框会阻塞线程。<br>打开或关闭窗口<br>var&nbsp;w&nbsp;=&nbsp;window.open(&quot;subwindow.html&quot;,&nbsp;&quot;subwin&quot;,&nbsp;&quot;width=300,&nbsp;height=300,&nbsp;status=yes,&nbsp;resizable=yes&quot;);<br><br>//&nbsp;既可关闭窗口<br>w.close();<br>NOTE：无需记忆，更多属性在使用时查询文档。<br>Window&nbsp;事件<br><br>事件名&nbsp;&nbsp;描述<br>load&nbsp;&nbsp;文档和所有图片完成加载时<br>unload&nbsp;&nbsp;离开当前文档时<br>beforeunload&nbsp;&nbsp;和&nbsp;unload&nbsp;类似，但是它提供询问用户是否确认离开的机会<br>resize&nbsp;&nbsp;拖动改变浏览器窗口大小时<br>scroll&nbsp;&nbsp;拖动浏览器时","addLink":"","date":"2016-01-07 20:31","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":5},{"addArticleTtitle":"数据通信","classify":"dom","addarticleContent":"HTTP<br><br>HTTP&nbsp;为一个通信协议。HTTP&nbsp;客户端发起请求并创建端口。HTTP&nbsp;服务器在端口监听客户端的请求。&nbsp;HTTP&nbsp;服务器在收到请求后则返回状态和所请求的内容。<br>网页浏览全过程&nbsp;（粗浅流程）<br>域名解析<br>搜索浏览器自身&nbsp;DNS&nbsp;缓存<br>搜索操作系统自身&nbsp;DNS&nbsp;缓存（如上一级未找到或已失效）<br>读取本地&nbsp;HOST&nbsp;文件&nbsp;（如上一级未找到或已失效，/etc/hosts）<br>浏览器发起&nbsp;DNS&nbsp;系统调用请求<br>ISP&nbsp;服务器查找自身缓存<br>ISP&nbsp;服务器发起迭代（逐域寻找需要的地址）请求<br>得到请求资源的&nbsp;IP&nbsp;地址<br>发起&nbsp;HTTP&nbsp;“三次握手”（下面为一个超级简化版）<br>建立连接，等待服务器确认<br>服务器接受请求，回复客户<br>客户端与服务器连接成功（TCP/IP&nbsp;连接成功）<br>客户根据协议发送请求<br>服务器更具请求返回客户需求资源<br>客户获得资源<br>HTTP&nbsp;事务<br><br><br><br>HTTP&nbsp;请求报文<br><br><br><br>其中包括主机地址，HTTP&nbsp;协议版本号。头部由键值对组成。因为此请求为&nbsp;GET&nbsp;方法所以请求体为空。<br>HTTP&nbsp;回复报文<br><br><br><br>其中包括&nbsp;HTTP&nbsp;版本号，状态码及状态码描述。头部依然为键值对组成。主体则为&nbsp;HTML&nbsp;文件。<br>常用&nbsp;HTTP&nbsp;方法<br><br>常用方法<br><br>方法&nbsp;&nbsp;描述&nbsp;&nbsp;是否包含主题<br>GET&nbsp;&nbsp;从服务器获取一份文档&nbsp;&nbsp;否<br>POST&nbsp;&nbsp;向服务器发送需要处理的数据&nbsp;&nbsp;是<br>PUT&nbsp;&nbsp;将请求的主题部分储存在服务器上&nbsp;&nbsp;是<br>DELETE&nbsp;&nbsp;从服务器删除一份文档&nbsp;&nbsp;否<br>不常用方法<br>方法&nbsp;&nbsp;描述&nbsp;&nbsp;是否包含主题<br>HEAD&nbsp;&nbsp;只从服务器获取头文档的首部&nbsp;&nbsp;否<br>TRACE&nbsp;&nbsp;对可能经过代理服务器传送到服务器上的报文进行追踪&nbsp;&nbsp;否<br>OPTIONS&nbsp;&nbsp;决定可以在服务器上执行的方法&nbsp;&nbsp;否<br>URL&nbsp;构成<br><br>http://www.github.com:8080/index.html?user=li-xinyang&lang=zh-CN#home<br>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>protocol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hostname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#92;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;pathname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host<br>可选部分包括：<br>port<br>pathname<br>search<br>hash<br>NOTE：上面提供的&nbsp;URL&nbsp;地址仅为参考所用。<br>HTTP&nbsp;版本<br><br>HTTP/0.9&nbsp;1991年&nbsp;HTTP&nbsp;原型，存在设计缺陷<br>HTTP/1.0&nbsp;第一个广泛应用版本<br>HTTP/1.0+&nbsp;添加持久的&nbsp;keep-alive&nbsp;链接，虚拟主机支持，代理连接支持，成为非官方的事实版本<br>HTTP/1.1&nbsp;校正结构性缺陷，明确语义，引入重要的新能优化措施，删除不好的特性（当前使用版本）<br>NOTE：此文写于2015年6月。<br>常见&nbsp;HTTP&nbsp;状态码<br><br>状态码&nbsp;&nbsp;描述&nbsp;&nbsp;代码描述<br>200&nbsp;&nbsp;请求成功，一般用于&nbsp;GET&nbsp;和&nbsp;POST&nbsp;方法&nbsp;&nbsp;OK<br>301&nbsp;&nbsp;资源移动。所请求资源自动到新的&nbsp;URL，浏览器自动跳转至新的&nbsp;URL&nbsp;&nbsp;Moved&nbsp;Permanently<br>304&nbsp;&nbsp;未修改。所请求资源未修改，浏览器读取缓存数据&nbsp;&nbsp;Not&nbsp;Modified<br>400&nbsp;&nbsp;请求语法错误，服务器无法解析&nbsp;&nbsp;Bad&nbsp;Request<br>404&nbsp;&nbsp;未找到资源，可以设置个性“404页面”&nbsp;&nbsp;Not&nbsp;Found<br>500&nbsp;&nbsp;服务器内部错误&nbsp;&nbsp;Internal&nbsp;Server&nbsp;Error<br><br><br>AJAX<br><br>AJAX（Asynchronous&nbsp;JavaScript&nbsp;and&nbsp;HTML）异步获取数据的概念，由&nbsp;Jesse&nbsp;James&nbsp;Garrett&nbsp;在2005年提出。<br>AJAX&nbsp;请求全过程<br><br><br>AJAX&nbsp;调用<br><br>三部完成&nbsp;AJAX&nbsp;调用<br>创建&nbsp;XHR&nbsp;对象<br>处理返回数据及错误处理<br>发送请求<br>var&nbsp;xhr&nbsp;=&nbsp;new&nbsp;XMLHttpRequest();<br><br>xhr.onreadystatechange&nbsp;=&nbsp;function(callback)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(xhr.readyState&nbsp;===&nbsp;4)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;((xhr.status&nbsp;&gt;==&nbsp;200&nbsp;&&&nbsp;xhr.status&nbsp;&lt;&nbsp;300)&nbsp;||&nbsp;xhr.status&nbsp;===&nbsp;304)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;callback(xhr.responseText);<br>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;console.error(&quot;Request&nbsp;was&nbsp;unsuccessful:&nbsp;&quot;&nbsp;+&nbsp;xhr.status);<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;}<br>}<br><br>xhr.open(&quot;get&quot;,&nbsp;&quot;exmaple.json&quot;,&nbsp;true);<br>xhr.setRequestHeader(&quot;myHeader&quot;,&nbsp;&quot;myValue&quot;);<br>xhr.send(null);<br>NOTE：xhr.onload&nbsp;只针对当&nbsp;readyState&nbsp;===&nbsp;4&nbsp;和&nbsp;status&nbsp;===&nbsp;200&nbsp;时的事件。<br>open<br><br>xhr.open(method,&nbsp;url[,&nbsp;async&nbsp;=&nbsp;true]);<br>method&nbsp;为上面说过的&nbsp;HTTP&nbsp;方法（例如，GET、POST）<br>url&nbsp;为资源地址<br>async&nbsp;默认为真，用于设置异步请求<br>setRequestHeader<br><br>xhr.setRequestHeader(&quot;myHeader&quot;,&nbsp;&quot;myValue&quot;);<br><br>xhr.setRequestHeader(&quot;Content-Type&quot;,&nbsp;&quot;application/x-www-form-urlencoded&quot;);<br>用于设置头部的键值对。<br>send<br><br>xhr.send([data=null]);<br><br>xhr.send()<br>数据可包含字符串或表单数控，但需要提前为&nbsp;RequestHeader&nbsp;做设置。<br>请求参数序列化<br><br>将查询参数使用字符串，跟入资源地址中。<br>xhr.open(&quot;get&quot;,&nbsp;&quot;example.json?&quot;&nbsp;+&nbsp;&quot;name=value&age=value&quot;,&nbsp;true);<br>对象转换字符串的函数实现<br>function&nbsp;serialize(data)&nbsp;{<br>&nbsp;&nbsp;if&nbsp;(!data)&nbsp;return&nbsp;&quot;&quot;;<br>&nbsp;&nbsp;var&nbsp;pairs&nbsp;=&nbsp;[];<br>&nbsp;&nbsp;for&nbsp;(var&nbsp;name&nbsp;in&nbsp;data)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(!data.hasOwnProperty(name))&nbsp;continue;<br>&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(typeof&nbsp;data[name]&nbsp;===&nbsp;&quot;function&quot;)&nbsp;continue;<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;value&nbsp;=&nbsp;data[name].toString();<br>&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;encodeURIComponent(name);<br>&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;=&nbsp;encodeURIComponent(value);<br>&nbsp;&nbsp;&nbsp;&nbsp;pairs.push(name&nbsp;+&nbsp;&quot;=&quot;&nbsp;+&nbsp;value);<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return&nbsp;pairs.join(&quot;&&quot;);<br>}<br>GET&nbsp;请求<br>var&nbsp;url&nbsp;=&nbsp;&quot;example.json?&quot;&nbsp;+&nbsp;serialize(formData);<br>xhr.open(&quot;get&quot;,&nbsp;url,&nbsp;true);<br>xhr.send(null);<br>POST&nbsp;请求<br>查询参数需要作为&nbsp;send()&nbsp;的存数传入。<br>xhr.open(&quot;get&quot;,&nbsp;&quot;example.json&quot;,&nbsp;true);<br>xhr.send(serialize(formData));<br>同源策略<br><br>两个页面拥有相同的协议（Protocol）、端口（Port）、和主机（host）那么这两个页面就是属于同一个源（Origin）。<br>http://www.github.com:8080/index.html?user=li-xinyang&lang=zh-CN#home<br>&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>protocol&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hostname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;port&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;|<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&#92;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/&nbsp;&nbsp;&nbsp;&nbsp;pathname&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;search&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;hash<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;host<br>|-----完全一致则同源------|<br>跨域资源访问<br><br>不满足同源策略的资源访问均属于跨域资源访问，W3C&nbsp;定义了&nbsp;CORS。现代浏览器已经实现了&nbsp;CORS&nbsp;的支持。<br>CORS&nbsp;原理实现图<br><br><br>其他跨域技术<br><br>Frame&nbsp;代理<br>JSONP<br>Comet<br>Web&nbsp;Sockets<br>...<br>Frame&nbsp;代理<br>关于&nbsp;Frame&nbsp;代理的更多内容在这里。<br><br><br>优点：<br><br>参照&nbsp;CORS&nbsp;标准<br>支持各种请求方法&nbsp;GET&nbsp;POST&nbsp;PUT&nbsp;DELETE<br>缺点：<br><br>需要在目标服务器防止代理文件（造成延时）<br>低版本在大并发消息通信机制会产生延时<br>JSONP<br>全程为&nbsp;JSON&nbsp;with&nbsp;Padding（填充式&nbsp;JSON），它利用&nbsp;&lt;script&gt;&nbsp;可以跨域的原理。请求一段&nbsp;JavaScript&nbsp;代码，然后执行&nbsp;JavaScript&nbsp;代码来实现跨域。<br>function&nbsp;handleResponse(response)&nbsp;{<br>&nbsp;&nbsp;alert(response.name);<br>}<br><br>var&nbsp;script&nbsp;=&nbsp;document.createElement(&quot;script&quot;);<br>script.src&nbsp;=&nbsp;&quot;http://localhost:3000/json?callback=handleResponse&quot;;<br>document.body.insertBefore(script,&nbsp;document.body.firstChild);","addLink":"","date":"2016-01-07 20:33","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":6},{"addArticleTtitle":"数据存储","classify":"dom","addarticleContent":"Cookie<br><br>浏览器中的&nbsp;Cookie&nbsp;是指小型文本文件，通常在&nbsp;4KB&nbsp;大小左右。（由键值对构成用&nbsp;;&nbsp;隔开）大部分时候是在服务器端对&nbsp;Cookie&nbsp;进行设置，在头文件中&nbsp;Set-Cookie&nbsp;来对&nbsp;Cookie&nbsp;进行设置。<br>页面可以访问当前页的&nbsp;Cookie&nbsp;也可以访问父域的&nbsp;Cookie。<br>属性<br><br>属性&nbsp;&nbsp;默认值&nbsp;&nbsp;作用<br>Name（必填）&nbsp;&nbsp;&nbsp;&nbsp;名<br>Value（必填）&nbsp;&nbsp;&nbsp;&nbsp;值<br>Domain&nbsp;&nbsp;当前文档域&nbsp;&nbsp;作用域<br>Path&nbsp;&nbsp;当前文档路径&nbsp;&nbsp;作用路径<br>Expires（时间戳）/Max-Age（毫秒数值）&nbsp;&nbsp;浏览器会话时间&nbsp;&nbsp;失效事件<br>Secure&nbsp;&nbsp;false&nbsp;&nbsp;https&nbsp;协议时生效<br>作用域<br><br>设置作用域<br><br><br>设置作用路径<br><br><br>读取<br><br>下面转换&nbsp;Cookie&nbsp;至&nbsp;JavaScript&nbsp;对象的函数。<br>function&nbsp;getcookie()&nbsp;{<br>&nbsp;&nbsp;var&nbsp;cookie&nbsp;=&nbsp;{};<br>&nbsp;&nbsp;var&nbsp;all&nbsp;=&nbsp;document.cookie;<br>&nbsp;&nbsp;if&nbsp;(all&nbsp;===&nbsp;&quot;&quot;)&nbsp;return&nbsp;cookie;<br>&nbsp;&nbsp;var&nbsp;list&nbsp;=&nbsp;all.split(&quot;;&nbsp;&quot;);<br>&nbsp;&nbsp;for&nbsp;(var&nbsp;i&nbsp;=&nbsp;0,&nbsp;len&nbsp;=&nbsp;list.length;&nbsp;i&nbsp;&lt;&nbsp;len;&nbsp;i++)&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;item&nbsp;=&nbsp;list[i];<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;p&nbsp;=&nbsp;item.indexOf(&quot;=&quot;);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;name&nbsp;=&nbsp;item.substring(0,&nbsp;p);<br>&nbsp;&nbsp;&nbsp;&nbsp;name&nbsp;=&nbsp;decodeURIComponent(name);<br>&nbsp;&nbsp;&nbsp;&nbsp;var&nbsp;value&nbsp;=&nbsp;item.substring(p&nbsp;+&nbsp;1);<br>&nbsp;&nbsp;&nbsp;&nbsp;value&nbsp;=&nbsp;decodeURIComponent(value);<br>&nbsp;&nbsp;&nbsp;&nbsp;cookie[name]&nbsp;=&nbsp;value;<br>&nbsp;&nbsp;}<br>&nbsp;&nbsp;return&nbsp;cookie;<br>}<br>设置与修改<br><br>document.cookie&nbsp;=&nbsp;&quot;name=value&quot;;<br>下面为设置&nbsp;Cookie&nbsp;值的封装函数。<br>function&nbsp;setCookie(name,&nbsp;value,&nbsp;expires,&nbsp;path,&nbsp;domain,&nbsp;secure)&nbsp;{<br>&nbsp;&nbsp;var&nbsp;cookie&nbsp;=&nbsp;encodeURIComponent(name)&nbsp;+&nbsp;&quot;=&quot;&nbsp;+&nbsp;encodeURIComponent(value);<br>&nbsp;&nbsp;if&nbsp;(expires)<br>&nbsp;&nbsp;&nbsp;&nbsp;cookie&nbsp;+=&nbsp;&quot;;&nbsp;expires=&quot;&nbsp;+&nbsp;expires.toGMTString();<br>&nbsp;&nbsp;if&nbsp;(path)<br>&nbsp;&nbsp;&nbsp;&nbsp;cookie&nbsp;+=&nbsp;&quot;;&nbsp;path=&quot;&nbsp;+&nbsp;path;<br>&nbsp;&nbsp;if&nbsp;(domain)<br>&nbsp;&nbsp;&nbsp;&nbsp;cookie&nbsp;+=&nbsp;&quot;;&nbsp;domain=&quot;&nbsp;+&nbsp;domain;<br>&nbsp;&nbsp;if&nbsp;(secure)<br>&nbsp;&nbsp;&nbsp;&nbsp;cookie&nbsp;+=&nbsp;&quot;;&nbsp;secure=&quot;&nbsp;+&nbsp;secure;<br>&nbsp;&nbsp;document.cookie&nbsp;=&nbsp;cookie;<br>}<br>下面为删除**&nbsp;Cookie&nbsp;值的函数<br>function&nbsp;removeCookie(name,&nbsp;path,&nbsp;domain)&nbsp;{<br>&nbsp;&nbsp;document.cookie&nbsp;=&nbsp;&quot;name=&quot;&nbsp;+&nbsp;name&nbsp;+&nbsp;&quot;;&nbsp;path=&quot;&nbsp;+&nbsp;path&nbsp;+&nbsp;&quot;;&nbsp;domain=&quot;&nbsp;+&nbsp;domain&nbsp;+&nbsp;&quot;;&nbsp;max-age=0&quot;;<br>}<br>Cookie&nbsp;缺陷<br><br>流量代价<br>安全性（明文传递）<br>大小限制<br>Storage<br><br>因为&nbsp;Cookie&nbsp;弊端的存在，所以在&nbsp;HTML5&nbsp;中提供了&nbsp;Storage&nbsp;的替代方案。<br>作用域的不同&nbsp;Storage&nbsp;分为&nbsp;Local&nbsp;Storage&nbsp;和&nbsp;Session&nbsp;Storage，前者在用户不清理的情况下默认时间为永久，后者默认事件则为浏览器的会话时间（浏览器不同窗口直接不共享&nbsp;Session&nbsp;Storage）。<br><br><br>不同浏览器对其实现的不同导致支持大小也不太，通常在&nbsp;5MB&nbsp;作用。<br>对象<br><br>读取<br><br>localStorage.name<br>添加或修改<br>localStorage.name&nbsp;=&nbsp;&quot;Value&quot;;<br>浏览器只支持字符串在&nbsp;Storage&nbsp;中的存储。<br>删除<br><br>delete&nbsp;localStorage.name<br>API<br><br>使用&nbsp;API&nbsp;操作&nbsp;Storage&nbsp;可以进行向下兼容的功能，在不支持的情况下可以用&nbsp;Cookie&nbsp;来代替。<br>localStorage.length&nbsp;获取键值对数量<br>localStorage.getItem(&quot;name&quot;)&nbsp;获取对应值<br>localStorage.key(i)&nbsp;对应值的索引获取<br>localStorage.setItem(&quot;name&quot;,&nbsp;&quot;value&quot;)&nbsp;设置键值对<br>localStorage.removeItem(&quot;name&quot;)&nbsp;删除一个值<br>localStorage.clear()&nbsp;删除所有数据","addLink":"","date":"2016-01-07 20:34","author":"xxz","good":0,"view":0,"comments":0,"commentsStrArr":[],"articleId":7}]} ';
var dataObj=JSON.parse(dataJsonStr);
var dataSaid=[
	{
		said:"二十四五岁，不再迷茫，心中有个目标，前进吧！",
		date:"2016-01-02 17:30"
	},
	{
		said:"今天天气真好，适合----睡觉",
		date:"2016-01-03 08:30"
	},
	{
		said:"知识改变世界，教育改变未来，奋斗吧，骚年！为了遇到更好的自己。",
		date:"2016-01-05 23:32"
	}
]

